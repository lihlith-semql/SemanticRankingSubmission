{"index": 0, "beams": [{"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.City))", "score": -0.19316065342011046, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.20115544242305802, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.City))", "score": -0.2298396487735733, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.City))", "score": -0.2362249903133863, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.25374976463479154, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.City))", "score": -0.2598415609099201, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.2601696370857365, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.3170847899420885, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.3277380290772265, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.City))", "score": -0.3284861138280525, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.City))", "score": -0.3314686294825692, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.City),Customer.City))", "score": -0.33154913387961543, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.City))", "score": -0.3323182109138042, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.Company))", "score": -0.3342295381556217, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.City))", "score": -0.33742121351832444, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Customer.FirstName))", "score": -0.0499924540927168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Employee.FirstName))", "score": -0.37038160566589795, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Employee.FirstName),Customer.FirstName))", "score": -0.42142607443383895, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Netherlands), Customer.FirstName),Customer.FirstName))", "score": -0.4306472789903637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Employee.LastName))", "score": -0.4840781808306929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Employee.LastName),Customer.FirstName))", "score": -0.5134804414992686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Netherlands), Customer.FirstName),Customer.FirstName))", "score": -0.5399735223909374, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Artist.ArtistId))", "score": -0.5647298217227217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Customer.LastName))", "score": -0.6290670156886335, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.LastName),Customer.FirstName))", "score": -0.6298574375396129, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Netherlands), Customer.FirstName),Customer.FirstName))", "score": -0.6379733335634228, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Customer.FirstName))", "score": -0.672135082364548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Netherlands), Customer.FirstName),Customer.FirstName))", "score": -0.6929551612993237, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.Phone),Customer.FirstName))", "score": -0.7155737447028514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers from Netherlands ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Customer.FirstName),Customer.Phone))", "score": -0.7182455182482954, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Netherlands), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2095859285446045, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.23826074742479733, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.290267128667315, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29229772595545334, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.307954005873413, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3102708887343892, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical), Album.Title),Album.Title))", "score": -0.31418167357994586, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32584400204033354, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3347558739774458, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.342099326154639, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical), Album.Title),Album.Title))", "score": -0.35262660796861683, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.35868494226126646, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId), Album.Title),Album.Title))", "score": -0.3718739930670082, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3873597362219121, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3913390621057566, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18734972316395712, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19082172540814837, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,!=,R&B/Soul), MediaType.Name),MediaType.Name))", "score": -0.19898062021089752, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.27102298667703995, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.28739712643125276, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,!=,R&B/Soul),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2996411236223768, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3008686605825433, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3038643295581178, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3046017065493059, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3070371501726492, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.307482089168578, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3104777505907114, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Name,!=,5360574), MediaType.Name),MediaType.Name))", "score": -0.3171619893452476, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,5360574), MediaType.Name),MediaType.Name))", "score": -0.34059960648763704, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what media type are tracks from the genre R&B/Soul that are not the size of 5360574 bytes?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),Track.MediaTypeId)", "score": -0.3567700386357162, "correct_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,5360574),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.10333227191411533, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.13566246967685405, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14618078534080203, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.16168163878439262, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.21256299951086277, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.31431234063251273, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),Track.MediaTypeId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34089444229392596, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.34793499805886546, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.36475449103410224, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.37561291124151386, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.3921345537971341, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),Customer.LastName,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.42157172602722565, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.4311255362655189, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4450461638813045, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4507891862674042, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.06834623994654976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Employee.Country))", "score": -0.22865686970180832, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Employee.Country),Customer.Country))", "score": -0.42673775771982037, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.46126230093068443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Employee.HireDate))", "score": -0.5061798359674867, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5274621717107948, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5438146445376333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))", "score": -0.5870483874750789, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.State),Customer.Country))", "score": -0.6110169611347374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Employee.City))", "score": -0.6203176941198763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jane@chinookcorp.com), Customer.Country),Employee.Country))", "score": -0.621572930685943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Invoice.BillingCountry))", "score": -0.6233445967955049, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Employee.HireDate),Customer.Country))", "score": -0.6499836168659385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.State))", "score": -0.6551977361959871, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Invoice.BillingCountry),Customer.Country))", "score": -0.6583169422519859, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.08799604050946386, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.16963540959395013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.20531601228884622, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2118124562920377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.25562550049867855, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.26662141367252057, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.28344927011546167, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3093558266464167, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,2509409), Artist.Name),Artist.Name))", "score": -0.31984093205736197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3209577963447649, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33975408241673793, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Bytes,>=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34144090407948663, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Bytes,<=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3479373389455108, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35642228300687984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.36474399063752405, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.377475080827935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.41458004508422164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,<,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4300237650077179, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4671287292640045, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,<=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.48609068040059356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.49622660670684127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5085139850179985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5231956446568802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.5333315709631279, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5456189492742851, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,<,2002-05-01 00:00:00), Employee.State),Employee.State))", "score": -0.5487752908866241, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2002-05-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5529041903118923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5610626691977814, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5676950121323898, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees that were hired before May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>,2002-05-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.56892545316623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,None), Track.Name),Track.Name))", "score": -0.22844491403886666, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,None), Track.Name),Track.Bytes))", "score": -0.2555920628500093, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,None), Track.Name),Track.Name))", "score": -0.2662511041823694, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.Quantity))", "score": -0.2743019522548386, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,None), Track.Name),Track.Name))", "score": -0.2860278385212624, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Track.Name),Track.Name))", "score": -0.2875462478718337, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,None), Track.Name),Track.Bytes))", "score": -0.293398252993512, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,None), Track.Name),InvoiceLine.Quantity))", "score": -0.2982936960199321, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.Quantity))", "score": -0.3156921387813046, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Track.Name),Track.Bytes))", "score": -0.3159838289022173, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,None), Track.Name),Track.Bytes))", "score": -0.3164167884065994, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,None), Track.Name),Track.Composer))", "score": -0.32260300319206353, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,None), Track.Name),Track.Name))", "score": -0.329226806179677, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.Total,>=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.Quantity))", "score": -0.33230408355904667, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Track.Name),Track.Name))", "score": -0.340544608583316, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.1853899706880677, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2039490117038301, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.21478509664797413, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2349797035298235, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.26688354266964215, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))", "score": -0.2736465531363637, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.27779397908800524, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2840841110280367, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))", "score": -0.3038381022824049, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3130951204364405, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.33264249690760644, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.345886630797165, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3489152237241573, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice),Album.Title))", "score": -0.3537816613900747, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3609180551625694, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.13280523522371368, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.2160447831320198, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.28617288126224594, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.UnitPrice),Track.Composer))", "score": -0.434703002223614, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.UnitPrice))", "score": -0.4348859801011713, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.47482701734844196, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Battlestar Galactica),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.47965166833148515, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Battlestar Galactica), Track.UnitPrice),Track.Composer))", "score": -0.5179425501319201, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Battlestar Galactica), Track.Composer),Track.UnitPrice))", "score": -0.5181255280094774, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.5251848991096945, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.5316537804323551, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.5349102912291247, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.5354188637467948, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Milliseconds))", "score": -0.5535918488221796, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingPostalCode,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.5538462395834358, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.23758643083474942, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.2748153867441818, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.30024677482105816, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.LastName),Customer.Address))", "score": -0.3189729499491767, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.LastName))", "score": -0.3240051302178783, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),InvoiceLine.Quantity))", "score": -0.33993684134261776, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3418318903817894, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3429304062389282, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3443043216630094, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.LastName))", "score": -0.3552483222817167, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3622623632419301, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3637931971743835, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.State))", "score": -0.365138535431161, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.3683617943158045, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.36973570973988573, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11288056081083589, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.15935860402871044, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.17771585229434786, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19471685566545632, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.2013075817937026, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.20590608830870294, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2104161875375903, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21382522371897908, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22039202148817894, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22885018093309853, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23417791783335537, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.25545629182505714, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2989529338068426, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.MediaTypeId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.30350872962100234, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.40565374296195333, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.17279903616872616, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.2412242072459776, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Employee.HireDate))", "score": -0.31335382934776135, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.3817790004250128, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.4193628209468443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Track.UnitPrice))", "score": -0.4557961600658018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4572321551677305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.4860520905640442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Invoice.InvoiceDate))", "score": -0.48778799202409573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.49799182478454895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Track.UnitPrice))", "score": -0.5242213311430532, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.5544772616412956, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.5664169958618004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.City),Employee.BirthDate))", "score": -0.5929984229442198, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.5946634144347627, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25862943610088457, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2729641377614005, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2739364010119218, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3137411506926281, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31822591727090394, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),getData(Invoice),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32758825094630006, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3313534944875344, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.332560601913731, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33565638723174274, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3368004075947536, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33744020131867875, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33771148735775036, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3519115708636275, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36111013652753055, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3749680614503139, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.17418129311866673, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.20107012739998067, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.20625587943399204, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.23770218477929453, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24475144311618943, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.25531571227178834, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,6.94),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25653962450526696, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2780886963134154, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,6.94),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2789342138838706, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,6.94),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2901896014138696, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.290734309309858, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.2941742063783263, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,6.94),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2958427937254716, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)", "score": -0.29670448980132685, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks with a total invoice of 6.94?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,6.94),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.29995612835058416, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Album),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.28277982568166693, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2990468102449862, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Track.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3166484612992692, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33588233561118813, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.338374298961147, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Album.AlbumId,Track.GenreId),Track.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3390678556018313, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.349401658638661, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3527686445827366, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3587390425406891, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.36491573436047875, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.37467176146372844, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.37931007998206834, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.389066107085318, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3905200707402894, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Album),Track.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3972123840043766, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766), Playlist.Name),Playlist.Name))", "score": -0.15081613785113376, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15980316937163835, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,205766), Playlist.Name),Playlist.Name))", "score": -0.16224982163596857, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,205766),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1655437131785498, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,205766),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2303577817793667, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.26936517944683996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,205766), Playlist.Name),MediaType.Name))", "score": -0.300623770123069, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766), Playlist.Name),MediaType.Name))", "score": -0.31333485825639334, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,205766),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.3142784128446958, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3147192050505312, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,205766),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),MediaType.Name))", "score": -0.3253620251877784, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,205766), Playlist.Name),Playlist.Name))", "score": -0.33047406874625823, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,205766), Playlist.Name),Playlist.Name))", "score": -0.3311341589147151, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,205766),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33879705552637546, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766), Playlist.Name),Playlist.Name))", "score": -0.3709888312480228, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.10014251674690156, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.1332801102214633, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.15157647372467994, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.19633020222166317, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.19739425926819693, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20390218276499686, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.21752114916496668, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.22675442025661288, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.22738512927575072, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.23851654263139843, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.24360223566982775, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25189555903021627, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.2523734185768391, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.26101602444468824, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which different genres do the tracks in the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2765246487939803, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.05159078236101777, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2857167690563074, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3648965626525751, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4639798372554651, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.4802209527733794, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Employee.Country))", "score": -0.5297381670716277, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6033038618406863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6619155078697077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.699125376300799, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.714346939468669, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7157206207084528, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.7173915298226348, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7480711879361479, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Employee.HireDate))", "score": -0.7484612257721892, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Customer.Country),Invoice.BillingCountry))", "score": -0.7587068998291215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1719917447908788, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1876369861682668, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19425331321910527, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2032976655020932, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.21531125843028753, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.23183248529862288, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2363659420097082, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2364307356902734, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.26225728215619337, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.27682241997899015, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),Track.UnitPrice)", "score": -0.2953903523443736, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.TrackId),Track.UnitPrice)", "score": -0.31893504876959305, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.32718183704133597, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3699628894110707, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3729339050688027, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Customer.Fax))", "score": -0.41861116376821883, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Customer.PostalCode))", "score": -0.4361433782905806, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.PostalCode,=,21000), Invoice.BillingCountry),Customer.Fax))", "score": -0.46502517399494536, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.PostalCode,=,21000), Invoice.BillingCountry),Customer.PostalCode))", "score": -0.4825573885173071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.PostalCode,=,21000), Invoice.BillingCountry),Customer.Fax))", "score": -0.5138140791386832, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.PostalCode,=,21000), Invoice.BillingCountry),Customer.PostalCode))", "score": -0.5313462936610449, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,21000), Customer.Fax),Customer.Fax))", "score": -0.5342040085524786, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Customer.Fax))", "score": -0.55131571230595, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,21000), Customer.Fax),Customer.PostalCode))", "score": -0.5517362230748404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.559009949240135, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Customer.PostalCode))", "score": -0.5688479268283118, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5692581334442366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.PostalCode,=,21000), Customer.Fax),Customer.Fax))", "score": -0.5806180187792052, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Customer.Fax))", "score": -0.5927586430043448, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,21000), Invoice.BillingCountry),Customer.Fax))", "score": -0.5977297225326765, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.028826128735090606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.3675565738667501, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.500243457077886, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.Phone))", "score": -0.5374826412153197, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.LastName))", "score": -0.5442087869596435, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.Country))", "score": -0.5982585172605468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.6386593897332205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.LastName),Employee.FirstName))", "score": -0.6436977778066648, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Phone),Employee.FirstName))", "score": -0.6476391349424375, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.6589008702867432, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.Fax))", "score": -0.6890219669294311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Country),Employee.FirstName))", "score": -0.7192908917058958, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.7305192072381033, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.7397348601807607, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which is the first name of the employee whose email address is margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Fax),Employee.FirstName))", "score": -0.7686721478094114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.3047521408912374, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.3057726484921549, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.33477803224232794, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.3549321706776151, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.3592044738332083, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.36022498143412574, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.3608847217506715, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Customer.PostalCode),Customer.PostalCode))", "score": -0.36522616550515435, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.37810981924486864, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.37816158048737714, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3899727231008209, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3909932307017383, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.40507069517572936, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Customer.PostalCode))", "score": -0.40828355015136486, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.41349426515451015, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.18882709382834126, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.21061661744461196, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22099801848567324, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22654535799485437, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23294827412452965, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.23360287102304314, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.24183012682492117, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.24301742704504783, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.24935392558030536, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Canada),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2580613537624123, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.25817157862286594, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2674410324470733, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27702101454528616, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.29020949638837773, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.30583755956404857, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))", "score": -0.03712690708198352, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Album.Title))", "score": -0.47507047879480524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Employee.Email))", "score": -0.5323791824557702, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Album.Title),Customer.Email))", "score": -0.5561661551982979, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Almeida), Customer.Email),Customer.Email))", "score": -0.5859241235812078, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Employee.Email),Customer.Email))", "score": -0.6163663695842843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Almeida), Customer.Email),Customer.Email))", "score": -0.6423492498506675, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Almeida), Customer.Email),Customer.Email))", "score": -0.674233085643209, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Almeida),merge(getData(Invoice),getData(Track),Invoice.CustomerId,Customer.CustomerId),Album.AlbumId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.6847369359172024, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Company),Customer.Email))", "score": -0.6965679954082589, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Almeida),merge(getData(Invoice),getData(Track),Invoice.CustomerId,MediaType.MediaTypeId),Album.AlbumId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.7101659372552226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Almeida),getData(Customer),Artist.ArtistId,Invoice.CustomerId),getData(Track),Invoice.CustomerId,Customer.Email), Customer.Email),Customer.Email))", "score": -0.7105924550503986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Almeida),merge(getData(Invoice),getData(Track),Invoice.CustomerId,Album.AlbumId),Album.AlbumId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.7188406359748862, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Almeida),merge(getData(Invoice),getData(Track),Track.MediaTypeId,Customer.CustomerId),Album.AlbumId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.7219008006751831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}, {"orig_question": "Which is the email of a customer who's last name is Almeida", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Almeida),getData(Customer),Artist.ArtistId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.Email), Customer.Email),Customer.Email))", "score": -0.7266084053201032, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Almeida), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.17631616618018597, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.2638264092383906, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.36205705057363957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.3917738440213725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.4296562297968194, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.4495672936318442, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.47966526669068626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5122395398793742, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.517166472855024, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5239352332908362, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5257619944797863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.5602589471964166, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5775147284148261, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5815472247777507, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Bytes,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5827883722959086, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Company))", "score": -0.13627785193239106, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.17975204186950577, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.3871496369174565, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Company))", "score": -0.4081135478845681, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Country))", "score": -0.425694267549261, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Company))", "score": -0.4515877378216828, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Company),Customer.Company))", "score": -0.4668325235179509, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Country))", "score": -0.4691684574863757, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.City))", "score": -0.5226805613419856, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Company),Customer.Company))", "score": -0.5343969513705815, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.Company),Customer.Company))", "score": -0.5567054797938908, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.City))", "score": -0.5661547512791003, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Customer.Company))", "score": -0.5942879405847634, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,None), Customer.Company),Customer.Company))", "score": -0.6059835006526555, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.Company))", "score": -0.6377621305218781, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.2474084214299742, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.27844444993144607, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.290253189938604, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.29357476869478666, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.30393443922470387, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3164960094455675, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Invoice.Total)", "score": -0.33264682419828895, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Invoice.Total)", "score": -0.34031522118058233, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.34672081043617775, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3486334672254908, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.Bytes)", "score": -0.35969241790634, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Invoice.Total)", "score": -0.3622837678948305, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3673050911857691, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3697809767934065, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Invoice.Total)", "score": -0.3701533891197522, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.18256426059764455, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.25796816437177333, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.262807239219716, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2842967007983322, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.ArtistId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.2911492981626988, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2912679639390352, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2949167513850253, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3056879352379361, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.3072568748387006, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3105235483805951, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3110689861047201, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.3235544027015903, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3304270596525242, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3326380962462281, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.35912493273826396, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.05431253942634996, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.3771101633888663, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.38702948784439906, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>,11998470),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.39081081114545596, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>,11998470),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.396166018122931, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.4021377925547788, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.40861053231685884, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.4274619889314178, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.43393472869349786, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>,11998470),merge(filter(getData(InvoiceLine),Track.Bytes,>,11998470),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4360477103901688, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.4405126129611001, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.45043193741663284, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11998470),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4704787455340721, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<,11998470), Track.TrackId),Track.Milliseconds)", "score": -0.5118060461154487, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks which are larger than 11998470 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>,11998470),filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,>,11998470),Track.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.5176548258982525, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,11998470), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26291414528866586, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Alternative & Punk), Genre.Name),Genre.Name))", "score": -0.2933369127557456, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29744150879964176, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.31702714808314636, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3252544624400882, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Alternative & Punk), Track.Name),Genre.Name))", "score": -0.3299430631038189, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3375007641288941, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36402189218143977, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3691774824853721, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative & Punk),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3716291904829277, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.38200680634194484, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3831114799024837, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.38924147587232866, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.39490396784586096, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.39601773219783154, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.011294342388361104, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6812900230215746, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.859985979678793, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.8978363672037294, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), MediaType.Name),Album.Title))", "score": -0.903923861675139, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.9109674270240842, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),MediaType.Name))", "score": -0.9657779283704456, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Name),Album.Title))", "score": -1.0081860944555956, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Track.Name,=,None), Track.Name),Album.Title))", "score": -1.0106505701776065, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Track.Name,=,None), MediaType.Name),Album.Title))", "score": -1.0229070943909013, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.034003058032824, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Name,=,None), Track.Name),Album.Title))", "score": -1.061631921326298, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.LastName))", "score": -1.0753768795772911, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.1042269191401743, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.Email))", "score": -1.1354804444751376, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.12470208131253457, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.1921952890652392, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3200465368527148, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4446607448467887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4456967246296873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4696049280870863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.47064090786998486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.48673539126210846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.48777137104500706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.49295368217167096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4939896398038609, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.49626598529994226, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5116795412763431, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5253974914300794, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Customer.State))", "score": -0.5389552092164058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22862692092894576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26151056503294967, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3024180672073271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.35990674709319137, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3927903911971953, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39395232414244674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4336978933715727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48941875909804367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4970020792388823, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5022869995736983, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5179642281436827, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5223024032020476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5252321200096048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,2009-10-07 00:00:00), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5351706133806147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5508478512638249, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.19355273889562835, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.20391544289758778, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.22872713331165223, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.23802966510429682, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.23925194948987832, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.24839236910625626, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.25559084921310055, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.2865497748005251, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.28959519504466225, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.30091573555957335, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.31654196720591987, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.32948081663228124, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.3349200903898604, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.34000563281050733, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.366515885337051, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),Track.UnitPrice)", "score": -0.30609737079368265, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),Track.UnitPrice)", "score": -0.328082670242733, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),Track.UnitPrice)", "score": -0.3386931990608048, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.3641358183317927, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),Track.UnitPrice)", "score": -0.3676676966719526, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3678570169345333, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.36918584645610775, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.37543494446176295, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),Track.UnitPrice)", "score": -0.3797989572470327, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.38496530954853786, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.38612111778084307, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.38670104203282357, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3911711459051581, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3928454095474759, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Whats the total unit price sold to customers with the email hholy@gmail.com and Argentina as billing country?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Argentina), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3974202439108134, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Email,=,hholy@gmail.com),Invoice.BillingCountry,=,Argentina),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.13348611139416755, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Invoice.BillingAddress),Genre.Name))", "score": -0.2769065938091696, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3147042182421382, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3176339134035264, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.32975726482058476, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.PostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3317866246972895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.34678425641032606, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.PostalCode,=,94040-111),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3497311310959695, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.35174897374311126, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3526128792188411, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3758082167528242, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,94040-111), Genre.Name),Genre.Name))", "score": -0.38058327135175957, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Invoice.BillingAddress))", "score": -0.38076684673404865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.PostalCode,=,94040-111),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.38257711390831317, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,94040-111),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.416883432395787, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.13686265408978215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.36404864165083484, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3648097754409046, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3657205461281339, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3664816799182037, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3674035070835089, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.39563030002918687, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.InvoiceDate),Customer.City))", "score": -0.412215620130155, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.4149054568369028, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.42231171753696967, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.43195320837185136, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.4386557522576407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.44032759858932957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.44994191681092655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.4619369654355978, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.2610871650932665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.27150031791084367, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2840075956458989, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.316644114913644, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3217927101625586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.33121327641989196, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.33909070201577696, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3411943810598496, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.Quantity),MediaType.Name))", "score": -0.3439434476326268, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.35160753387742677, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.35178889681239744, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35418678208714216, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.35435660045020395, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3544757558206635, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.3584902041138403, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.045629624317371054, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.2179555148286454, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.38124744598098914, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.6238801330728165, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.6468283079375396, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.661921882925526, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,12504234),filter(getData(Track),Track.UnitPrice,<,12504234),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7087707489692415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.7138194889230363, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.7579342368226207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12504234),getData(Track),Track.TrackId,Track.Bytes),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7630280142010872, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,12504234),filter(getData(Track),Track.UnitPrice,<,12504234),Track.TrackId,Track.UnitPrice), Track.UnitPrice),Track.UnitPrice))", "score": -0.7787171479753258, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,12504234),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,12504234),Track.TrackId,Track.Bytes), Track.UnitPrice),Track.UnitPrice))", "score": -0.7796509204316106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12504234),getData(Track),Track.TrackId,Track.Bytes),getData(Track),Track.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7807578578313925, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,12504234),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,12504234),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7847431552071744, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices for tracks with less than 12504234 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,12504234), Track.UnitPrice),Track.UnitPrice))", "score": -0.8342477734368003, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,12504234), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.20043018559135817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.2900803248039665, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.43159172282035607, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.43740378523892204, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4478499539611641, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Track.UnitPrice))", "score": -0.45452568033852003, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Track.UnitPrice),Track.UnitPrice))", "score": -0.4780954430452766, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.48683207928595384, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4888077807322767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4906696773990693, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4918981089026512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4926441417045198, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4946198431508427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4974163203015837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much were the individual invoices made from countries other than Czech Republic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Czech Republic), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.5017239065307861, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Czech Republic), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.3778447206278865, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.3796835484153692, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Artist.Name))", "score": -0.3949822100076899, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Artist.Name))", "score": -0.39682103779517264, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4334657474733203, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.43648207654474425, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.43832090433222703, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.44930713894134494, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.45115405173748196, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.4532534590121142, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Artist.Name))", "score": -0.45361956592454766, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.45509245846758895, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Artist.Name))", "score": -0.45545839371203045, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.45882752791359743, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.UnitPrice),Album.Title))", "score": -0.4594683708310734, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.GenreId),Genre.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.3127056516917319, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.GenreId),Genre.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.3302614575909297, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.34031183986475555, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3497563521858852, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.AlbumId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.35387676726918166, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.GenreId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3570678504410812, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.GenreId),Genre.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.35899603059233726, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Protected AAC audio file),getData(Track),InvoiceLine.TrackId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.37143452839298424, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3738034878149633, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.37401850152718474, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.GenreId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3769945709868629, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.39121449730455715, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3963986115946899, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.40349056952857404, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.4347335927327072, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.09475708507997306, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.17006241128666072, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.22321276875209328, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2246654978890179, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2257092478733584, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2429125550078846, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2837879011634327, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.29117358387355813, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3021919088102348, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Fax),Customer.PostalCode))", "score": -0.33526770025813407, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.361289615705817, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.36522199501611335, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3683072833367699, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3706183375824268, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3732971106101624, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.19075312277423875, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.1914959815054938, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.20384866013393957, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.21502417552923037, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.24563637893420737, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.24688586792382747, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2586828620192257, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.2688163289847742, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.2788523794558626, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2813379808167539, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.2900278765768188, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.33875578250858024, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.34121816849562236, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Playlist.Name))", "score": -0.35343736769892997, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "how many playlist with the name grunge does exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,Grunge), Playlist.Name),Playlist.Name))", "score": -0.36432162352724295, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.2529095049412389, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26435386227522156, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.26801197909132113, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Album),Track.AlbumId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2867493814898232, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.29038053702085737, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29082965818832546, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29120820917680923, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.2999924997034434, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3072068529815202, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.31330679677464013, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3149057193337881, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Nega Gizza), Track.TrackId),InvoiceLine.Quantity)", "score": -0.32171315327171845, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Nega Gizza), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3284394251896475, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34112158534389336, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34386872970861476, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2022435487381503, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.24117047350829904, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2505970445707444, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2522795959155925, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.25896690369506387, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.263946600831707, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2658858532823675, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26875938130209487, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.26907462635281687, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2718103804299506, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.27308347407465566, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2760932550098235, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.27681501671810116, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2843339773004273, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2857668850383595, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.08338806952451705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.FirstName))", "score": -0.21403941686367034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.LastName))", "score": -0.2662246058425808, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.LastName))", "score": -0.3968759531817341, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.4986789032875293, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.LastName))", "score": -0.5174812709398505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.5704398032939935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Title),Employee.FirstName))", "score": -0.638134794189682, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.FirstName))", "score": -0.6750368182865761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.6811954852855706, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Email),Employee.FirstName))", "score": -0.6901833581468964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.6938391859388974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.Email))", "score": -0.6942752281865978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T5K 2N1), Employee.LastName),Employee.FirstName))", "score": -0.7010911506331468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Album.ArtistId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.7018516571138362, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.2873438663518755, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.32144440633419435, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.42618431039954363, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,I'm Losing You),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.4309105989306081, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,I'm Losing You),Track.Milliseconds),Track.Composer))", "score": -0.4430047537852236, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,I'm Losing You),Track.Milliseconds),Track.Composer))", "score": -0.4521897843512439, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,I'm Losing You),Track.Milliseconds),Track.Composer))", "score": -0.45824671399356265, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,I'm Losing You),Track.Milliseconds),Track.Composer))", "score": -0.467431744559583, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Album.Title,=,I'm Losing You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.5140323563124893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,I'm Losing You), Track.Milliseconds),Track.Composer))", "score": -0.5161246165371267, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,I'm Losing You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.5163040243138891, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,I'm Losing You), Track.Composer),Track.Composer))", "score": -0.5180504314339487, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,I'm Losing You), Track.Milliseconds),Track.Composer))", "score": -0.5190379495744812, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Album.Title,=,I'm Losing You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Composer))", "score": -0.5313682612187204, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track I'm Losing You?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,I'm Losing You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Composer))", "score": -0.5336397066054983, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,I'm Losing You), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.09057737719558645, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.3048976717545884, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Employee.Title))", "score": -0.3856704367353814, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Artist.Name))", "score": -0.4298980964376824, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.4406153319432633, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.45040268283628393, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Title),Employee.PostalCode))", "score": -0.46629263665818144, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.5404101751773851, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.5739070532872574, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Edmonton), Employee.PostalCode),Employee.Title))", "score": -0.5999907312943833, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6069070233061211, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Employee.Fax))", "score": -0.6187697781278985, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.6204460023000138, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.6219534764095442, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.6313808320119279, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.31635557413526033, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3200438344030186, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.33316949150057723, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.3441562059167049, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.34784446618446313, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.36893865408115434, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3726269143489126, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3766069202404698, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3857525707438256, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.3940030333144959, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3944918612012916, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.39673928586259893, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.4004275421486983, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4053238962430777, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4078244304795802, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14843242138477164, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.197653468926803, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.20028917700850088, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20580837843258676, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2134480735468084, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.21366256678633602, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21437686651719154, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21564875087381283, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21998333055313377, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24314688060945616, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24662678217634157, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.24859766302643843, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.24939910883677907, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.25795291091147504, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the total quantity of sold tracks with the media type Purchased AAC audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2687810591624449, "correct_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.10529334275248554, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.18286129407978288, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1887956734902053, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.19478735120066862, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2061893794398021, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24187097988027267, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.25644233291230906, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28752279733746966, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2923265293960509, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.29654979422068206, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3129122482856127, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3280314610814292, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3497074120376598, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35195608799610195, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.36217220062757455, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17287889733546546, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17753554200548372, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.2092113906374017, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22363443449913611, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22981733377712732, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.230246718276388, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.23316387101836053, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.23422556372715625, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23869619417568957, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.24603790940619794, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24661038215235426, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.2478024456124197, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24789543775871029, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24924107586496516, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total)", "score": -0.2535168466492318, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.15498262714121222, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.18075756870530313, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.18568982263670777, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3122477709448943, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3359628494255303, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.3365683253491585, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.38674726196602704, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3896303982028578, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.40769402331335813, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4186859676905253, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.42156910392735597, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.45323516108070677, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.47502415642270845, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4781205955729467, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.47980266975254443, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.16149166332149623, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.17513101718868343, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22093196401817292, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.24069182553534524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.2744337369250125, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,!=,Robert Johnson),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2756301537763142, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.27757448982460803, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.28367834403699604, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2888871354711201, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.2929528678960714, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.292987971824837, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2936155671703127, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2940138436953487, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.2986348336651063, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.30219745617995264, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.13966542205610177, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.19690783789460603, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.20101457390009844, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21378225211023438, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.22323072646739253, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22569126759602162, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2351375971178532, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.23862704620687272, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2426071182054493, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24402884380125547, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2483278649782046, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.Quantity,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.24883202478251273, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2619561532947436, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.26717176104980767, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2815854230874258, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.24242837204215115, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.2436342947505552, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.245471407102421, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.26584258181979104, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.2697404196306367, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.27405251634612987, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,On-The-Go 1),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2880646706021417, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.29018453694403934, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.29322751887591453, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.3016050625223818, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.31008056576195603, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3171401389436129, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.328038760952079, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.33012436065679057, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33151453657282454, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3054097718690333, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.30808499693850266, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.33357145110847924, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3523987810629109, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.3624238291810681, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.36509905425053746, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.3764953787576208, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3767706923302799, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.37837624708564976, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.37944591739974926, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.38067360991748156, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.38070032535585524, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.38259424589972696, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Invoice.BillingState,=,WI),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.38266821747551366, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCity),Invoice.BillingState))", "score": -0.38334883498695094, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.07084727741047696, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.34141978462866973, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.5379591829114361, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.5485031098360196, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -0.6506600994076703, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Address,=,None), Customer.Country),Customer.Country))", "score": -0.6557984000974102, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Country),Customer.Country))", "score": -0.6692565328412456, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.Country))", "score": -0.7022176629834576, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Country))", "score": -0.7330245524596349, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.7448645915177727, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.798495951602042, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Address))", "score": -0.822595895492864, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.8345017748247385, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.8487155373249818, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Address))", "score": -0.8663814275496406, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.036063809235201916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Phone))", "score": -0.4463272311804758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.515401862849103, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Title))", "score": -0.5321206965563761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.State))", "score": -0.5439877429125772, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.State),Employee.Address))", "score": -0.5542692721901403, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Phone),Employee.Address))", "score": -0.5711509169159399, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Invoice.BillingAddress))", "score": -0.5731730380175577, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.577165867023723, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Country),Employee.Address))", "score": -0.6003121317444311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6296816020585538, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Title),Employee.Address))", "score": -0.6343127668915258, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Invoice.BillingAddress),Employee.Address))", "score": -0.6491210640488134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6494865047825442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.657418750513898, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.02646364858810557, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.UnitPrice),Album.Title))", "score": -0.481832051933452, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Name),Album.Title))", "score": -0.5028704649812425, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5198395534462179, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5432423486417974, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5770191791700335, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.57850310222191, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5880073665761074, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Artist.Name),Album.Title))", "score": -0.6027702040082659, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Composer),Album.Title))", "score": -0.6286332554227556, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Customer.LastName),Album.Title))", "score": -0.6569553560620989, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6727362090008041, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6983881088672206, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7321717288000484, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Customer.PostalCode),Album.Title))", "score": -0.7458568162328447, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.07631760824733647, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.19555652130657109, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.33461774874740513, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.37179805327468785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.597631613970745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6136768430471325, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.6191825064670411, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.6284945368606714, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6450617745488124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.Phone))", "score": -0.6680332812320557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6776228830058244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.7283538727861014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.7302900104623404, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.7384214195262757, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.747733449919906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33375071024056524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,3.98), Invoice.InvoiceId),Invoice.Total)", "score": -0.3499760722833275, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,3.98), Invoice.InvoiceId),Invoice.BillingCountry))", "score": -0.36249052023049444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3930550248223881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3979849595343694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,3.98), Invoice.InvoiceId),Invoice.BillingCountry))", "score": -0.4267247695242986, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,3.98), Invoice.InvoiceId),Invoice.Total)", "score": -0.44583810139828634, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5040843405622581, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,3.98), Invoice.InvoiceId),Invoice.BillingCountry))", "score": -0.5048733309704403, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.510402676067315, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,3.98), Invoice.InvoiceId),Invoice.BillingCountry))", "score": -0.5391424860572442, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,3.98),Invoice.InvoiceDate,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5526821839810934, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5530779988366703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,3.98), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5746369253611192, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which countries had a invoice total of less than 3.98 sent to their country?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,3.98), Invoice.Total),Invoice.BillingCountry))", "score": -0.5770606700098142, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.98), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))", "score": -0.02435749852884328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,India), Customer.Fax),Customer.Fax))", "score": -0.4939434434272698, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Employee.Fax))", "score": -0.5254482388481847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))", "score": -0.5611667157791089, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.Fax))", "score": -0.5645354240186862, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Employee.Fax),Customer.Fax))", "score": -0.5723889320142916, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.PostalCode))", "score": -0.6044736266121618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,India), Customer.Fax),Customer.Fax))", "score": -0.6996031011440209, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7008235658504418, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Phone))", "score": -0.7103010177597753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7233026827670983, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Country))", "score": -0.7236501336083165, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Artist.Name),Customer.Fax))", "score": -0.763946875835245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,India), Customer.Fax),Customer.Fax))", "score": -0.7685209941337234, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Country),Customer.Fax))", "score": -0.7738278358228854, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Employee.Country))", "score": -0.1944632273662137, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Employee.Country))", "score": -0.21771046188951004, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))", "score": -0.2344906073558377, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Customer.Country))", "score": -0.25773784187913407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Employee.Country))", "score": -0.4408286590623902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Employee.Country))", "score": -0.46407589358568657, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))", "score": -0.48085603905201424, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Customer.Country))", "score": -0.5041032735753106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Employee.Country))", "score": -0.5191214936348842, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Employee.Country))", "score": -0.5423687281581806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))", "score": -0.5591488736245083, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Employee.HireDate))", "score": -0.5733663630235242, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Customer.Country))", "score": -0.5823961081478046, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Invoice.BillingCountry),Employee.Country))", "score": -0.5960084464895772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}, {"orig_question": "In which country lives the customer with the email ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.Country),Employee.HireDate))", "score": -0.5966135975468205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.08680605584231671, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.31483496421424206, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Bytes))", "score": -0.39278626696614083, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.42019958489981946, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.Name))", "score": -0.4907504410803085, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Milliseconds))", "score": -0.49268818156269845, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Album.Title))", "score": -0.5019438292220002, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.5554892584623303, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.TrackId))", "score": -0.5617596234515077, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.5793637751921779, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Composer))", "score": -0.581143232746399, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Milliseconds),Track.Name))", "score": -0.6011511774122482, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.6084165391801617, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Bytes))", "score": -0.6208151753380662, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.UnitPrice))", "score": -0.6324401225283509, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.12157765748008907, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1266563997695434, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.13051347950043246, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.16094972179694952, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.16516544392578064, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17685008217149067, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18066165173896848, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18269386039778174, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20007918133674504, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21529346753154016, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.23047042818930044, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23072984737569074, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23475840924480668, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23588730208707256, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.2714466967192554, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,!=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.23188917518999533, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.26452072409299265, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.2679407948088351, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.30124849383086927, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.3054661179896803, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3076038740270834, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3186912440889992, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3242205084199907, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,!=,Milton Nascimento Ao Vivo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.3274431886176921, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.32811384670181143, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.335043673731099, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.33655517079092107, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.344466736948742, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.34958340525454656, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.3578704312720739, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.06407969715291983, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.LastName),Customer.FirstName))", "score": -0.4313160869314743, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.43913751039872295, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.45284262942368514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.45656720446640975, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Employee.FirstName))", "score": -0.4660690472483111, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.4703610603719426, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Employee.LastName))", "score": -0.47713298062080867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.LastName))", "score": -0.5390825019239855, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Employee.LastName),Customer.FirstName))", "score": -0.5755590590670181, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.6171554647880577, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.6194534962087346, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.6240080514944566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.Fax))", "score": -0.6373958931326342, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Fax),Customer.FirstName))", "score": -0.6483595761492325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-02-02 00:00:00),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.21085509485013654, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.2474929558368809, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.25365297930736086, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.25600023231030133, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.HireDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.2584588718562139, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.2621602557807813, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.27108066069094017, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.2795879371643606, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.3278692981503544, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>=,2009-02-02 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.355232314146827, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.HireDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3633029426908623, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3671069375581424, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,<,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3732669804104924, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2009-02-02 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.37446635923930355, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3906946617940717, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.21052527926349285, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.3292814543046916, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.3431686212816203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Customer.PostalCode))", "score": -0.3468331148424113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Album.Title))", "score": -0.42197596035384777, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.42946126065635326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.44420983209693077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Customer.PostalCode))", "score": -0.46558928988361004, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,20040-020), Invoice.BillingCity),Customer.PostalCode))", "score": -0.47947645686053875, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Customer.City),Customer.City))", "score": -0.503159760827657, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.538058539251324, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Album.Title))", "score": -0.5407321353950465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.548217435697552, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,20040-020), Invoice.BillingCity),Album.Title))", "score": -0.5546193023719752, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,20040-020), Customer.City),Customer.City))", "score": -0.6426335118119901, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.03179308610560838, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.PostalCode),Customer.Fax))", "score": -0.3513188234210247, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.PostalCode))", "score": -0.44877693547459785, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5643205160886282, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5656436199933523, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Country),Customer.Fax))", "score": -0.6031595340609783, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Employee.Fax))", "score": -0.6372881282732124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Company),Customer.Fax))", "score": -0.6712591520190472, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6714258904248709, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.LastName),Customer.Fax))", "score": -0.6995698085665936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Country))", "score": -0.7098803271219367, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.7368697638303274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.7492741835303605, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Employee.Fax),Customer.Fax))", "score": -0.7585782876849407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Address),Customer.Fax))", "score": -0.7612392774462933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.05838008639693726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.22152121779799927, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.5043946005898761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.Country),Employee.City))", "score": -0.5458184503513621, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.HireDate))", "score": -0.5526140429574298, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.Country))", "score": -0.5606535174447345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.HireDate),Employee.City))", "score": -0.5607182704407023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.5972456433373736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.6675357319909381, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Customer.City))", "score": -0.6930025913316058, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.7060830094414996, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.BirthDate))", "score": -0.7061403491097735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.Country),Employee.City))", "score": -0.7089595817524241, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.HireDate))", "score": -0.7157551743584918, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.Country))", "score": -0.7237946488457965, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Name),Track.Name))", "score": -0.12046939628453401, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Milliseconds),Track.Name))", "score": -0.25766952084632067, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Name),Track.Milliseconds))", "score": -0.3516221803638473, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,11774865), Track.Name),Track.Name))", "score": -0.4152030454042688, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Composer),Track.Name))", "score": -0.41844171034426836, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Name),Track.UnitPrice))", "score": -0.45587785663337854, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,11774865), Track.Name),Track.Name))", "score": -0.46269386755557207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Name),Track.Composer))", "score": -0.4746509355518356, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Milliseconds),Track.Milliseconds))", "score": -0.48882230492563394, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Name),Track.Bytes))", "score": -0.5056663018676772, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,11774865), Track.Milliseconds),Track.Name))", "score": -0.5524031699660554, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,11774865), Track.Name),Track.Name))", "score": -0.5655749415072933, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.UnitPrice),Track.Name))", "score": -0.5734460924777522, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Milliseconds),Track.UnitPrice))", "score": -0.5930779811951652, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,11774865), Track.Milliseconds),Track.Name))", "score": -0.5998939921173587, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))", "score": -0.1018512773734983, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Title))", "score": -0.24944608690566383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Track.UnitPrice))", "score": -0.3432024646026548, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Track.UnitPrice),Employee.Title))", "score": -0.3707750964385923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.BirthDate),Employee.Title))", "score": -0.4187678623420652, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.PostalCode))", "score": -0.46929758074111305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.Title))", "score": -0.48744242670363747, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Track.UnitPrice))", "score": -0.4907972741348203, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Canada), Employee.Title),Employee.Title))", "score": -0.5806522339989897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Track.TrackId),Employee.Title))", "score": -0.5917782414180692, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Title))", "score": -0.6120854246837553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Track.UnitPrice),Track.UnitPrice))", "score": -0.6121262836677488, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.PostalCode))", "score": -0.6168923902732786, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.BirthDate))", "score": -0.6355065930110868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Track.TrackId))", "score": -0.6417282450420316, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.04264618984598201, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Customer.Fax))", "score": -0.3762170296831755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Customer.Fax),Employee.Fax))", "score": -0.4262281718401937, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.PostalCode),Employee.Fax))", "score": -0.49547258640814107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.5037216601631371, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.PostalCode))", "score": -0.562974117390695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Artist.Name),Employee.Fax))", "score": -0.5853913488535909, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.618227034501615, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Artist.Name))", "score": -0.6315443736239104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Phone))", "score": -0.6323230487032561, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6386620501434663, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6394148167892126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6574051675124792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Country),Employee.Fax))", "score": -0.6968684258608846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Country))", "score": -0.7086773139162688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14562355536678454, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.15236398184488945, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Album.Title),Album.Title))", "score": -0.24290262253237893, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.24603690366803252, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25828088918441966, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2595858573688546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova), Album.Title),Album.Title))", "score": -0.26161514378996525, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2833798519935242, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.29321813839780114, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.2955959149386046, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.29834351871971887, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2984966325576208, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30055387439171843, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3076511880081097, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles contain tracks in the genre \"Bossa Nova\" ? ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Album.Title),Album.Title))", "score": -0.3187497043219407, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.12605526830218738, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.13211376647209347, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.13963687760382637, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14029389626448258, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.19311449875535183, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.27801029483300316, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Comedy),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.3067236544061321, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.33973419290236423, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Comedy),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3444121788163527, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3541985303413229, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3583667905535887, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(filter(getData(Track),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.3604046735279603, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Genre.Name,=,Comedy), Album.Title),Album.Title))", "score": -0.36353450779832913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3904180228658786, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums containing a track in the genre \"Comedy\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3908909629178208, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Comedy), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))", "score": -0.1649050881896983, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Customer.City))", "score": -0.20304908061370952, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.City),Employee.City))", "score": -0.2419195381735335, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.City),Customer.City))", "score": -0.28006353059754474, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.HireDate),Employee.City))", "score": -0.5428235830549966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Customer.City),Employee.City))", "score": -0.5479651393179665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.HireDate))", "score": -0.5786932727132807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.HireDate),Customer.City))", "score": -0.5809675754790078, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Customer.City),Customer.City))", "score": -0.5861091317419778, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Invoice.InvoiceDate))", "score": -0.6095493158136378, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.BirthDate))", "score": -0.6142474731241236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.HireDate),Employee.City))", "score": -0.6198380330388318, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Customer.City),Employee.City))", "score": -0.6249795893018018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.City),Employee.HireDate))", "score": -0.655707722697116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}, {"orig_question": "From which different cities are the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.HireDate),Customer.City))", "score": -0.657982025462843, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2130612372311906, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.23143493600178647, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30982942461926727, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3134862717625415, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.3282031233898631, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.33185997053313737, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3345187458590252, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3563917389819803, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Track.Composer,!=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38240744467752974, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38851294981357914, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3937322177396114, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4014410241029581, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.4068866741042156, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4085647271154081, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,<,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41033254650498024, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.22515194523675344, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2556787909225602, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2617277113919941, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.28690838366689697, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.29385755314560563, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3104813466157357, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.31743522935270374, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3328164458975371, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.33936095812580636, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3473419896205156, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3486339479126369, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.35687247518165477, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3633433007989141, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3735513853713056, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3779133785876909, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1328814642816843, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17103570675227553, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.19746993243293842, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1983103260440397, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,NV), MediaType.Name),MediaType.Name))", "score": -0.21099089224894882, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.Quantity,=,NV), MediaType.Name),MediaType.Name))", "score": -0.24072807972139873, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,NV),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24608903489774683, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2555422006517914, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,NV), MediaType.Name),MediaType.Name))", "score": -0.2604232502613457, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26878768751453924, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.2742633251092725, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,NV), MediaType.Name),MediaType.Name))", "score": -0.27506603652254863, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27542322335384184, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,NV), MediaType.Name),MediaType.Name))", "score": -0.27646440763144686, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2779908729775177, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.02198418380242039, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5651645259204088, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.63382737419097, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6341137385522926, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.6649267271893663, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.678772932108693, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.695314523341741, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7164403956597304, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7694903209933847, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8086229987757997, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.813759842295433, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8183813866820885, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.GenreId), Album.Title),Album.Title))", "score": -0.8493977268313025, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.9043783012239146, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.9348720275977294, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2405677255912067, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2500125326403879, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2672407858350007, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2906692238346268, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3133243699463324, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31949589152074337, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3215657203975294, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3273499052248515, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3400517588574645, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3428608989699001, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3480269377959772, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34925029804071445, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35540197423508957, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38109846282067567, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3883876367709106, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19493252836120445, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.TrackId),Track.UnitPrice)", "score": -0.20190011406457326, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.21545826590624362, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),Track.UnitPrice)", "score": -0.21631161483211062, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.23432396758038276, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.23961081340157955, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2538137361084314, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.25935913231251445, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26472750416179347, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2777068569575018, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.28637871458795977, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3101307104733113, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),Track.UnitPrice)", "score": -0.31523590764964765, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3217273246122949, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.TrackId),Track.UnitPrice)", "score": -0.32482229238352617, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Customer),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.3833839764395167, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.39499204182840164, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.3979948571790076, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.39804662806133057, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.39823447622057206, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.40123726580750296, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.4040413123051617, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(getData(Album),getData(Customer),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4050533739838317, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.41074194338336023, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Invoice.CustomerId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.4175866766495313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Invoice.CustomerId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.42058948075780633, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Employee.Country))", "score": -0.42196202933038346, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.43029967324536655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.4332992654194864, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44299493627131353, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.18855950768455096, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22334171995149055, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24540033697787472, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2563305952969406, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2627908435864078, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28339856412686054, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2925317487442336, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3018778504032144, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31101103502058747, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3313060303789988, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3422362886980646, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3455521822664415, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3590467998341565, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3594813088898173, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36346333924282886, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.301232147057631, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.31712445221869934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.33174701104944837, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.342273366457106, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.34404665679003715, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.34763931621051664, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.360854864001137, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3613377252712433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.36311105635762414, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.36401199427415265, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3742911283241028, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40089974699876146, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40421590297604304, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4064966871171882, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4143360197534755, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.04589999787943341, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.39961769211367937, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.45682336914615007, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.5501003784234227, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5655423487807251, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6346565884036109, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),getData(Artist),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6453465045645996, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6522840785931915, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6675119543358672, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7037847636357637, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7564513651268499, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Album.Title))", "score": -0.7805873868169886, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.800140422878981, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.8120474783318059, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "is there a datapoint without an artist name?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.830513259293643, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.3387343676331511, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.36987242265968234, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.4595390276554099, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Invoice.Total),Employee.State))", "score": -0.47688160254983814, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Invoice.Total),Employee.HireDate))", "score": -0.493480542445468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Employee.State))", "score": -0.5080196575763694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Employee.HireDate))", "score": -0.5246185974719992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.529360176766204, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.545850910350919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Invoice.Total),Employee.BirthDate))", "score": -0.5726713927033416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.6352429639610141, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2011-03-28 00:00:00), Employee.HireDate),Invoice.Total)", "score": -0.6388907748273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.6695383643296697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>=,2011-03-28 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.6697639303683403, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total of the invoices made after 2011-03-28 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Employee.HireDate),Invoice.Total)", "score": -0.6731861751959556, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-28 00:00:00), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.2494462573213807, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.25211665293012797, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2521633457179041, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26533604800866617, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2680390531496951, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2744419394015391, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.28189156143796124, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.2932972208532086, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2965671296594152, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.30185884443921207, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.30300550189389636, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.303616357933571, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.3064458010383822, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Customer),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31525564202459244, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Customer),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3179585831936384, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))", "score": -0.050342760011517385, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Name),Track.Milliseconds))", "score": -0.32533115796741185, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))", "score": -0.3395708566158646, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Milliseconds),Track.Name))", "score": -0.4020668994262451, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Composer),Track.Milliseconds))", "score": -0.5617053275555008, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))", "score": -0.5677075152843827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cidade Negra),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6133186855384024, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Milliseconds),Track.Bytes))", "score": -0.6144616137817138, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Cidade Negra), Track.Name),Track.Milliseconds))", "score": -0.6145592545717591, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))", "score": -0.6315572028606766, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))", "score": -0.6498884325474137, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Bytes),Track.Milliseconds))", "score": -0.6676500802486771, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.Name),Track.Name))", "score": -0.6770552973821395, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Cidade Negra), Track.TrackId),Track.Milliseconds))", "score": -0.679521179720723, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of tracks by Cidade Negra?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))", "score": -0.6897028451412552, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cidade Negra), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.22137981500266118, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2542911618057554, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2707882952408129, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2758279945686446, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2790989446545042, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3059493388871942, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Warsaw),getData(Track),Invoice.InvoiceId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3141013202867236, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.31444483451379446, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Warsaw),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3165451394296708, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31901804433911674, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Customer.City,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.324937317302616, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Warsaw),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33361975623806495, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.343615901534253, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3454244094317467, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.348340736291488, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.4337052958892706, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,+91 0124 39883988),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,7727B 41 Ave), Invoice.BillingCountry),Customer.Phone))", "score": -0.4341881209059938, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.43575242051585833, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,7727B 41 Ave),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,+91 0124 39883988), Customer.Phone),Customer.Phone))", "score": -0.43633899492922834, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,+91 0124 39883988),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,+91 0124 39883988), Invoice.BillingCountry),Customer.Phone))", "score": -0.44012239727493035, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,7727B 41 Ave),getData(Invoice),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.4422732712981649, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Employee.EmployeeId),Employee.Country,!=,7727B 41 Ave),Employee.Title,!=,+91 0124 39883988), Employee.Country),Customer.Phone))", "score": -0.4452244264417922, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,+91 0124 39883988), Invoice.BillingCountry),Customer.Phone))", "score": -0.4487687881138807, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,+91 0124 39883988), Invoice.BillingCountry),Customer.Phone))", "score": -0.45081588393553884, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,7727B 41 Ave),Employee.Title,!=,7727B 41 Ave), Employee.Country),Customer.Phone))", "score": -0.45695852617115473, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(filter(getData(Customer),Customer.Country,=,7727B 41 Ave),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.4630183881802948, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(filter(getData(Customer),Customer.Country,=,+91 0124 39883988),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.4666811876878837, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(filter(getData(Customer),Customer.Country,=,7727B 41 Ave),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.4706141275054208, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,!=,7727B 41 Ave),merge(filter(getData(Customer),Customer.Country,=,7727B 41 Ave),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.47427699746248253, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,+91 0124 39883988),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,7727B 41 Ave), Customer.Phone),Customer.Phone))", "score": -0.4997336119129196, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2394830351946812, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2530622157759458, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2770563848046141, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.28685640499928367, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2906355653858787, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.3081897285911875, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.31010278725587703, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.31325443694791316, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.31778893664901686, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.32131253439571295, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3268336737408325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.33494950923615197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.GenreId), Album.Title),Album.Title))", "score": -0.33665360072164946, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.34612702395980427, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.3603526356203511, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Country))", "score": -0.20299466020878754, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.State))", "score": -0.25677427716073, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Country),Employee.Country))", "score": -0.33596117254289243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.Country))", "score": -0.38563438198980293, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.State))", "score": -0.4394139989417454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Address))", "score": -0.5186126536827942, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.Country))", "score": -0.5388569428723713, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Address),Employee.Country))", "score": -0.5525630309384724, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.BirthDate))", "score": -0.571107716034021, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.FirstName))", "score": -0.581688941190805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.HireDate))", "score": -0.589158744285669, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.State))", "score": -0.5926365598243137, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Title))", "score": -0.5934367186528107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Address),Employee.State))", "score": -0.6063426478904148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.Country),Employee.Country))", "score": -0.6150444193881413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,293041),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18019447497182864, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041), Playlist.Name),Playlist.Name))", "score": -0.18237971607101822, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041), Playlist.Name),Playlist.Name))", "score": -0.19938775038823822, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.21616828995856074, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.2433765100956404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,293041),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24351212720307625, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,293041),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2575452114767129, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2620182799744368, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,293041),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.278290545586847, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,293041),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2874926316771974, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2986115164593718, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041), Playlist.Name),Playlist.Name))", "score": -0.300615533078678, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(getData(Track),Track.Milliseconds,>=,293041),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041), Playlist.Name),Playlist.Name))", "score": -0.3122772924531287, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.31739607763291, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041), Playlist.Name),Playlist.Name))", "score": -0.3281902361961676, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01412673115275379, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5290178469202887, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5452748819217486, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5532853954585902, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6154302760610766, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6778731029044138, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6809064118680891, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7964647812264632, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,None), Album.Title),Album.Title))", "score": -0.8071198846887566, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.8393986034831509, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8455619031399108, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8777778585633444, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.889431659161346, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9126937776950439, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9188570663364342, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.23307562735600884, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.31232595497895904, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.3709358867890842, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.39926497007794465, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.41110798685622285, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.41114265005505424, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Employee.State,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.45622917978835176, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.45878370820355485, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.46554776995253633, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.48475751994919847, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.4989558082706935, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.505719870019675, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Milliseconds),Track.Bytes))", "score": -0.5086710595082405, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.5249296200163371, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,On-The-Go 1), Track.Bytes),Employee.BirthDate))", "score": -0.5326683182902343, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.12026499837917994, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17374960609891338, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.1986502558106364, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.2086373273448315, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.26369456806940506, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3020126900559282, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Album.Title),Album.Title))", "score": -0.3118831388359438, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.333053079482715, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file), Album.Title),Album.Title))", "score": -0.3357745841206409, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3541490402626073, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.36020956739467036, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Track.Bytes),Album.Title))", "score": -0.385259394647316, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3933414734031529, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.4047434952911506, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.4263608650649761, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.23451753509032208, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.25852131885551094, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.27058755071230295, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2718128570321056, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2853487627647064, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2875001104702761, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2883790032977485, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.30287519978070937, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3123827870629374, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.32432530721196434, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Track.Name))", "score": -0.3284602121943359, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.32967025636384917, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3466136892917359, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3478389956115386, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Track.Name))", "score": -0.3524639959595247, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.19638213929283665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.BirthDate))", "score": -0.3174586039458518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.32026127394783543, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Title))", "score": -0.3421439271842246, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Country))", "score": -0.35559697863209294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.City))", "score": -0.41679968353855656, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.44133773860085057, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.46322039183723973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Email))", "score": -0.47072284337627934, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.4794761132870917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Title))", "score": -0.4883531522427802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.5013587665234809, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.Title))", "score": -0.5398417305623298, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.City))", "score": -0.5406788181935553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.City))", "score": -0.5625614714299445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(getData(Invoice),Track.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.1654313607932486, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.27005746998932184, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.28288694108016793, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.3282969874869557, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.3468371449755137, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.3715954154871131, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.37187717740173454, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.3731257334773013, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(getData(Invoice),Track.UnitPrice,>,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.38760884500780096, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.39041733489029257, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.39166589096585935, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(getData(Invoice),Track.UnitPrice,!=,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.39831976978047196, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.41132990173231, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.41670590666227586, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases of records cheaper than 0.99?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.42415937282315613, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1279451177204616, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Pop),Track.UnitPrice),Album.Title))", "score": -0.13128733465019973, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.15452382930679728, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Pop),Track.UnitPrice),Album.Title))", "score": -0.20882857806988328, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),Track.UnitPrice),Album.Title))", "score": -0.22184935066564784, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Pop),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.25167581354453117, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,!=,Pop),Track.UnitPrice),Album.Title))", "score": -0.26729843049779867, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2777628608850707, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Pop),Track.Bytes),Album.Title))", "score": -0.3474063741607457, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Pop),Track.UnitPrice),Album.Title))", "score": -0.3478083595136942, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,=,Pop),Track.UnitPrice),Album.Title))", "score": -0.3578604465132467, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Pop),Track.UnitPrice),Album.Title))", "score": -0.3646751139651166, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Invoice.BillingAddress,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.38703611639363744, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.GenreId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.39109943453573737, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What albums contain the most expensive tracks of the pop genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingAddress,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3917066269921908, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Pop),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.03186468106468965, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.26683930192848493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.4677101734723692, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.5705523752403678, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.6257063213433867, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.651030248745883, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Poland), Invoice.Total),Invoice.Total))", "score": -0.716266049146725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.7260171901007197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.7915183964814787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.8070223537069978, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.8341832820024138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.CustomerId,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.8566349211778288, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),InvoiceLine.Quantity))", "score": -0.8820772532071715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.BillingState))", "score": -0.9032123449887877, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals that were signed in Poland?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))", "score": -0.9080610504188371, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Poland), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.39230454886359856, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Album),Track.Name,=,Sci Fi & Fantasy),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4146430642177202, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.41568882160949056, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.41683734885232465, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.4221219408761426, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.4289201309834116, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.45230440372930353, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Album),Track.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.4600689093125335, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.46127108589995713, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.46769510122535735, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.4690161296174851, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.4733029056049976, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.47430067623235034, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.4792331819254437, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.484655473829534, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.18241610546793974, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.19771435619683703, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.21672611599914743, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.2234236287759817, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Rush),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.22791061904663662, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22918171661415093, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.23139307392260586, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,<,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.24053166252186017, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25074945406359583, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Rush),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2517538937913393, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Rush),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2525787702225715, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.26007336067910525, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Rush),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2615275028481519, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2703213371487417, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the total sum of unit prices for the tracks in album produced by Rush?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Rush), Track.TrackId),Track.UnitPrice)", "score": -0.2722119793935552, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Rush),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.04821013774065414, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.45996241810519234, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.5742458080805699, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.7348269693679429, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.FirstName))", "score": -0.7374903722518261, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.7685156670935366, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Employee), Customer.FirstName),Customer.FirstName))", "score": -0.7985015593112312, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.LastName))", "score": -0.8426126585156082, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.8547695834955437, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Artist.ArtistId))", "score": -0.859953597182829, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.8826540939961934, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Genre.GenreId))", "score": -0.892795104659536, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), MediaType.Name),Customer.FirstName))", "score": -0.9572363613926771, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),MediaType.Name))", "score": -0.9852174021028132, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.9859980884451081, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))", "score": -0.0393918889494671, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))", "score": -0.3769401430072321, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))", "score": -0.4439032792033686, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.FirstName))", "score": -0.4444964078174962, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))", "score": -0.5034208415927424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))", "score": -0.5397019504489435, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.FirstName),Employee.LastName))", "score": -0.5762778713287844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Track.Name))", "score": -0.5983481553303136, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Track.TrackId),Employee.LastName))", "score": -0.6163860752167238, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.Title))", "score": -0.6297333386646642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.Email),Employee.LastName))", "score": -0.6312260820450319, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.Title),Employee.LastName))", "score": -0.6774237348618044, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))", "score": -0.6858933090152277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.Email))", "score": -0.7035840895878209, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that don't live at 825 8 Ave SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Track.Milliseconds))", "score": -0.7443578389393224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,825 8 Ave SW), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1970-05-29 00:00:00), Employee.HireDate),Employee.Country))", "score": -0.2616990877504577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1970-05-29 00:00:00), Employee.Country),Employee.Country))", "score": -0.27222049964620965, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,541 Del Medio Avenue), Employee.HireDate),Employee.Country))", "score": -0.4187595246548881, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,1970-05-29 00:00:00), Employee.Country),Employee.Country))", "score": -0.42928093655064004, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,541 Del Medio Avenue), Employee.BirthDate),Employee.Country))", "score": -0.4293735547180404, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1970-05-29 00:00:00), Employee.HireDate),Employee.HireDate))", "score": -0.43559075130178826, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,541 Del Medio Avenue), Employee.Country),Employee.HireDate))", "score": -0.4461121631975402, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,541 Del Medio Avenue), Employee.State),Employee.Country))", "score": -0.5286532564277877, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,<,541 Del Medio Avenue), Employee.HireDate),Employee.Country))", "score": -0.5678589398230542, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,<,541 Del Medio Avenue), Employee.Country),Employee.Country))", "score": -0.5783803517188062, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,541 Del Medio Avenue), Employee.City),Employee.Country))", "score": -0.5825558824653854, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,1970-05-29 00:00:00), Employee.BirthDate),Employee.Country))", "score": -0.5864339916224708, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,541 Del Medio Avenue), Employee.HireDate),Employee.HireDate))", "score": -0.5926511882062186, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,<=,1970-05-29 00:00:00), Employee.HireDate),Employee.Country))", "score": -0.5970690304602613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}, {"orig_question": "Which country does the employee born before 1970-05-29 00:00:00 that works with the customer with the address 541 Del Medio Avenue come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,1970-05-29 00:00:00), Employee.Country),Employee.HireDate))", "score": -0.6031726001019706, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,541 Del Medio Avenue),filter(getData(Employee),Employee.BirthDate,<,1970-05-29 00:00:00),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.135425984015724, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.15274252643376343, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.16020674887420602, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2022637013721428, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.22428644308647505, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.22669923345975454, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.23891029821766024, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.3069710263255253, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.32237634559277256, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.33528378295427747, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.34486068613702353, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3786892983718904, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),Track.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3802730879745687, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.39804949162971454, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.41193182766111075, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.1727354598195981, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.19406810744324898, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2306539415920061, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23350716550730638, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2336235158792898, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,Callahan),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2363892457863763, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2387567104703986, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.24402324269493267, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.249727834202473, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.26346039426944634, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Callahan),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26841782943545206, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.26917523416092953, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28358088563557077, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2932691899404512, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29819189503964, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Andrew),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28912209279168993, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Andrew),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30842608247356595, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew), Track.TrackId),Track.UnitPrice)", "score": -0.321858829955144, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew), Track.TrackId),Track.UnitPrice)", "score": -0.3238733001778481, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34266694211630555, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew), Track.TrackId),Invoice.Total)", "score": -0.3458082046421826, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew), Track.TrackId),Invoice.Total)", "score": -0.3476103819957961, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3652403807110764, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3657686662237863, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Andrew),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3659635959526637, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36709586173314496, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3677034979333844, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Andrew),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3677197321106587, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew), Track.TrackId),Track.UnitPrice)", "score": -0.37412582758433266, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Andrew),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3756506184314259, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.09361870540113962, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.35871924241655506, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.41977669080370106, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.6974199107305136, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.761648557982094, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8141440656042891, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8401103169665383, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.856428757761531, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.8859311533549873, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -0.9012964890842445, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.9365147199196061, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.9455446266229087, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9717470734603793, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9724084164813945, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Employee.PostalCode))", "score": -0.9860701581055764, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.18367483443944366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2728066442105046, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2953206298443547, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.379306643972086, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39053806914393074, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4123940803279247, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4164202509018651, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2010-06-30 00:00:00), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.4397528392764798, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4570578832051215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.45875400281875045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.49329772196142585, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.505552060672926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5175505874249211, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5280660463067761, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-06-30 00:00:00), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.5288846490475407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingPostalCode),Artist.Name))", "score": -0.211651672764674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingPostalCode),Album.Title))", "score": -0.28607283268775063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingPostalCode),Artist.Name))", "score": -0.32928668443764764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.3992543119629772, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingPostalCode),Album.Title))", "score": -0.40370784436072427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Australia), Invoice.BillingPostalCode),Artist.Name))", "score": -0.43885228519047814, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Customer.PostalCode),Artist.Name))", "score": -0.4677801627358349, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Artist.Name),Artist.Name))", "score": -0.4707369703492077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.47367547188605386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Employee.PostalCode),Artist.Name))", "score": -0.4956756729325207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Australia), Invoice.BillingPostalCode),Album.Title))", "score": -0.5132734451135548, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingCity),Artist.Name))", "score": -0.5168893236359509, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Customer.PostalCode),Album.Title))", "score": -0.5422013226589115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Artist.Name),Album.Title))", "score": -0.5451581302722843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Customer.LastName),Artist.Name))", "score": -0.5546293157776745, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.09588872092717793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.2604939156299224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.35459088544303086, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.44105219292396214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.4897094891493907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.Email))", "score": -0.5105235521768918, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5191960801457753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.Email),Customer.LastName))", "score": -0.5371852951211622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5398394964190409, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Album.Title))", "score": -0.5441945736383786, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5909154341643443, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5972971842711559, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.6056573876267066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.PostalCode),Customer.LastName))", "score": -0.6092516021890333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.6543146838521352, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01786652102836768, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6114133802296331, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title)", "score": -0.6963608853175112, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7533420267941426, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.7975121677591233, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,!=,None), Album.Title),Album.Title)", "score": -0.8702605172369139, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.AlbumId),Album.Title)", "score": -0.8940190835103601, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title)", "score": -0.9166070160330059, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), InvoiceLine.InvoiceLineId),Album.Title)", "score": -0.9239440872438291, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title)", "score": -0.9450647524063215, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9522209724611049, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,None), Album.Title),Album.Title)", "score": -0.9627705520173425, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title)", "score": -0.9875575047532283, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title)", "score": -1.0024190011349443, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),InvoiceLine.Quantity)", "score": -1.0350263672776052, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21823107374876335, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2279777009269255, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.Total),Invoice.InvoiceDate))", "score": -0.25229470410229604, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Yo-Yo Ma), Invoice.Total),Invoice.InvoiceDate))", "score": -0.2534540056284573, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceId),Invoice.Total)", "score": -0.2664113434443012, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceId),Invoice.Total)", "score": -0.26853583970800454, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2700741270526529, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.Total))", "score": -0.27228132394398674, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27679466295247784, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.Total))", "score": -0.28430649144510195, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.29852240002181707, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceId),Invoice.Total)", "score": -0.29945093357695474, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30408823124796147, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.3059323924661641, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What is the invoice date form the artist named Yo-Yo Ma?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.Total),Invoice.Total))", "score": -0.30634495429751946, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Yo-Yo Ma), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.2646656326189028, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.30838078709709266, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.31363166068922715, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.31529849265424725, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.31779242827280313, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Album.Title))", "score": -0.33649778911169803, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3513809337978999, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Genre),Track.AlbumId,Album.AlbumId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.35167702933651, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.35304776576292, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Genre),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.353563560890124, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.36150758275099293, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3769566077837166, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Album.Title))", "score": -0.3802129435898879, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Album.Title))", "score": -0.38962458476559836, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.435265174463, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.3898246666645282, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.Bytes),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.40450721958639935, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4062902630292383, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.Bytes),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.42097281595110947, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.42366838441730226, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6900619),getData(PlaylistTrack),Track.TrackId,Track.Bytes),getData(Playlist),PlaylistTrack.PlaylistId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.42548505833577344, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.Bytes),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.4383509373391734, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.4401339807820124, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.Bytes),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.4548165337038836, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.Bytes),Track.Bytes,<=,6900619),getData(Track),PlaylistTrack.PlaylistId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.460994340805902, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),Track.GenreId,Genre.GenreId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4614882485118105, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,>=,6900619), Track.Name),Track.Name))", "score": -0.4705055350838919, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,6900619),getData(PlaylistTrack),Track.TrackId,Track.Bytes),getData(Track),PlaylistTrack.PlaylistId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.4722480182494895, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,Track.Bytes),Track.Bytes,<=,6900619),getData(Track),PlaylistTrack.PlaylistId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.4851412646654057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Bytes,<=,6900619),getData(Track),PlaylistTrack.PlaylistId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.486742069798106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.19018538649231423, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22407097081413324, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2408365731471025, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25448477658673274, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26874884696008844, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27472215746892154, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.InvoiceDate))", "score": -0.275698738551201, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.30764802514197553, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))", "score": -0.3145647694641217, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3176756114305506, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.31786077921854683, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.32583758158749165, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32957580820662047, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3415336094637946, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.34468491521678507, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.1879388682674879, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.190974756134076, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.1940374222894451, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.21151501414495008, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2271292284179057, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.24311719409212448, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2781429225704905, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2856204173548754, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.29195596226828713, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2942935368366988, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.29842623658234113, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.30820539589613216, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.UnitPrice)", "score": -0.3142924898796992, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3271527578522946, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.UnitPrice),Track.UnitPrice)", "score": -0.33692419547809493, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1902013556884559, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.21572011756707377, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.23992651131763573, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2581288175864237, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26253721741220076, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.267017468473672, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.272310011230452, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28070639819770965, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28380317611456085, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29188103387836384, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3004591020830954, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3070909231326049, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.313834568318799, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33200375851835906, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.346492058875587, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.2855029693941587, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.2927886743973637, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.29679095565369285, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.3073020712798066, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.31340599774215044, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.31341105291863575, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.3163204406537121, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.31882267381954016, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.3276219901963428, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.3378465194753241, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.35049958886614235, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.35174831728221595, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),InvoiceLine.Quantity))", "score": -0.3615299370843864, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.36180111185216857, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.UnitPrice))", "score": -0.36304992882430404, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.3086722952774811, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.3143985901521855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.34366053128549906, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Audioslave),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.34478104744980675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.3493868261602035, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Audioslave), Track.UnitPrice),Artist.Name))", "score": -0.3609218467723383, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Audioslave),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3628349027858424, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.369890047050948, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.37561634192565246, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Audioslave), Track.UnitPrice),Artist.Name))", "score": -0.38042021184089697, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Audioslave),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.38347348622014027, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Employee.PostalCode),Artist.Name))", "score": -0.39908158769452035, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Audioslave), Track.UnitPrice),Artist.Name))", "score": -0.40086223973771506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Employee.PostalCode),Artist.Name))", "score": -0.40480788256922484, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Audioslave),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.44882691327549545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.11733211381761066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1534239183220052, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.31085255546895496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.48116177125302784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.4860723064321064, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.522164110936501, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5529156307729863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5622525791677617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5941449449437641, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Customer.City),Invoice.InvoiceDate))", "score": -0.6119503019417607, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Norway), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6302367494481587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Norway), Customer.City),Invoice.InvoiceDate))", "score": -0.6480421064461552, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6499863843473577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.6795927480834507, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6803387342060887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.05640474739630008, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.33246628041524673, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.3543096579160192, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.PostalCode))", "score": -0.4937684930409887, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Album.Title))", "score": -0.4998138345326879, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5569982885863283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Employee.LastName),Customer.LastName))", "score": -0.5736925879973569, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Artist.ArtistId))", "score": -0.5781152642812231, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5826402067687013, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.Email))", "score": -0.5935831464375951, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.6235274433638551, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.6248720645453432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Track.Name))", "score": -0.6269010699834325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.6303711909349659, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.FirstName))", "score": -0.6965927876080968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2542954735835341, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.27240804241279903, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2897202298700611, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2947171185496319, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.29507394114546953, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2953366036576034, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.30007082982504035, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3003334923371742, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.30069031493301185, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.30568720960733803, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Robert),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Employee),getData(Invoice),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.30768998043620277, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3198526717474453, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Employee),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3263104156082297, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Robert),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Employee),getData(Invoice),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.3347820928053447, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3379652236627877, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3733427138487233, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2013-01-15 00:00:00),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38036105824734856, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.38288449748089964, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.393621908264102, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Artist.ArtistId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.3959881573224217, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2013-01-15 00:00:00),getData(Track),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4141601480420265, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4182910214109912, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2013-01-15 00:00:00),getData(Track),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42742099805878, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4278328050431676, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42997721947174167, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43034959808414464, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4322384064979073, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.43989138171632103, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.4417801901300836, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4432380096686549, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.06258243925549323, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Title),Employee.Address))", "score": -0.3010534182903939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.Address))", "score": -0.37441344417311484, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Title))", "score": -0.41594325609185034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.HireDate),Employee.Address))", "score": -0.5306517318604165, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Country))", "score": -0.5349540025708848, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.State))", "score": -0.5657940418241196, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.HireDate))", "score": -0.5802180082318955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Fax),Employee.Address))", "score": -0.595631463897007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.617210701086151, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6410758644124144, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6455772667904967, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Title),Employee.Title))", "score": -0.654414235126751, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Phone))", "score": -0.6738802701947861, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.State),Employee.Address))", "score": -0.6807460025665932, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.21544176652505223, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.22484848276496447, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22976712628451476, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.24739079040558826, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2579068577515672, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29668973132717535, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.31356470203311243, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.31590597501589196, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.3220115822959619, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.325004848125502, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33743195980990226, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.34358245051105585, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3440457064829444, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.3534899799194404, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.36261941118291674, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.1789960077792004, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.17981397787568235, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.18812999148604428, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.20446133799170535, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.24047336435566527, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.24991187634645998, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.251778275434591, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25420737137427113, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.2596655586036718, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2786727619991306, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.28488423955049724, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3050512130551784, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.31034006989402935, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.32218656329765777, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3271686037841417, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.11506354985842551, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.11694643485779035, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.1861977719034183, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19447184381598392, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20175625349001464, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.21218177710713085, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21381524956194775, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.21953804936973736, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.22135989640001744, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2288613130259713, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23539362051643664, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2375114318789837, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2401355358795837, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2442937776846526, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2643831386423544, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.30257337468578976, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.31814811922841046, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3438849817522666, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3446851412691957, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.351802493893122, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.35277935845065134, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3671838475780625, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.36926378272198457, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.AlbumId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.37044939144852534, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3752780730608298, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),Track.TrackId,Playlist.PlaylistId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3886221983652667, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.39356762841690507, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),Track.TrackId,Playlist.PlaylistId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3948952358154182, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3998406658670566, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Playlist),Track.TrackId,Track.Bytes), Employee.BirthDate),Track.Bytes)", "score": -0.41706720358319893, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.14990031103157697, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21235846240518516, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<=,13250848),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21675377991968844, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.2590351315997453, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,13250848), Album.Title),Album.Title))", "score": -0.25962069867356824, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))", "score": -0.27121527466492285, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.272199833516437, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,<=,MPEG audio file),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2754968204841351, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3019802063348124, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.30445775573302963, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),Track.Bytes,<,13250848), Album.Title),Album.Title))", "score": -0.3166378987982072, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.32539907669530704, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.3315645821145175, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))", "score": -0.34615513028164885, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.36286564800418614, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.HireDate,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.21753312850219092, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23220970168416397, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2395415567338206, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,2003-05-03 00:00:00),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2421310890804043, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2516082496834706, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2573365662046673, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,2003-05-03 00:00:00),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2599816979832163, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,>=,2003-05-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26018052185172047, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2616979256838846, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,>,2003-05-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2747283249274618, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2777510132502926, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.HireDate,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2778996906761483, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.HireDate,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.28612999767341785, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.29185632170127235, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.HireDate,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3086550932001881, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.17090776394103463, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.17112634959558354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.20154472034925283, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2032151778412441, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22148226501420254, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.24054445855260373, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.24626122990858793, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27857911602123575, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.2805656501041258, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.33343120488662326, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3344841178010254, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3402546362583654, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),Playlist.Name,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3743843828739347, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingState))", "score": -0.3998806304166452, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.State))", "score": -0.40937942134043637, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.24042735923479672, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.Bytes))", "score": -0.2518097755581557, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.UnitPrice)", "score": -0.2903768619200821, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.3426137902616599, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.UnitPrice)", "score": -0.3481711530051123, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.Bytes))", "score": -0.3564378692994776, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),Track.UnitPrice),Track.Bytes))", "score": -0.37477497017705913, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.UnitPrice)", "score": -0.390609359725464, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3989435865768454, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.UnitPrice)", "score": -0.42573636685809607, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.UnitPrice)", "score": -0.433923517909245, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.UnitPrice),Track.Bytes))", "score": -0.4360266307404026, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.44603569699866324, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Employee.BirthDate))", "score": -0.47124491459432427, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music), Track.UnitPrice),Track.UnitPrice)", "score": -0.4722079528823511, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.2043552661961494, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.243674852080059, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.32098163800480184, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.3626636994762409, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.37053043728420243, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37084165885942716, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.3777995107740508, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4039223812061648, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.40529175995871675, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.42320686186912654, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4352497598697352, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.43787337769753754, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.44131453633414186, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,None), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.4507206471026787, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4529639961198438, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2786337691418487, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.29387392542255275, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30508578528743524, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3228399384552242, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3269700698190967, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),getData(Track),Track.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33898361093439794, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34034546816237643, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.34331436305839697, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3515957011850516, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3531620479172609, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),Artist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3555856244430805, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3707078545998858, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3779247464318014, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3798174662946802, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3862724824837, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.08190779032884166, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Company))", "score": -0.30478649417636916, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Company),Customer.Email))", "score": -0.3384231703239493, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Email))", "score": -0.38033858890412375, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.4368171191157149, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,None), Customer.Email),Customer.Email))", "score": -0.44478217157302424, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Company),Customer.Company))", "score": -0.5613018741714768, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.City))", "score": -0.5917530564474873, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Company))", "score": -0.6032172927516513, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Album.Title))", "score": -0.6352614669012837, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Email))", "score": -0.6368539688992314, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,None), Customer.Email),Customer.Company))", "score": -0.6676608754205517, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.6840367710101418, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,None), Customer.Company),Customer.Email))", "score": -0.7012975515681319, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,None), Customer.Email),Customer.Email))", "score": -0.7043616568553261, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.03521370569797, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Country),Customer.State))", "score": -0.3141394691410824, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.Country))", "score": -0.3956999812144204, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Employee.State))", "score": -0.5598516795653268, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.584889513986127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.6328756651710137, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.6344600744414493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Address),Customer.State))", "score": -0.6357449428978725, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Invoice.CustomerId), Customer.State),Customer.State))", "score": -0.6481830774330107, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Country),Customer.Country))", "score": -0.6746257446575328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.Address))", "score": -0.6801473233717843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.CustomerId,Invoice.CustomerId), Customer.State),Customer.State))", "score": -0.6893509137078063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.7156634159255191, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.7195339031386538, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.7368329605887993, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.13051609127021635, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1400348649085306, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.17642387308359228, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.17687507285774745, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.19561008467741195, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1994246421814921, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.21573123467461525, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.28534681084869534, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Milliseconds),Album.Title))", "score": -0.3037777242144554, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.34459393716484954, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3881409538222036, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4009715902644325, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4135024880761253, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.43885162249405213, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4496524526093504, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.LastName),Customer.FirstName))", "score": -0.13377684969600523, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.LastName),Customer.LastName))", "score": -0.15438778568204725, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))", "score": -0.29244107250269735, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.LastName))", "score": -0.3130520084887394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.LastName),Customer.Email))", "score": -0.46225978303846205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.LastName),Artist.ArtistId))", "score": -0.5241614120095619, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.LastName),Employee.LastName))", "score": -0.5256831185906776, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.Email),Customer.FirstName))", "score": -0.5914867544561275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.Email),Customer.LastName))", "score": -0.6120976904421696, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.Email))", "score": -0.6209240058451542, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,120 S Orange Ave), Customer.LastName),Customer.FirstName))", "score": -0.6621434070184478, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,120 S Orange Ave), Customer.LastName),Customer.LastName))", "score": -0.6827543430044898, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Artist.ArtistId))", "score": -0.682825634816254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Employee.LastName))", "score": -0.6843473413973697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the names of customers with the address other than 120 S Orange Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Employee.LastName),Customer.FirstName))", "score": -0.7079646313577541, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,120 S Orange Ave), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.04185060545838802, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5551643196548234, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.6727819912677298, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Employee.Fax))", "score": -0.772903258753725, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.8035098441286698, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.Fax),Customer.Fax))", "score": -0.8576355226861178, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.PostalCode))", "score": -0.9015822318294057, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCountry),Customer.Fax))", "score": -0.9520355545870118, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.9777813753007119, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Customer.Fax),Customer.Fax))", "score": -0.9850429129188758, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Country))", "score": -1.0022368528997718, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Fax))", "score": -1.0360014820040815, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Invoice.CustomerId))", "score": -1.0360926479507828, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Artist.ArtistId))", "score": -1.0810341609381637, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Customer.Fax),Customer.Fax))", "score": -1.0824227303499772, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.12065507284450501, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.187414708329876, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.20755737135831812, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22052708331265494, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22571931237784362, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23453340139870932, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23745218497882337, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2400925610955265, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2418209468337542, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26447265102678363, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2659208645625012, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2687462079961435, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2693298649616948, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2888633667446189, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30440483677991365, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.08593857371306513, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.17094177090621088, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.30301460706687067, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Name),Track.Milliseconds))", "score": -0.5321230929257581, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.563774497146369, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Name))", "score": -0.5674487286160002, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.5904237338254461, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.6142024896362273, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Name),Track.Milliseconds))", "score": -0.6171262901189039, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.Name))", "score": -0.6524519258091459, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.6984166965266922, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.7008541688701371, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8102839), Track.Name),Track.Milliseconds))", "score": -0.7491991262795636, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Bytes),Track.Milliseconds))", "score": -0.7609358768822858, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.774460715791065, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.11526268593297573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.City))", "score": -0.32314042992220493, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Country))", "score": -0.33726006246433826, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Country))", "score": -0.3466356346689281, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.3881290495886414, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Title))", "score": -0.40264742321596714, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Country))", "score": -0.4467986569372818, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.City),Employee.Country))", "score": -0.48454750475234865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.49621413317175317, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Country),Employee.City))", "score": -0.5080648368050525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.5085607291495606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Country),Employee.Title))", "score": -0.5115653398725836, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.515523124384389, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.State,=,AB), Employee.Title),Employee.Country))", "score": -0.5241575294984139, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Which employee title do employees from AB have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Country))", "score": -0.524705172543522, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.12570603932363156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21611865605336789, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27282132203799847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3470543249986804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3632339387677348, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,>,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.45913234348518017, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Spain), Invoice.BillingPostalCode),Track.Composer))", "score": -0.47192915896994236, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4941696077130473, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5202215536974109, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5495449602149165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingPostalCode),Track.Composer))", "score": -0.5623417756996787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5996258779905475, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Track.Composer))", "score": -0.6190444416843093, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Spain), Track.Composer),Invoice.BillingPostalCode))", "score": -0.6236066771216429, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6673368364117778, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.14368857525325596, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.18946596267285618, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.21533184558427063, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.25862835666007344, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.26554359046961423, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Milliseconds)", "score": -0.2714400685854402, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.2817834774215741, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Milliseconds))", "score": -0.2931102979657581, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.29361958047273407, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.2939053812380724, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Milliseconds))", "score": -0.2946077581079762, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.2954632556160189, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.3059679651698592, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Milliseconds))", "score": -0.3436577948853656, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Milliseconds),Track.Name))", "score": -0.3498682982992885, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.22617492817133808, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2351237853751919, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23532728655490343, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.26983480329229076, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Employee.EmployeeId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.2831993321752774, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.30270170263404134, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.3304354658001905, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.33296719631588784, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.33404155772129607, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Employee.Title,=,UB40), Genre.Name),Genre.Name))", "score": -0.34575333660906016, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3586054130693291, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.35880891424904066, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3592767750932625, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.359480276272974, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.3601978965216876, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.13651697701739546, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.14793512209634163, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1756921389454081, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.19551587519348218, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.22861971480855472, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Milliseconds),Album.Title))", "score": -0.2568095077231725, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.279779277232046, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.297104295967556, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3121248911725359, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.Milliseconds),Album.Title))", "score": -0.3204156052055527, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.3275737130265866, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3594755402006667, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3760568562174272, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "count(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.3877640656165494, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the biggest track unit price between tracks from the genre R&B/Soul ?", "inferred_code": "count(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.4015661162743116, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.10252380558189182, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.14388203016968876, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.1539344399967095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1753846297016963, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.1809974112186556, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20256808373040586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20411457702386535, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2316332725499377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23546455493530466, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24822557202663542, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2676876381263011, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.27245727279430243, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.28123229555944645, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2887457119121289, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29417482703858644, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Incognito), Track.TrackId),Track.UnitPrice)", "score": -0.12551500571826085, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito), Track.TrackId),Track.UnitPrice)", "score": -0.1602722392853091, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Incognito),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.23819692832840908, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito), Track.TrackId),Track.UnitPrice)", "score": -0.25305809866396206, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Incognito), Track.TrackId),Track.UnitPrice)", "score": -0.2641064470381799, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito), Track.TrackId),Track.UnitPrice)", "score": -0.28216872295174344, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2895477180205459, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito), Track.UnitPrice),Track.UnitPrice)", "score": -0.29232734631943985, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.30100503465888945, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Incognito), Track.UnitPrice),Track.UnitPrice)", "score": -0.3095080643468653, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3116720914826901, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.31544543505916534, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3448197477918365, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3448240422475525, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of the tracks composed by the artist \"Incognito\" ? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Incognito),merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3605937749631747, "correct_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Incognito),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Playlist.Name,=,MB),Track.Bytes),Employee.Email))", "score": -0.3455869090593833, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Track.Bytes,=,MB),Track.Bytes),Employee.Email))", "score": -0.3499773567178785, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Playlist.Name,=,MB),Employee.BirthDate),Employee.Email))", "score": -0.3756409462433062, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Track.Bytes,=,MB),Employee.BirthDate),Employee.Email))", "score": -0.3800313939018014, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State,=,MB),Employee.State),Employee.Email))", "score": -0.40037187712239464, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Playlist.Name,=,MB),Employee.State),Employee.Email))", "score": -0.4144313824006997, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Track.Bytes,=,MB),Employee.State),Employee.Email))", "score": -0.41882183005919493, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Playlist.Name,=,MB),Track.Bytes),Employee.Email))", "score": -0.4333446143497737, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Track.Bytes,=,MB),Track.Bytes),Employee.Email))", "score": -0.43773506200826895, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,PlaylistTrack.TrackId),Playlist.Name,=,MB),Track.Bytes),Employee.Email))", "score": -0.4439322366472831, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,PlaylistTrack.TrackId),Track.Bytes,=,MB),Track.Bytes),Employee.Email))", "score": -0.4483226843057783, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Track.Bytes,=,MB),Employee.State),Employee.Email))", "score": -0.4519689935690438, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId),Track.Milliseconds,=,MB),Track.Bytes),Employee.Email))", "score": -0.46166325931827684, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Playlist.Name,=,MB),Employee.BirthDate),Employee.Email))", "score": -0.4633986698772523, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}, {"orig_question": "What is the email of the employee who issued the biggest invoice in the state \"MB\" ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State,=,MB),Track.Bytes),Employee.Email))", "score": -0.463539379679475, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,MB),Invoice.Total),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.14071685929023284, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15040557468823, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1528826857133638, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.16120739736294823, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.16940382650682415, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.17732906981305765, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.1955937244359023, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.20385642295626236, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2120317110554831, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.2133131861928267, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21513550013664004, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21793228044700624, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.22278350978602418, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22694096097409452, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all purchases made of tracks that are not on the Classical 101 - Next Steps playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)", "score": -0.23067778587996643, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.2426096921149399, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.27107889629506277, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29121157714432816, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3159879089831209, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3253054433970735, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3255814943884524, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33392725787958016, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.33508436504966244, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3524219343879863, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Invoice.BillingState))", "score": -0.359823018035088, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.Total),Invoice.BillingState))", "score": -0.3614440754245168, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.364519856527165, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Employee.State),Invoice.BillingState))", "score": -0.36618817748477644, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Employee.State))", "score": -0.37125650501336416, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3768732965404061, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.19462579365229926, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19548429228198025, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.21342035541017496, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.2294184596958738, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23165976435475313, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.23230786199017664, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23695286712602037, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24249152514778377, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.24309166767276025, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.2463728773262384, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25659060149115615, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25697781637800393, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.25839457668350835, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2936133704976892, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29517884845387093, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.17976884689590217, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.3590824718319996, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(getData(Track),Employee.Title,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.4761911101324243, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.479348476172968, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.49543315697022444, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.49605296466681487, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.49743167294929197, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.UnitPrice)", "score": -0.49985495457045914, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.5031734234746105, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.5081972782453162, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.5141361298266441, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.5212565794188696, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.5646810276757606, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.Bytes),Track.Bytes))", "score": -0.569781151260031, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,=,On-The-Go 1), Track.TrackId),Track.Bytes)", "score": -0.5749171605852682, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.028860686088395808, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5003510892139168, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6168490500119937, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.7451095264799135, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7959057867192314, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.8957147095196969, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.9436926906710295, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.951696625914521, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.9532422143445249, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.9538159880113269, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Email))", "score": -0.9891437158007327, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.035234929536321, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -1.0519274692997327, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0797138805555957, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -1.081790217533473, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.07046140543752699, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Employee.State))", "score": -0.3599394541197398, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.364594466980634, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.40716791897648363, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Invoice.BillingState))", "score": -0.4293354731016734, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.47288358956211596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Invoice.BillingState),Customer.State))", "score": -0.5254067201130965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.Country),Customer.State))", "score": -0.5441590566151717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.Country))", "score": -0.5553347449713328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5606609056667367, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.Address))", "score": -0.5639566760473826, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.Address),Customer.State))", "score": -0.6061474401467422, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.6523423567377904, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Banco do Brasil S.A.), Customer.State),Employee.State))", "score": -0.6540725156628469, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Employee.State),Customer.State))", "score": -0.6685338336938003, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25724579430224587, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.2631356431346572, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27112123087574935, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.2926117600369306, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2984795331539434, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29976029243043195, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Playlist.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.3100988109310429, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31152484122899876, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.31300025881957505, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.3166215486192831, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31736349905671074, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3204539583030155, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3228833877447056, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3262772580738497, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3301833640815028, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.1939559949804495, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.20807515954185715, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2124348147233841, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2149364774800951, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.24567805294892378, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.24886850786186815, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2501753745426304, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2529424716516649, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2549525153666861, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2611552779770162, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.27138959989432104, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2717566881399775, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2735882383124281, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2756083693673779, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.27732322948896626, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))", "score": -0.23269198243360734, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,1.99), Track.Composer),Track.Composer))", "score": -0.3176922589991591, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,1.99), Track.Composer),Track.Composer))", "score": -0.3250411540720961, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Name))", "score": -0.3984478466663859, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))", "score": -0.45003381653944685, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>,1.99), Track.Composer),Track.Name))", "score": -0.47203638124195735, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,1.99), Track.Composer),Track.Name))", "score": -0.48344812323193764, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,1.99), Track.Composer),Track.Name))", "score": -0.49079701830487465, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Name),Track.Composer))", "score": -0.5209189352099202, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,1.99), Track.Composer),Track.Composer))", "score": -0.5415442372961069, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Milliseconds))", "score": -0.5547670625601313, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Album.ArtistId,Invoice.InvoiceId),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))", "score": -0.5588607774990754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,1.99), Track.Composer),Track.Name))", "score": -0.5635468019986174, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))", "score": -0.5647214142066221, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))", "score": -0.5797737737630377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,One By One), Track.Name),Track.Name))", "score": -0.3072683364714206, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.35267728475718946, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,One By One), Track.Name),Track.Name))", "score": -0.3596019861311219, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.3727263101851189, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,One By One), Track.Name),Track.Name))", "score": -0.38517255832419156, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Name))", "score": -0.39473056742836016, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Name))", "score": -0.3952262116849315, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Track.Name))", "score": -0.42438822100374246, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Track.Name))", "score": -0.4437872655792126, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.44402332006674566, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Track.Name))", "score": -0.4467143968228344, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.44927586148068976, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Track.Name))", "score": -0.45344782818969337, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.4589364240911705, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,One By One),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Track.Name))", "score": -0.46460480828583295, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.29214899785112797, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29742978702799305, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T6G 2C7),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29946143675762743, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.3070366641885605, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.3108146300910351, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3173767365419027, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32961116979409094, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T6G 2C7),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3411805352242553, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.34177849099931096, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3421836541038719, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.34276077784188436, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.3458350362106497, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.3523131023698394, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T6G 2C7),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35493886418036863, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3694768703593835, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.15246064759905265, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17666883509680337, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1848677797400497, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.20125055375178308, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.20311197973332226, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.2212778024303011, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.244180961246406, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2562395589431237, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.34879415874810954, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.3879225560773243, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3893624393964003, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,1.99), Genre.Name),Genre.Name))", "score": -0.39290436814978286, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4014210038670551, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))", "score": -0.4031997038171304, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genre do tracks that do not cost 1.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.40703574805695303, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,!=,1.99), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.12985946765862072, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.14444531051821943, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1750150192580925, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17504847899396278, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17913483433772723, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18099156371527672, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2060985395671182, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20625944450961572, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2208022799430374, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2310778470225823, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2358617523926968, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24286195055304002, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.24340751394591967, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.27452148261422665, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27994982038994953, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09869546056698018, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.14128849841469698, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17653168257704757, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1769230330720367, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.17995741487397948, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.18933887510286468, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.20314875350654915, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2147931344854052, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22116262406609005, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23277025444150623, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.24066460992116262, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2427604459211951, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24489349094814028, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.36412771431494445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.40712561076039666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Helsinki),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1398775961419861, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki), Genre.Name),Genre.Name))", "score": -0.15420520803138768, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Helsinki),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18777446709939857, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki), Genre.Name),Genre.Name))", "score": -0.21072221779282976, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Helsinki), Genre.Name),Genre.Name))", "score": -0.2255399409470221, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2276363118950924, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Helsinki),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2614728668649875, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Helsinki),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2628224259559218, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Helsinki),merge(filter(getData(InvoiceLine),Invoice.BillingCity,!=,Helsinki),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.26487975592948737, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2666268753210306, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.City,!=,Helsinki),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2817432570924506, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,!=,Helsinki),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28200511346460594, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Helsinki), Genre.Name),Genre.Name))", "score": -0.30516009176698156, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),Invoice.BillingCity,!=,Helsinki),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31570499116308126, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used in tracks that were sold to someone living in a city other than Helsinki?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingCity,!=,Helsinki), Genre.Name),Genre.Name))", "score": -0.3320812365661845, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Helsinki),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09823076022532988, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.12435541829313548, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.1303585318823791, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18105977314289556, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.19910655524565113, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.21792596017835617, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2319752748643649, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24781100653979166, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2512960249530429, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25526482898601, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.25729238149697903, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2574039598750143, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2770082215268704, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28623844390914466, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3051655877997618, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.21640793787810253, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Album.Title))", "score": -0.3096782396969502, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Bytes))", "score": -0.3440572600302403, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.3785526340643456, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.39829938294860767, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Album.Title))", "score": -0.40149161554455104, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.40618851741455814, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.41212314497673036, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Album.Title))", "score": -0.4350621264569358, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.44388685152280266, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99), Track.Name),Album.Title))", "score": -0.44856720765600316, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.45207753220605934, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.4581779481195839, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Track.Bytes))", "score": -0.47460369757451815, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Name),Album.Title))", "score": -0.4750165136862648, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.20574401577872087, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2433414489021678, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2622304986457336, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.26998891725181356, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2740063120840051, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2771682986134272, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2849267172195072, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.28608956012545084, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2910671242992977, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3004410475894496, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3007954310983093, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30731149316106443, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3149788689649621, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Album.AlbumId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.33580542836917027, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.33891701464276774, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3519783339349179, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.3557557571293275, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37480679752874957, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.3785842207231592, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3907230657182074, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.392461038268504, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.394500488912617, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.3962384614629136, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4084381049836623, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Denmark),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40868278809788144, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.4122155281780719, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4135515274383173, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.41528949998861386, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.4173288906736286, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Invoice.BillingAddress),Genre.Name))", "score": -0.4190668632239251, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18146081681821602, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.19932699326321732, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21058368222292317, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21799185238414664, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.23750346544925488, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.250916319780318, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.271840421053053, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27197702225900455, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.28769956661970003, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2926445020560088, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2937452051099311, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30494789816000145, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))", "score": -0.31630919983327604, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))", "score": -0.3181041410114606, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3263333530906256, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Album.Title))", "score": -0.31509873594242976, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3282392451314859, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Album.Title))", "score": -0.34065966136344394, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.35380017055250007, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3568452772010621, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -0.3589220435787923, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Album.Title))", "score": -0.3596791414015898, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3599441781229042, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39629382190077267, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Album.ArtistId,Album.AlbumId),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3976644831410148, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40074974225181625, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40212040349205835, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.4241106641865657, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Album.ArtistId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.4254813254268078, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.42856658453760926, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.10561345516233013, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.16638166686459602, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),Track.Bytes),Album.Title))", "score": -0.1992072866696031, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected MPEG-4 video file),Track.Bytes),Album.Title))", "score": -0.20187357246179718, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.21571105829713874, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2692813864504594, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.2797002289088039, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2990591184586201, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3301250235307219, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),Track.Milliseconds),Album.Title))", "score": -0.3377682159335625, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.349772462337386, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3529212922381763, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.MediaTypeId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.36867307225890816, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected MPEG-4 video file),Track.Milliseconds),Album.Title))", "score": -0.38299216206358005, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.38770836353700294, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,!=,WI), Track.TrackId),Track.UnitPrice)", "score": -0.20732478633889329, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.Country,!=,WI), Track.TrackId),Track.UnitPrice)", "score": -0.24317167034196316, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.Country,!=,WI), Track.TrackId),Track.UnitPrice)", "score": -0.2438523807752465, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.27375761388006364, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.28659926138982844, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.2992374329135484, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.3083515641276676, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.316294927688375, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Phone,!=,WI), Track.TrackId),Track.UnitPrice)", "score": -0.32633946251946405, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Country,!=,WI), Track.TrackId),Track.UnitPrice)", "score": -0.3369978947254309, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,!=,WI), Track.TrackId),Track.UnitPrice)", "score": -0.36067448293194215, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.Country,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.36841223715991356, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.3862853280602829, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.State,!=,WI),filter(getData(Invoice),Invoice.BillingState,!=,Budapest),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38676459329500557, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,!=,Budapest), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4010306673963767, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),Track.Name))", "score": -0.3371646303916174, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3735351725121502, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,2113),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),Track.Name))", "score": -0.38263485430870614, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),Track.Name))", "score": -0.398269832199404, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,2113),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),Track.Name))", "score": -0.4026603708018084, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),Track.Name))", "score": -0.4124492583553246, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,2113),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))", "score": -0.41639961597138786, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),Track.Name))", "score": -0.4295283385315101, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,2113),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4309090035133801, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.43464037431993674, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,2113),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))", "score": -0.4403794415301096, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),Track.Milliseconds),Track.Name))", "score": -0.4427453341175068, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),Track.Name))", "score": -0.44797601353156113, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,2113),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.44881980047585734, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}, {"orig_question": "Which tracks are the ones with the highest quantity per invoice billed to the postal code 2113?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,2113),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),Track.Name))", "score": -0.4514756694604904, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2113),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.12080124494917814, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.1464912320675087, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.16690727479874448, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18487827748149807, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.198984294430353, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.20418667027399073, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.21152521999334592, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.21549922558193418, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2301067488755064, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23378702787173714, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.23722100393879395, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23971917610031407, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2603606189202898, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.27042286903821666, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.27959343676462994, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2505243573033806, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,9593064),Album.Title,!=,9593064), Artist.Name),Artist.Name))", "score": -0.25316965143649334, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,9593064), Artist.Name),Artist.Name))", "score": -0.25544884350032504, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2588998617571239, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.26402024614763764, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,9593064),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2794793400423899, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2946579918295168, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,9593064), Artist.Name),Artist.Name))", "score": -0.2950143446838892, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,9593064),Album.Title,=,9593064), Artist.Name),Artist.Name))", "score": -0.3003696215796203, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,9593064),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.32294008553297454, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9593064),Album.Title,!=,9593064), Artist.Name),Artist.Name))", "score": -0.32806940134993695, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9593064), Artist.Name),Artist.Name))", "score": -0.3281645636203607, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9593064),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.33589935601669835, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,9593064), Artist.Name),Artist.Name))", "score": -0.3430332990212715, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What are the names of the artists that composed the track with the minimum unit price, among all the tracks smaller than 9593064 bytes ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,>,9593064), Artist.Name),Artist.Name))", "score": -0.3712568484456085, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,9593064),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.1644302852510009, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.3223058454215978, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.36218073597268186, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4044703306495918, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.40789368883682986, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,PlaylistTrack.PlaylistId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4136158548729816, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.41688033992486223, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,7859167),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.41864440998893787, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.TrackId),Track.Bytes,=,7859167),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4326264414622067, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,7859167), Track.Composer),Invoice.BillingPostalCode))", "score": -0.43575227796911825, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes,=,7859167),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4449175585436814, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,7859167),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.Bytes), Track.Composer),Track.Composer))", "score": -0.4475523252063113, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,7859167),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.45079276594084494, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Invoice.BillingPostalCode))", "score": -0.46751395650790073, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,7859167),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.46874497278245836, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.3738524791842792, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.3943551970993069, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4070806197289806, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),Genre.Name))", "score": -0.4197151712915217, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.4223198110987394, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4350452337284131, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.4410814642116551, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Genre.Name),InvoiceLine.Quantity))", "score": -0.4437933149856214, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),Genre.Name))", "score": -0.4476797852909542, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,162 E Superior Street), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.45080845770293876, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Genre.Name),Invoice.BillingAddress))", "score": -0.4565187376152951, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,162 E Superior Street), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.46353388033261245, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,162 E Superior Street), Genre.Name),Genre.Name))", "score": -0.4691532891778362, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,162 E Superior Street),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5084183691582677, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}, {"orig_question": "Have invoices been sent to the billing address 162 E Superior Street for different media types? ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,162 E Superior Street),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.5124439712979263, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,162 E Superior Street), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.1491101317878929, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.1663394981030471, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.2240777855520511, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.2311007984161489, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.2768360105679703, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.2888390858651529, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.3235603283065556, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.334503484416517, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.3434613111059182, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.3594883483850237, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Employee),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.3653344477512149, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.3812986154786758, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.3866301740350687, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.38832162834277356, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.388749187705532, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14945341282553493, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.15188588481512075, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2628238310665954, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2699384009606146, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.275738316625688, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2768632235016929, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28911395388593125, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29211344201167316, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29590421686472185, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.29979510980267166, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.3017544425541618, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3226167981143168, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.3338488491477752, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Drama), Album.Title),Album.Title))", "score": -0.33390187351412215, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.3402394648053855, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.04143350326376094, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2987886624123348, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40439444349067344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.49028366838501825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5172199354219629, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5229131326723291, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6079527389902069, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6711948168176605, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Track.Composer))", "score": -0.6772693995098962, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6845842007260217, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.7232102405923797, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7476388275335921, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.7526845339398278, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7745750945705367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.780268291820903, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Country),Customer.Address))", "score": -0.3775029385142261, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Country),Customer.Address))", "score": -0.3956798443250591, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Country),Customer.Country))", "score": -0.4048559719376499, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Country),Customer.Country))", "score": -0.42303287774848286, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Company),Customer.Address))", "score": -0.4271257126383716, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Company),Customer.Address))", "score": -0.4453026184492046, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Address),Customer.Address))", "score": -0.4456441754155094, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Company),Customer.Country))", "score": -0.4544787460617954, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Country),Customer.Company))", "score": -0.4592358076624805, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Address),Customer.Address))", "score": -0.46382108122634236, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Company),Customer.Country))", "score": -0.47265565187262837, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Address),Customer.Country))", "score": -0.47299720883893315, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Country),Customer.Company))", "score": -0.4774127134733135, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Country),Customer.State))", "score": -0.48679233134316746, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,None), Customer.Address),Customer.Country))", "score": -0.4911741146497661, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.13681608167826198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Company),Customer.Email))", "score": -0.2734708237403538, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Company))", "score": -0.3245527121180203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.3876464825934582, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Rogers Canada),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.41647577757166554, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4186349582199105, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.42588244486415566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4576956115858678, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Company),Customer.Company))", "score": -0.4612074541801121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4762958894629655, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,=,Rogers Canada), Customer.Company),Customer.Email))", "score": -0.47753655065399875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rogers Canada), Customer.Company),Customer.Email))", "score": -0.48837224273077323, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Company))", "score": -0.488715950846628, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Rogers Canada),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Company))", "score": -0.4922725985863704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.5074055114336278, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.10554884377415874, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23016248646672466, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.32829593497808673, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.41765641051824787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.45290957767065265, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5115034506052325, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.5370074287384341, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5422700532108138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5537886536076257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.566742993923981, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5864655888035486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5873040743499587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5926419413044641, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Track.Composer),Invoice.BillingPostalCode))", "score": -0.6051891036659072, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6361170364871214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.09551322802444144, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.17455856050226562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.17742608576003124, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.222833162738143, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.24718554826341171, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.267365362779271, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2828177070340347, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.30473088372100615, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.32514570124374276, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.3345729519136512, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3546322959371664, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Invoice.BillingAddress))", "score": -0.35836811233037913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.36130301691915584, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,0.99),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.36352418388765934, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.3719384772855281, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.11390039721358128, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17220064546503702, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17843344539422287, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19759144692530142, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21809777907151864, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.23365796343709538, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2486111758776216, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2510149560100478, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2608972278431248, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2622070936293397, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2627650767457861, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26758064419799465, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2684960582953653, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2978159832532962, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29935133683556386, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.2021006743332909, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.22086097748026312, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22668247101373964, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.22990788510886698, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.2307392719882493, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23996997209565898, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26817634896286285, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Artist.ArtistId), Genre.Name),Genre.Name))", "score": -0.2784777099216576, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Artist.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.2786152010874005, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.28510474884058223, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Artist),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2893073498785239, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Artist.ArtistId), Genre.Name),Genre.Name))", "score": -0.29758670453705344, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Artist),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30841634449391975, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.30970509089979786, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.32019026631909614, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.25009219680941897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.2809688929191907, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.28375630413211184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.35572539602435427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.36530308757937746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.45848130022204714, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.5108620968427391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,T1K 5N8), Employee.Country),Employee.City))", "score": -0.5453895680329879, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.5472262385956128, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.5557200159601052, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.5595565170920963, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T1K 5N8), Employee.Country),Employee.City))", "score": -0.5762662641427596, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,T1K 5N8), Employee.Country),Employee.City))", "score": -0.5790536753556808, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.586596712069877, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}, {"orig_question": "What are the different countries having a postal code of T1K 5N8 and an Employee living there?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.5893841232827981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T1K 5N8), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.09482374786057335, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.16608232258477074, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4034475441894756, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.474706118913673, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5054054614029155, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5585165917746053, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5766640361271129, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1), Invoice.BillingCountry),Customer.Country))", "score": -0.6139325881249533, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6378922844178305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6657257433853374, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1), Invoice.BillingCountry),Customer.Country))", "score": -0.6851911628491507, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.7091508591420279, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.7158914590127097, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7163676211384882, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.725817358108543, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.2630817992376251, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.26708344113734234, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.2689519228307212, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,>=,243644), Artist.Name),Artist.Name))", "score": -0.2763224485501813, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,243644),getData(Track),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2994982036869619, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3011803931887605, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3156476559758912, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,>=,243644), Artist.Name),Artist.Name))", "score": -0.32488666338873007, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,243644),getData(Track),Track.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33269375183359823, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3629830587896965, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.TrackId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3636718764090258, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3714001611910694, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.TrackId,Album.AlbumId),InvoiceLine.Quantity,>=,243644), Artist.Name),Artist.Name))", "score": -0.37291089240526437, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.Quantity,>=,243644), Artist.Name),Artist.Name))", "score": -0.3806391771873079, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.Quantity,>=,243644),MediaType.Name,=,243644), Artist.Name),Artist.Name))", "score": -0.44285921761934743, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.0550257696522749, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.40023096676304704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.LastName),Customer.FirstName))", "score": -0.41571923463925486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.LastName))", "score": -0.458873594434408, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Employee.LastName))", "score": -0.46529885593190556, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Employee.FirstName))", "score": -0.48088225188985234, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.48177488918736344, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5596656429333962, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5922165143056191, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.6270945894284523, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.6398449766202248, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.654930673794297, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Employee.LastName),Customer.FirstName))", "score": -0.6580557462511933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Artist.ArtistId))", "score": -0.6625905579639948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.Email))", "score": -0.6649482196880854, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.23642193920900148, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,0.99), Playlist.Name),Employee.FirstName))", "score": -0.2858274468220534, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Track.Name))", "score": -0.29552212576230974, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,0.99), Playlist.Name),Employee.FirstName))", "score": -0.31685728474363656, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.31799786460288393, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3269755649756773, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.33339721489606855, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.3427052727792035, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,0.99), Playlist.Name),Track.Name))", "score": -0.3466034009362479, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Name))", "score": -0.348091062860404, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Track.Name))", "score": -0.3512517754366499, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Name))", "score": -0.3622560222981988, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.36487777771841473, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3674033722159359, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.LastName))", "score": -0.37644627497502625, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.17822161408093962, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.18788901062634977, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.3477863380494455, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.35745373459485563, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.3792235525133947, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.38889094905880484, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.45418225320008787, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.463849649745498, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,0.99), Track.Name),Track.Name))", "score": -0.5052734995069841, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.5487882764819005, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.5584556730273107, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,0.99), Track.Name),Track.Name))", "score": -0.5904101216974595, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Track.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.6551842074650267, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.6648516040104369, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks do have a unit price of at least 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,>=,0.99), Track.Name),Track.Milliseconds))", "score": -0.6816854653689006, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.14868706081870187, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2070801517820655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24222450693014252, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30061759789350617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.47487834830644715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4751706308378863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49237361543300207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5110119989967643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5332714392698108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.54696348595349, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5479092976492504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.548429079250127, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5516690443042107, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5518154115772328, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.604549445108205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.25804003466702746, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.29543236779667786, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(filter(getData(Album),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.322213532452259, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.34469307525716253, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3537872284698426, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Genre.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36021342018762, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3614702342336523, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.Composer,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.36989161165606255, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37349810390908456, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.Composer,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3775746253699397, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3831116064167753, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3887825523456211, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.38950654453479183, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.39887931148125794, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.40656231724506764, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.18952769152019755, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.20288462302778498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.Fax),Customer.PostalCode))", "score": -0.3110579822132422, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.Fax),Customer.PostalCode))", "score": -0.32441491372082965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.Fax))", "score": -0.4597372535536124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.Fax))", "score": -0.4730941850611998, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.City),Customer.PostalCode))", "score": -0.49888366199229495, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.City),Customer.PostalCode))", "score": -0.5122405934998824, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.539320602259977, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Invoice.BillingCity),Customer.PostalCode))", "score": -0.5468271944591834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.5526775337675645, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Invoice.BillingCity),Customer.PostalCode))", "score": -0.5601841259667708, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.Fax),Customer.Fax))", "score": -0.581267544246657, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.Fax),Customer.Fax))", "score": -0.5946244757542445, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.5992056570867135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.2371093625956746, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.InvoiceDate))", "score": -0.32345586966812334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.33688276887001484, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.34708637323319635, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.36326110771407044, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4334328803056451, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceDate),Invoice.Total))", "score": -0.45106130976319037, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.46596986512935573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4947911273540404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.49507495557414705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.49871688629136757, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.526852977997791, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.5323976543495387, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceId),Invoice.Total)", "score": -0.5372871329212857, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5374078168356391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.15860483564079383, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.20364887387401515, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.23256534276897414, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.23985123719368287, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.2909851956717342, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Sci Fi & Fantasy), Invoice.BillingCity),Customer.City))", "score": -0.29307780646220644, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.296137780534148, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.3005455638512694, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.300578806562465, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.30406191526160037, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.31187165764737085, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.3137047313508746, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.3187864778510258, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.GenreId), Invoice.BillingCity),Customer.City))", "score": -0.3202698221297597, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In how many cities do customers live who bought tracks of the genre Sci Fi & Fantasy?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.32950121484636435, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.1658825432307369, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.3773165176899056, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.3833629194089373, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.41673904464551015, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.4422816465885262, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5062182377369027, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.520430060038052, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5598525869936566, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Fax),Artist.Name))", "score": -0.5733646853906609, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Customer.Fax,=,None), Artist.Name),Artist.Name))", "score": -0.5733730624706368, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.5853951963872532, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Fax,=,None), Artist.Name),Artist.Name))", "score": -0.6034833099038224, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.6320493724064843, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.7366457037287664, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -0.7661325372551239, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.1322051028964779, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.16976080492713663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.3066537196991703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.44451780275085184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.4848289902565739, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Customer.Phone),Employee.Phone))", "score": -0.5056875658465287, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Employee.Phone))", "score": -0.5432432678771875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Customer.Phone),Customer.Country))", "score": -0.5527718973589799, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Customer.Country),Customer.Phone))", "score": -0.5694504811672232, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Country))", "score": -0.5903275993896386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Country),Customer.Phone))", "score": -0.6070061831978819, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.6186522956249974, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.62165029004791, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.6385555978176853, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Employee.Phone),Customer.Phone))", "score": -0.6532805993465445, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.12523021928063827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.2631708570479532, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.3510977216719766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.3964158166379358, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.40891284945957124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.42383498715762824, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.44544210411903823, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.46082181958442137, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.47286127463873073, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.47951926670066314, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4882409599237733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4902753870519637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4922176819070483, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.4951439317856539, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.5041024871825357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.38856130270481315, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.3923925547648569, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.402208446764791, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.4146976423705634, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.42856150953117134, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.4321878474654897, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.4579005062533318, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.460675320698678, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.4609054293826522, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.46329708996694335, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.46741199616833495, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.4747692965432602, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble), Track.TrackId),Track.UnitPrice)", "score": -0.4875850900712655, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.4993041684714715, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.5175098154110643, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,!=,Rock),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.20257183443215415, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.22390859582957956, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,!=,Rock),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2705992456591509, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Album.Title,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2869069177928331, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Album),Album.Title,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3151439015051826, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3160035905734014, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,!=,Rock),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32412981772060107, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,Rock),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3285381963777419, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.3293167593729811, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.3361920614699283, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33807611164394474, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.35325760977820453, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.36202014248977515, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.AlbumId),Track.UnitPrice,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.3723587694469319, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,Rock),Track.UnitPrice),Album.Title))", "score": -0.41272716752411426, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.26790300976712234, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.28511525335845045, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Name))", "score": -0.2915454357318105, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.31654151559212373, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.3313371548020859, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.3332297177184016, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.3371263466139791, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.3543385902053072, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Bytes))", "score": -0.3548637144127869, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Bytes))", "score": -0.35968959627162306, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Name))", "score": -0.3607687725786673, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.36860173453731676, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.3691355094509674, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.3733042127351996, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3734276163961529, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24566932538760636, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2654057921604281, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,R.E.M.),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2790295362528579, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28100359606264996, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2868624391337569, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2885898541501137, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2962420313247227, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2991833342065517, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3127754642892017, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3281370676961726, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3292225648160118, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(None),None,None),None,None), None),None))", "score": -0.3300766858130793, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(None),None,None),None,None), None),None))", "score": -0.3374249838488326, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,None), None),None))", "score": -0.3378881409013332, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,None), None),None))", "score": -0.34523629454584237, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.1626497119323176, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.21132876571573433, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Customer.State),Track.Bytes))", "score": -0.3904205806211394, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Track.Bytes))", "score": -0.3946295290843409, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Playlist.Name),Track.Bytes))", "score": -0.4209376223043364, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Customer.State),Track.Bytes))", "score": -0.4390996344045561, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Track.Bytes))", "score": -0.4411826938048762, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Employee.State),Track.Bytes))", "score": -0.45299860310115037, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Playlist.Name),Track.Bytes))", "score": -0.46961667608775315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Invoice.Total),Track.Bytes))", "score": -0.4708782083944243, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Employee.State),Track.Bytes))", "score": -0.5016776568845671, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Invoice.Total),Track.Bytes))", "score": -0.519557262177841, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Employee.State))", "score": -0.6035022850737732, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.6050342147827905, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Customer.State),Track.Bytes))", "score": -0.6224004061550659, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.041563979277270846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Title),Employee.Address))", "score": -0.38024711415346246, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Title))", "score": -0.3805631966533838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Phone))", "score": -0.548760500663775, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.State))", "score": -0.5750881106796442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.5762781770172296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.State),Employee.Address))", "score": -0.5792332570272265, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.FirstName),Employee.Address))", "score": -0.5980311314779101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Invoice.BillingAddress))", "score": -0.5984885961952386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Country),Employee.Address))", "score": -0.6132788340764819, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Track.Milliseconds))", "score": -0.6136544616165338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6325548560562311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6438229353370843, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6449565560760675, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Phone),Employee.Address))", "score": -0.6525418441015063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.0987853904516669, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.15800027300429065, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6900619), Track.Name),Track.Name))", "score": -0.2513746892363997, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.5759369629231514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6900619),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,Track.Bytes), Track.Name),Track.Name))", "score": -0.6151954618052833, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,6900619), Track.Name),Track.Name))", "score": -0.6185046260507079, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Bytes,=,6900619),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,Track.Bytes), Track.Name),Track.Name))", "score": -0.6187557184860047, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.634804555815208, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.6351518454757752, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6900619),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.6361709468796275, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Bytes,=,6900619),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.639731270012475, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6900619),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.Bytes), Track.Name),Track.Name))", "score": -0.6582633160234286, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6900619), Track.Name),Track.Name))", "score": -0.6983733341512561, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,6900619), Track.Name),Track.Name))", "score": -0.7048587029130431, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with a size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Track.Bytes,>=,6900619), Track.Name),Track.Name))", "score": -0.7285262617078843, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Employee.FirstName),Employee.FirstName))", "score": -0.3950388046440177, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Genre.Name),Employee.FirstName))", "score": -0.44644884821792885, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Genre), Employee.FirstName),Employee.FirstName))", "score": -0.5218709935667106, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "done(extractValues(distinct(getData(Genre), Genre.Name),Employee.FirstName))", "score": -0.5332059911287479, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Customer.FirstName),Employee.FirstName))", "score": -0.5570281405749694, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Genre), Genre.Name),Employee.FirstName))", "score": -0.5732810371406218, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "done(extractValues(distinct(getData(Employee), Genre.Name),Employee.FirstName))", "score": -0.5968626413983797, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "done(extractValues(distinct(getData(Genre), Employee.FirstName),Employee.FirstName))", "score": -0.6121352165501301, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.FirstName),Employee.FirstName))", "score": -0.6757918668197621, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Genre), Customer.FirstName),Employee.FirstName))", "score": -0.6838603294976624, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Employee.LastName),Employee.FirstName))", "score": -0.7089789662807235, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Employee.FirstName),Customer.FirstName))", "score": -0.7159142009898715, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Employee.FirstName),Genre.Name))", "score": -0.7173176487912559, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Employee.FirstName),Employee.LastName))", "score": -0.7440581154587043, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Genre.Name),Customer.FirstName))", "score": -0.7673242445637826, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2628818152908181, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Track.TrackId),InvoiceLine.Quantity)", "score": -0.325157791841123, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32750963938443234, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3308680336230169, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33321763944398297, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34939628175930865, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3601888016957856, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36750415648630724, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37122631161040703, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.372801658682268, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3759059288350412, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3762359245098762, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Track.TrackId),InvoiceLine.Quantity)", "score": -0.38335673385160063, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Track.TrackId),InvoiceLine.Quantity)", "score": -0.3897856635721463, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "Howmuch is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3931440101733218, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18006281981263975, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18721973868347308, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21893591321367195, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2333502555558014, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23519401493448716, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2438801235144045, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.24457769982504954, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2491114485550607, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.24945620410811206, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.2778751503943065, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2794820064523094, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2884017950832522, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,!=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28875783803614774, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29260224104453264, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3020448758258761, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.17181566727231257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.28041151535580866, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.31050409373710863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.3405024297244381, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.3493026904470753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.4190999418206047, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))", "score": -0.4578985385305714, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.4791908561892342, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.48799111691187136, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.5025912783748936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Invoice.InvoiceDate))", "score": -0.5179894528992008, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Track.UnitPrice))", "score": -0.5309193320281338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.5362579822249245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Customer.City))", "score": -0.5601476914889645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))", "score": -0.5965869649953675, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.034738747752076304, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.39105940529407235, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.48723611160665425, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.494239291248636, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5208789960517867, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.568079567657584, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5743764121434651, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5746131907174985, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5908434496816918, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5997895322850437, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6210115240662314, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6222469645382328, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.628160144941749, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6541042904917967, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6871590204859559, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.027938671188167064, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.4776178214342508, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.Phone),Employee.Phone))", "score": -0.514253458717576, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.523188880422822, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Phone))", "score": -0.534337572997174, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Phone))", "score": -0.543162994330487, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Customer.Phone))", "score": -0.569281528947613, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.FirstName))", "score": -0.6208253607728693, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6280811005008297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Country))", "score": -0.6408379778840754, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Fax))", "score": -0.645957063195965, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6573600805129982, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.State), Employee.Phone),Employee.Phone))", "score": -0.6711093404608607, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Phone))", "score": -0.6869651603155944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Customer.Phone),Employee.Phone))", "score": -0.7369839476996276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))", "score": -0.09472852499311557, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Milliseconds),Track.Composer))", "score": -0.36176139974122634, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.UnitPrice),Track.Composer))", "score": -0.37996632718568435, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Stay Away), Track.Composer),Track.Composer))", "score": -0.38548414149408927, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.UnitPrice))", "score": -0.40142183584248414, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Stay Away),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.4328489470058476, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Stay Away),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.43409998259375737, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Stay Away),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4562603769510024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Stay Away),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.4581644693960701, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Stay Away),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.49012370696013563, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Genre.Name,=,Stay Away),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.4972613826306069, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Stay Away),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.5012334951790396, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Stay Away),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.5030183533554577, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Milliseconds))", "score": -0.5082021264461218, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Stay Away),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.5093673145135329, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.14100244415505087, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18167667847320293, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2056117519247872, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20955268078573813, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.23432258059234123, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2358679300160269, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.23732545988550954, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2553937061196861, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2681075986973996, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.26840808082333734, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2738576572969628, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2768340580616948, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28238327367055466, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.2836217874111207, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28978149524468017, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.1434846863457881, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16509884550390005, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.17607647916555721, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.19076732203709532, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2032481882584476, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21939171417966852, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2505045258910027, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2600550675830119, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2609075961015185, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2636692270846743, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2656323919179256, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.272965158667742, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2730834698580835, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2785213589637507, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2978634788268323, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.056955448650114704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Employee.Country))", "score": -0.3588196070122649, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.3861325283724, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.39981340367376106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5211092255267431, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5321571727472474, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Employee.Country),Customer.Country))", "score": -0.5561609517972101, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5641095538812806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5707831283289124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Employee.HireDate))", "score": -0.6079672307896544, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Invoice.BillingCountry),Customer.Country))", "score": -0.6128559362332453, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.State),Customer.Country))", "score": -0.6171232115666498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Invoice.BillingCountry))", "score": -0.6411027641224791, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.State))", "score": -0.6458062858509948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6464118858057191, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.Title))", "score": -0.2861338165748748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.Country))", "score": -0.2893997189748916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Title),Employee.Title))", "score": -0.36724117967969505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Title),Employee.Country))", "score": -0.37050708207971184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.BirthDate),Employee.Title))", "score": -0.40558532450086204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.BirthDate),Employee.Country))", "score": -0.40885122690087883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.4490289596069488, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.BirthDate))", "score": -0.4505346474397811, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Country))", "score": -0.45229486200696556, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.City))", "score": -0.49257758829480736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Email),Employee.Title))", "score": -0.515565445755783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Email),Employee.Country))", "score": -0.5188313481557998, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.Email))", "score": -0.5244045910585555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Title),Employee.BirthDate))", "score": -0.5316420105446014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.State))", "score": -0.5474809763181838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.03629000638631878, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.2999031237923191, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.406291464682469, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5113793644655226, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5240820554451003, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5324299070006829, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5667205104926951, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),getData(Track),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5982223593220318, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6153973688836684, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), MediaType.Name),Album.Title))", "score": -0.621968841213404, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6226077586397671, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.6412772440197205, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.Name),Album.Title))", "score": -0.6552462938203146, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6670949213723769, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6697386475875127, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.12669520817829216, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Address),Invoice.BillingAddress))", "score": -0.3695628244895488, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Address),Invoice.BillingAddress))", "score": -0.3748203192371875, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Address),Customer.Address))", "score": -0.4216355730313808, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Address),Customer.Address))", "score": -0.4268930677790195, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4702632575916368, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Invoice.BillingAddress))", "score": -0.48647325692932797, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.FirstName,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5195995636220528, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.FirstName,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Invoice.BillingAddress))", "score": -0.5358094920774764, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Address),InvoiceLine.Quantity))", "score": -0.5450120915193111, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Address),InvoiceLine.Quantity))", "score": -0.5502695862669498, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.5592640252098773, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.5628071373805519, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5754740245475685, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5778761859471101, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.11489350064579167, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.17520108266355766, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.19343483172698403, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(filter(getData(Artist),Artist.Name,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.2154741368635164, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.21576954753100733, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.28006113197407556, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3033997399341379, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),Artist.Name,!=,0.99), Artist.Name),Artist.Name))", "score": -0.30475255771685467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,0.99),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.32235652614433197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,=,0.99),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.3263275220837259, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.32716753265497617, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.32808576792563343, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Employee),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3500860011945599, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35967427039045685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there artist name of an artist having a track that has a unit price which is not 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,0.99),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))", "score": -0.374494763779179, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.07893189355309005, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.33917472358371015, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.3521237069326162, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Employee.Phone),Customer.Phone))", "score": -0.42923255484129186, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Customer.Phone),Customer.Country))", "score": -0.48897263347680564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.4898383173676848, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.507429913017404, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Customer.Country),Customer.Phone))", "score": -0.5598423055889725, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.5826007856138219, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Customer.Phone),Customer.FirstName))", "score": -0.6037655764775991, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.6056721660825133, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.6123665369632363, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Michelle), Invoice.BillingCountry),Customer.Phone))", "score": -0.6169310979130387, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.6575453135701537, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,Michelle), Employee.Phone),Customer.Phone))", "score": -0.689475384871912, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.1790208736429122, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.22653435859774618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Employee.State),Employee.State))", "score": -0.35615706015323667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Employee.State),Invoice.BillingState))", "score": -0.40367054510807066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Customer.State))", "score": -0.41917855236624746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Employee.State))", "score": -0.4739930437872317, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.4862834135064986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.5036870161065963, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Invoice.BillingState))", "score": -0.5215065287420657, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.5337968984613326, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.5371742624784019, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.5469255963334945, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.5512005010614303, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.Address))", "score": -0.5581843623886016, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Employee.State))", "score": -0.5620752679178622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.1473490677853988, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.30564188287462457, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.38841558323110803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4039639279326366, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4386129461308883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4492195628663467, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.47280949802006944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Artist.Name))", "score": -0.480026918285148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.485644536845939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Customer.PostalCode))", "score": -0.5121262844731973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5332735560914443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5467083983203338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5622567430218623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5890460692426132, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5969057612201141, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.08456675305909478, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.12736758494985487, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.14550723036387989, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.20828340947091958, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2333141768072075, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2631877518532243, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3114596264793233, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),Playlist.PlaylistId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.36356899881093413, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.MediaTypeId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.36411103924492033, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.36525725990141766, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.36803692639811814, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.383694787564458, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3864251403787509, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.41487333881562327, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.4343884703860397, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22813364837830188, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.UnitPrice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26878146506132267, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceLineId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27745065312798045, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.292254190703801, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2931047567532288, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3054319434484579, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31186121867334243, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32111898073653244, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32278408635192996, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32662830218709066, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.UnitPrice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33053851388872585, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceLineId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33825064066195676, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3461123250126688, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3588352633129091, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37533352768719913, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2544149993646457, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.2544994581058932, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.2641137896013202, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2694181321476632, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.2861597344978132, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2971094112106641, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3006553435120518, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3025977784613549, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3149500067017311, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.33043013751628414, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Gerald Moore),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Track.TrackId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3369610295736258, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.3375771002676564, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Track.TrackId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3386552296195742, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.35764441854774953, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.35918286405304345, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Customer.City))", "score": -0.2545008127859422, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Customer.City))", "score": -0.3055230075897907, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.3135939416838159, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Invoice.BillingCity))", "score": -0.3326094545300439, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.35434064425576983, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3580298743222893, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Customer.City))", "score": -0.36057286574599723, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.36461613648766433, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3646726501357375, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Customer.City),Customer.City))", "score": -0.37990312908667245, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Invoice.BillingCity))", "score": -0.3836316493338924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3917025834279176, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3919291739548754, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Customer.City))", "score": -0.3922507215413639, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.City),Customer.City))", "score": -0.40085071568742386, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.09540871667741158, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.21835808592913963, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2989921360003791, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.42194150525210716, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4753522039118252, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4946581483545742, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5140238715994201, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.5355340554106078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.PostalCode))", "score": -0.5551020218717895, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5983015731635533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.6176075176063023, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Album.Title))", "score": -0.6368887736189208, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Finland),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6438556065732288, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6465208246099792, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Finland),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6469129808380045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.14345119449875968, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1484657960072739, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1580447536865391, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.17601113860744305, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.18755161559137593, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.19898090890241385, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20217178228719496, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21483232329022572, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.21889845053902424, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.22107132733249582, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22768756354278202, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23825356879059062, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23986793929377703, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24357397110710766, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the sum of billed totals for tracks on playlists not named Classical?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.24698568337204468, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.08557391676576973, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.31285563706922, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.41412415060197, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.6414058709054202, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.7284767662256718, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -0.7335444936740911, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.7725153766650692, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Email))", "score": -0.8560560330505699, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.8900543981487647, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.8916097743815902, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.8939194748416622, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.State))", "score": -0.8939541367063955, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.9028394158539599, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.9198213118773502, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.955721466177365, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.19048183015417824, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.22620407252018104, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.22748123089305478, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.2616325281517357, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.2872624051027634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29603640631507155, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.30097259870294435, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.30822732482987425, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.308307215790733, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.31624274790310114, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,6854313), Playlist.Name),Playlist.Name))", "score": -0.3242618058416399, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3353764768662802, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.33972908679621655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35064662606643693, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.35540631285951085, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,182883),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.19946773899171122, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1),InvoiceLine.UnitPrice,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.23890999323488574, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.24392252842237766, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,182883),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.26998739954443673, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,182883),InvoiceLine.Quantity,<=,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.30187107061558016, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,182883),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3128056294490137, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),InvoiceLine.UnitPrice,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3214747415937393, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,182883),Invoice.InvoiceDate,<,182883), Invoice.InvoiceId),Invoice.Total)", "score": -0.3272229277700597, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,182883), Invoice.InvoiceId),Invoice.Total)", "score": -0.32798648809863085, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1),InvoiceLine.UnitPrice,<=,182883), Invoice.InvoiceId),Invoice.Total)", "score": -0.3413133248587547, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.34140345775944414, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3414072856054358, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,182883),InvoiceLine.UnitPrice,<,182883), Invoice.InvoiceId),Invoice.Total)", "score": -0.3475396309659191, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,182883), Invoice.InvoiceId),Invoice.Total)", "score": -0.34763870428510973, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1),InvoiceLine.UnitPrice,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.35224792019242973, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2624406333377465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.445352956661838, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.4492786426453997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total)", "score": -0.4552435508947753, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.4580544197296233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total)", "score": -0.4679450139625606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4744118008127316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.4823992521681768, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.48353197601736136, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.49063320503691815, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total)", "score": -0.4922898464011141, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.5035945042031442, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.5072051176934843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,!=,2009-05-06 00:00:00), Invoice.InvoiceDate),Invoice.Total)", "score": -0.5170957499998823, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.5199066188347302, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.22830569100011924, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.28130393823519106, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.2868482783288275, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.30213161772004965, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.3034698065744119, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.30991499851562904, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.31035006667334647, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.3133287148590198, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.31545933860926545, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.3190034421279832, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))", "score": -0.33318737197074383, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.3337659832348025, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.34133928739642383, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))", "score": -0.34140582092404065, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.34688362749006024, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,>=,None), Track.TrackId),Invoice.Total)", "score": -0.29887676144682856, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Invoice.Total)", "score": -0.34726997059621023, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,None), Track.TrackId),Invoice.Total)", "score": -0.37720857509848366, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,None), Track.TrackId),Invoice.Total)", "score": -0.39406143824243234, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Name,=,None), Track.TrackId),Invoice.Total)", "score": -0.4022229466553787, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Track.Name,=,None),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.41593170488799047, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Track.Name,=,None),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.41631735920419805, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,>=,None), Track.TrackId),Track.Bytes)", "score": -0.4179201521662022, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.Name,=,None), Track.TrackId),Invoice.Total)", "score": -0.43734842387419887, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.44074182216470226, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,<=,None), Track.TrackId),Invoice.Total)", "score": -0.44168618267624143, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId),Track.Name,=,None), Track.TrackId),Invoice.Total)", "score": -0.4511381538637582, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Track.Name,=,None),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4635779837268606, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Bytes)", "score": -0.4663133613155839, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What ist the total sum of all Tracks?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,None), Track.TrackId),Invoice.Total)", "score": -0.48455142611033464, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24675861134133878, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.25502172575566656, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.256088740053845, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.2816270736049968, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Country,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28484507450911206, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2939862420171766, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.Country,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.2974266460171784, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Customer),Customer.Country,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.30450999597664685, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.31224937612315407, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.31773671163241773, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3192714891407847, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Customer),Customer.Country,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.32166713957274456, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Country,=,Norway),getData(Customer),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3313169938723534, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.343021924871083, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Customer),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.35254317043687833, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Address,=,None), Employee.BirthDate),Employee.BirthDate))", "score": -0.5105018567301158, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Address,=,None), Employee.BirthDate),Employee.Title))", "score": -0.5175049927092914, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Address,=,None), Employee.Title),Employee.BirthDate))", "score": -0.5241860177375202, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Address,=,None), Employee.Title),Employee.Title))", "score": -0.5311891537166957, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,None), Employee.BirthDate),Employee.BirthDate))", "score": -0.5445765208460216, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Employee.BirthDate),Employee.BirthDate))", "score": -0.5451407980181102, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,None), Employee.BirthDate),Employee.Title))", "score": -0.5515796568251972, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Employee.BirthDate),Employee.Title))", "score": -0.5521439339972858, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,None), Employee.Title),Employee.BirthDate))", "score": -0.5582606818534259, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Employee.Title),Employee.BirthDate))", "score": -0.5588249590255145, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,None), Employee.Title),Employee.Title))", "score": -0.5652638178326015, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,None), Employee.Title),Employee.Title))", "score": -0.5658280950046901, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,None), Employee.BirthDate),Employee.BirthDate))", "score": -0.579215462134016, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,None), Employee.BirthDate),Employee.Title))", "score": -0.5862185981131915, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,None), Employee.Title),Employee.BirthDate))", "score": -0.5928996231414203, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34299835600235185, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3577924864267302, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3671476982407248, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36734534986833933, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3681176088371274, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Opera), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.37988417485580867, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Opera),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38056059435838324, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3909563656826508, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Opera),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39514384800620544, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4026040660769915, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes),Album.Title))", "score": -0.40466610957598004, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Opera), Track.TrackId),Track.UnitPrice)", "score": -0.4050034276905843, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40610119417231755, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.408066576340344, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41405299737919976, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.08813120310514932, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.City),Customer.City))", "score": -0.17193295319884783, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.4404865547767258, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.PostalCode),Customer.City))", "score": -0.5023820565766073, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,560001), Customer.City),Customer.City))", "score": -0.5242883048704243, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.PostalCode))", "score": -0.5418118282905198, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.PostalCode),Customer.City))", "score": -0.5861838066703058, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), InvoiceLine.UnitPrice),Customer.City))", "score": -0.5906206236904836, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Album.Title))", "score": -0.6025383516898728, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Invoice.BillingCity),Customer.City))", "score": -0.621621595484612, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Invoice.InvoiceDate),Customer.City))", "score": -0.622362004382012, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.City),Customer.PostalCode))", "score": -0.6256135783842183, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,560001), Customer.City),Customer.City))", "score": -0.6414825835017837, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), InvoiceLine.UnitPrice),Customer.City))", "score": -0.6744223737841821, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.City),Album.Title))", "score": -0.6863401017835713, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
