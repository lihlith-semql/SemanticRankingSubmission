{"index": 0, "beams": [{"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26839919154634434, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Genre.GenreId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.27277027352070315, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2817633588010192, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Genre.GenreId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28613444077537803, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30686524275136556, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3128053906223205, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31579955318341724, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingPostalCode,!=,Coma),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31589073592432576, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Genre.GenreId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32017063515777605, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingPostalCode,!=,Coma),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3218308837952807, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32578955028573847, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3291637204380921, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Genre.GenreId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3301606322600973, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Genre.GenreId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3335348024124509, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3391537175404134, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.15784189141332655, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.20516509064950386, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId), Track.Bytes),Track.Bytes))", "score": -0.21832401163196458, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Track.Bytes),Track.Bytes))", "score": -0.2718963803641584, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId), Track.Bytes),Track.Bytes))", "score": -0.2770509895829414, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Album),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.2819301612252929, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.28471654648938205, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(getData(Genre),Genre.Name,!=,Rock And Roll),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.29718126959772173, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Genre.GenreId), Track.Bytes),Track.Bytes))", "score": -0.30383065387029934, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.3117122674496443, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Album),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.3292533604614702, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Bytes),Track.Bytes))", "score": -0.33203976233859084, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Bytes),Track.Bytes))", "score": -0.3508071203113568, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,Rock And Roll), Track.Bytes),Track.Bytes))", "score": -0.35729238652427464, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Bytes))", "score": -0.36737124448174646, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.009952100535639281, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title)", "score": -0.3513443984438606, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3597823114139118, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3888088353817146, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.Name,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.42918030583319394, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4591126115827044, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4614226084781285, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.46229119274272873, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Customer),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4705059719812028, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title)", "score": -0.4795465357571907, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Genre.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5077213385817635, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Genre.Name),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5210668392888753, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5242182518433197, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5322551108273367, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical),getData(Album),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.5558181301545447, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.08445825789203809, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Customer.State))", "score": -0.3197503256433265, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.3686576130621688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.HireDate),Employee.State))", "score": -0.38856997143557237, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Customer.State),Employee.State))", "score": -0.419942399375941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.Country),Employee.State))", "score": -0.4216790403061168, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.HireDate))", "score": -0.5329256224267738, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.Country))", "score": -0.5372922289006965, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.City))", "score": -0.5754691826932685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.589183950685765, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.State))", "score": -0.5951227749519603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.State),Customer.State))", "score": -0.6039496808134572, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.HireDate),Customer.State))", "score": -0.6238620391868608, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.Address))", "score": -0.637981520854737, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.Address),Employee.State))", "score": -0.6511277760200755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.32692043135217413, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Playlist.PlaylistId),Track.Milliseconds),Track.Composer))", "score": -0.3451957583334951, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Invoice.InvoiceId),Track.Milliseconds),Track.Composer))", "score": -0.3724895071107153, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Genre),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.38776605786566964, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.3913121493066566, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.4051072673128527, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Genre),Track.TrackId,Playlist.PlaylistId),Track.Milliseconds),Track.Composer))", "score": -0.40604138484699054, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Playlist.PlaylistId),Track.Milliseconds),Track.Composer))", "score": -0.4095874762879775, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.41994950469332337, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(MediaType),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.420700723826205, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Composer))", "score": -0.4220680427692527, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Genre),Track.TrackId,Invoice.InvoiceId),Track.Milliseconds),Track.Composer))", "score": -0.43333513362421083, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Invoice.InvoiceId),Track.Milliseconds),Track.Composer))", "score": -0.4368812234038946, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,Heavy Metal Classic),getData(Playlist),Track.TrackId,Playlist.PlaylistId),Track.Milliseconds),Track.Composer))", "score": -0.4382248300133411, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Track.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.4402216575736498, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.09289593064578815, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.16459433229952009, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.18443866230700223, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.26329511560652463, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.38382284620287066, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.4104360726026785, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.4123642292142046, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,PlaylistTrack.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.4182400147913916, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.4288607590435332, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.AlbumId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.44305955640948697, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.4481645310327597, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file), Track.Name),Album.Title))", "score": -0.4541284587994596, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.46461591281149595, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Track.Bytes),Album.Title))", "score": -0.46552982224961703, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}, {"orig_question": "What are the different album titles with a media type of a Protected MPEG-4 video file?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))", "score": -0.49148011364195554, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.01608199125621468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5246520565124229, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Employee.Country),Customer.Country))", "score": -0.564352001179941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.State),Customer.Country))", "score": -0.5679019346134737, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5815027878852561, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Employee.Country))", "score": -0.6100704263662919, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.State))", "score": -0.6767919849371538, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.6786395834060386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.FirstName),Customer.Country))", "score": -0.6810113444225863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Company),Customer.Country))", "score": -0.6813206329243258, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Phone),Customer.Country))", "score": -0.7127700700657442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.FirstName))", "score": -0.7378766130423173, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Phone))", "score": -0.7378925870871171, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Address),Customer.Country))", "score": -0.7736063852207735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.7780917213531211, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.23001179472981853, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.23855541165583685, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,>=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.31619974132074125, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.32474335824675954, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Track.Name),Track.Name))", "score": -0.33483527302744226, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.3476043360064825, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Track.Name),MediaType.Name))", "score": -0.3487598109790204, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.Quantity))", "score": -0.350716796314812, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,None),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.3541529460360611, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.35614795293250084, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.InvoiceLineId))", "score": -0.35622117653005836, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.Quantity))", "score": -0.3592604132408303, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Track.Name),Track.Milliseconds))", "score": -0.36248183829191083, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.36269656296207947, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks have been sold in total?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),InvoiceLine.InvoiceLineId))", "score": -0.3647647934560767, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.03303706856604549, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4088618869536731, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4717714304679248, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5080627564792852, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5290666963539509, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.540028732513747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.54546856956004, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5549057538264606, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5556379756999377, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5664725094347057, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5665928537600848, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5953774610257047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.6069973523372028, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.6510399435501313, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Madison), Customer.Country),Customer.FirstName))", "score": -0.6799491397214297, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.3094565989635018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.3306983884783939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.33442690115997875, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.33491283570533265, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),getData(Customer),Employee.EmployeeId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.3447402711036509, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),Employee.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.3490857362624873, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),Customer.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.37454197300431813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Employee.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.383484902970095, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.38364201130127945, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.3867913170983639, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.3968635741589799, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Employee.LastName))", "score": -0.4007986459906615, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.4089411438651837, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.41224754636433053, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.LastName,=,+1 (780) 428-3457),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.42516321350277103, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.13523151457449828, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.17292328444353663, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Bytes),Album.Title))", "score": -0.18754544812178772, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.20710073608141438, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.Bytes),Album.Title))", "score": -0.2138425922157913, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))", "score": -0.23339788017541793, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.23485030855293004, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Bytes),Album.Title))", "score": -0.2564656320566212, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2571762337303369, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2725420784219684, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),Track.Bytes),Album.Title))", "score": -0.3142205059562562, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3173492431339168, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.3250325348679459, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3436463872279204, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.35434776670473117, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322),getData(Track),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.20347449223829842, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,+1 (403) 262-3322),getData(Track),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.21133892941639404, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,+1 (403) 262-3322),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22215524313268276, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22392642453078465, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.22700907520542546, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,!=,+1 (403) 262-3322),getData(Track),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.24209676209341388, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.24303884068463275, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Fax,!=,+1 (403) 262-3322),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.24720929533292482, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.25059272108958236, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.25306015517353053, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,+1 (403) 262-3322),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2587384842898353, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.265487847979848, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Fax,!=,+1 (403) 262-3322), Track.TrackId),Track.UnitPrice)", "score": -0.27707633023908756, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.29544738135543513, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of tracks sold by employees with a fax number other than +1 (403) 262-3322?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,+1 (403) 262-3322),getData(Track),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.2989719812293851, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.09814865967451052, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1340665650450399, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.184089461948832, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.20406130475049283, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22049996284021933, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22096674140082395, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.2977700463342682, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30644076511454077, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3366568106108363, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34331804456653275, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3611837946679147, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39366273790185446, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40624723007423175, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4066515414213953, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that are more expensive or as expensive as 1.99?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Track.Bytes)", "score": -0.4717093899094935, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.059455147713699856, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.2239706847282952, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Employee.HireDate),Track.UnitPrice))", "score": -0.2420129330930025, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.31084783732818566, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Invoice.Total),Track.UnitPrice))", "score": -0.31839897846307813, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),Invoice.BillingAddress,!=,Erzs\u00e9bet krt. 58.), Track.UnitPrice),Track.UnitPrice))", "score": -0.32022613157727264, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),Track.Composer,!=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.3304612660196821, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Employee.BirthDate),Track.UnitPrice))", "score": -0.35625095997758166, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.3589679540116171, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3605532176201995, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.3664541792926452, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,Erzs\u00e9bet krt. 58.),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.40155675090327214, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC), Customer.Email),Track.UnitPrice))", "score": -0.40599429247827307, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.HireDate),Track.UnitPrice))", "score": -0.4131550237587197, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.HireDate),Track.UnitPrice))", "score": -0.4534266687839114, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Label Society), Track.TrackId),Track.Milliseconds)", "score": -0.07343873113314425, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,!=,Black Label Society), Track.TrackId),Track.Milliseconds)", "score": -0.2000098230383597, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Label Society),getData(Track),Album.ArtistId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.32363319167675325, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,Black Label Society), Track.TrackId),Track.Milliseconds)", "score": -0.33198921041078133, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Employee.BirthDate,!=,Black Label Society), Track.TrackId),Track.Milliseconds)", "score": -0.3339839202983288, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),filter(merge(getData(Artist),getData(Album),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Label Society),Invoice.InvoiceId,Album.ArtistId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.33766242698423493, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),filter(merge(getData(Artist),getData(Album),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Label Society),Invoice.InvoiceId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.36128090186442313, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Label Society),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3629495703402216, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes,!=,Black Label Society), Track.TrackId),Track.Milliseconds)", "score": -0.37146993359862857, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.3763169415039756, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.ArtistId,!=,Black Label Society), Track.TrackId),Track.Milliseconds)", "score": -0.3835878379049234, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),filter(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Label Society),Invoice.InvoiceId,Album.ArtistId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4051884638462664, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),filter(merge(getData(Artist),getData(Artist),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Label Society),Invoice.InvoiceId,Album.ArtistId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.41325647114402814, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),filter(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Label Society),Invoice.InvoiceId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.42880693872645453, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length performed by artists other than Black Label Society?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),filter(merge(getData(Artist),getData(Artist),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Label Society),Invoice.InvoiceId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.43687494602421634, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Label Society),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.08326660145434091, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.09720951969497443, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.12377178954198573, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.14731450085404993, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1893113572623334, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24507348478828933, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24546899603362038, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2588765657651527, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2777912820128006, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3296818139478382, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37763172219382907, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3809670905106856, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3976655052886261, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.40242042551211776, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.Name), MediaType.Name),MediaType.Name))", "score": -0.427338110412555, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11175169041142811, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.12966169056010704, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13278437062755277, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16296421941641412, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18833121821552987, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),getData(Track),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2076042631716008, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21886176031661173, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23193117573718025, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23218217790506798, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24451821516026762, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26751162950283386, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),getData(Invoice),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.268539205824655, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.276066839780931, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.2794532233090871, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2810302821225925, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.1674585659056902, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.2235816877570022, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.267558865928292, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.2684761102398407, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.27772907317095136, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.32446933739222905, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.32538658170377777, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.3753513493070181, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.37626859361856685, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.3781852259545917, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.3799561311960449, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.4098295848816633, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.4211644127616036, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Composer,!=,Sex Machine),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.43586266597227363, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Album),Track.AlbumId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.4364979050790224, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.07547054915795715, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.11454684871265575, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.2754925103208621, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.2756055675377704, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.2971163789146744, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.3302088212322352, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4445102897664813, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Track.Name),Track.Name))", "score": -0.4490418312625416, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.4500615276037677, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name),Track.Name))", "score": -0.452781072167343, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4607931071858516, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.46808470106051514, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4780146480644828, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.48562217763537624, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4891879850712233, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.15235804380260073, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.15688214988754184, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),MediaType.Name))", "score": -0.2155189329705984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Customer.FirstName),MediaType.Name))", "score": -0.2264545245902008, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Customer.FirstName),MediaType.Name))", "score": -0.2416812173333073, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.24315979214584266, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingCountry),MediaType.Name))", "score": -0.24821692793446343, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.FirstName),MediaType.Name))", "score": -0.2497499192181579, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.25990070187895664, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.Total),MediaType.Name))", "score": -0.26107277941448614, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingCountry),MediaType.Name))", "score": -0.2623915660100992, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.26370966557007536, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2667827111856191, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2693975207153992, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.HireDate),MediaType.Name))", "score": -0.27029041586004404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.08954686913511978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.36645376831165777, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.3967482378693603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Customer.State))", "score": -0.43244930785022007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.46284384336195217, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.4932215889903091, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Invoice.Total))", "score": -0.5285321144374393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.567760879843263, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Customer.Address))", "score": -0.6076417831691288, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.6736551370458983, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.6765992423506759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.6872571488829635, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6949660411091827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.InvoiceId),Invoice.Total)", "score": -0.7052678930390464, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Invoice.BillingState),Customer.State))", "score": -0.7093562070267581, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.26921441425871107, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.28158280704052707, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.28868643123490934, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29229884324328775, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.29409612096299215, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2987081766797931, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30466723602510376, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3064645137448082, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.31107656946160916, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.311770860219486, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3135681379391904, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31718054994756884, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.31818019365599143, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3201801256331435, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of customers that ordered tracks composed by Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3217926056643698, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Alex Van Halen/David Lee Roth/Edward Van Halen/Michael Anthony),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.1659611068562299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.16750652863538562, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.3167675375834733, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.31831295936262904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.46522718443429767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Employee.State),Invoice.BillingState))", "score": -0.49269577543145715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Invoice.BillingState))", "score": -0.4942411972106129, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.5012862920657426, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.5028317138448983, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5178472675279409, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5787792183355123, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5843741275266439, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.6160336151615411, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.6330196834996968, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Employee.State),Employee.State))", "score": -0.6435022061587006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.03876407846018992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27681596047386847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4076554275225135, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5136733747194739, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5440473398697054, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.578756091526505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6133070684145423, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6413603521059486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Customer.Country))", "score": -0.652395121112022, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.LastName,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6577668882082435, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Customer.Phone))", "score": -0.6646126427795025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),MediaType.Name))", "score": -0.6811227121497723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.6852818050529095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Customer.Country))", "score": -0.7085002191747654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Employee.Phone))", "score": -0.7105495252753826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.13234337083978273, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.15977180248948322, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.17088001539727649, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.17242607999882353, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.1727099548550501, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.17642764826581334, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2217438422012234, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22966845150997875, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2461996855519252, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2514040264278421, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.25704776903411053, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.25883180131705125, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2665637817371915, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.2749334078333643, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.3023868220079381, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Alanis Morissette),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17798229908060556, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Alanis Morissette),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2341311912269307, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2605463951761546, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.26687582726632786, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.27093248146615645, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2772619135563297, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Name,=,Alanis Morissette),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31138676377227986, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.33917641365505696, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3432851751818948, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3455058457452302, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.349614607272068, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Alanis Morissette),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3521631471862785, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.362104310920658, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),MediaType.Name,=,Alanis Morissette),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3668810794968764, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Alanis Morissette),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3675356683783786, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3232188834589929, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3406913441600585, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.35409794199984346, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.40235765895570863, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Invoice.Total)", "score": -0.4147567147134103, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Genre.GenreId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.4195058967203421, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4299205675805018, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4332367174965592, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Invoice.Total),Track.UnitPrice))", "score": -0.4375950797878746, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.44530354363019703, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.44563577325426085, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.44601670833126017, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Genre.GenreId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.45038495526119265, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),merge(getData(Track),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.47265547401250385, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the music done by Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra generate?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4880384799656557, "correct_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Emanuel Ax, Eugene Ormandy & Philadelphia Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01951246833525331, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.6224132716382568, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6598409310644416, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.692818887234425, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7153199594161229, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8092733511196413, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.83777911361588, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8445215274707069, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8463794976079023, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.8655140670920387, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8920667974634293, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9145679253167432, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.9361865431806228, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(InvoiceLine), Album.Title),Album.Title))", "score": -0.9931340379784132, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.PostalCode))", "score": -1.041114183646014, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.04575691824463123, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),MediaType.Name))", "score": -0.4555882997415685, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.Email))", "score": -0.5464724294468524, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -0.5840707782832795, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -0.673129419295816, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Employee.Email))", "score": -0.7135197430974387, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -0.8396051227165403, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.AlbumId))", "score": -0.8487146138630574, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.8641856494685967, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Genre.Name))", "score": -0.9120746671201846, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(MediaType), Album.Title),Album.Title))", "score": -0.9842292048671886, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), MediaType.Name),Album.Title))", "score": -0.9879182610402519, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -0.9886997197962984, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.FirstName))", "score": -1.016118878110407, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.PostalCode))", "score": -1.0595946950280084, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.11697676381663769, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2543112959108541, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27845212326477986, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2843760407473345, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28911359602490133, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2914351814172273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3214999262537077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3222979049019727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3329593776620942, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3466011026415048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.34927068326575916, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.35993214661182943, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3627645678959441, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3720941023607009, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3766658851341899, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.07572553997670184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.34543645700250636, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.3631324501875497, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3750545861366845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3772331452164508, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.45970350822244654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.49505791386400233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Employee.City))", "score": -0.5139209008011676, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.5149039796510706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.5479505022601058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.575522966066745, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.5845943458080001, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.591953966224537, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.InvoiceDate),Customer.City))", "score": -0.6383364977482415, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.644765503162489, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.1794397392012714, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.30574964166594176, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -0.3529002823451595, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.4425699195190695, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))", "score": -0.4792101848098299, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.PostalCode))", "score": -0.5688798219837399, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.7018245185019749, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.City))", "score": -0.7708683527939983, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.InvoiceLineId))", "score": -0.7861485412208069, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.788352024332821, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.8115361528623627, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.8253471531073509, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.City))", "score": -0.8668320517235535, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Email))", "score": -0.8676280114896607, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Fax))", "score": -0.875285061645863, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.0479796486387141, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.09745902372460424, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.20124427041676124, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22401854222570036, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.23123539546969354, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24693757825105903, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.Total),Invoice.Total)", "score": -0.24907890771411484, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2515074217286612, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2715662903272895, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27847219866311734, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2837142832627509, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2942732274445136, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2961289019468576, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29621083976726703, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total)", "score": -0.30234718461050564, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.08420759899885172, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.09867874555744452, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.16723475803803256, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Track.GenreId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2752919474735893, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Track.GenreId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2897630940321821, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.31296756640635154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3438696986550841, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.35783882310611775, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.37647376127103394, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Track.GenreId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham), Genre.Name),Genre.Name))", "score": -0.38382951330940807, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.GenreId))", "score": -0.4088291185835985, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.GenreId))", "score": -0.42330026514219127, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4234680701079025, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),filter(merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.4259941124732904, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre in our data base that the artist Royal Philharmonic Orchestra & Sir Thomas Beecham does not belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),filter(merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.43897228672125854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.25615337102499325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.3572327552048011, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.3770040125736863, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.4293904414662393, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.43154613787218277, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.43644807957871545, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,<=,6457752),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4476736433212631, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.44849920805647914, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,<=,6457752),merge(getData(Track),getData(Track),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.45230732348121333, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))", "score": -0.45338263719168026, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4562193369476007, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.468270456288197, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,6457752),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.46922431896401834, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4823593201865026, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices at which tracks with a size of at most 6457752 bytes are sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,6457752),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.4924235513756604, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6457752), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,<,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.3189912176458165, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.3324069044319913, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,>,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.4442639871267602, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.45767967391293496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.47980933997314423, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,<,1947-09-19 00:00:00), Employee.Title),Employee.HireDate))", "score": -0.4919665268389508, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.Title),Employee.HireDate))", "score": -0.5053822136251256, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,<,1947-09-19 00:00:00), Employee.Address),Employee.Title))", "score": -0.5123542210785672, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,<,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.5246743819443509, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.Address),Employee.Title))", "score": -0.525769907864742, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,<,1947-09-19 00:00:00), Employee.Title),Employee.Country))", "score": -0.5294174364535138, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.Title),Employee.Country))", "score": -0.5428331232396886, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,<,1947-09-19 00:00:00), Employee.HireDate),Employee.Title))", "score": -0.6017904541222379, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.6050821094540879, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.HireDate),Employee.Title))", "score": -0.6152061409084126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.189863607791267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.24094548126777227, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24109357645829732, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2921754499348026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.42723277261575276, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.47831464609225804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Employee.LastName))", "score": -0.5142698293002468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),MediaType.Name))", "score": -0.5241927211554867, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5632273401515704, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,QC), Invoice.BillingCountry),Employee.LastName))", "score": -0.5653517027767521, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,QC), Invoice.BillingCountry),MediaType.Name))", "score": -0.5752745946319919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Employee.Phone))", "score": -0.5939741735728603, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5966470684306842, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Customer.Country),Customer.Country))", "score": -0.6091360324444395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,>=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.6143092136280757, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.173016866515404, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.18909420176500244, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.22142790227835285, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.22540335984174675, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.24349390661041379, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Customer.City))", "score": -0.2719742558392844, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27718389401507126, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28005663171042855, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.2894682453691833, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.2898602553203026, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2945787780605985, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2959781855190217, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.2992498983471322, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3163657897871729, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,Protected AAC audio file), Invoice.BillingCity),Customer.City))", "score": -0.3180441898510827, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.03997902018558891, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.Country))", "score": -0.14272878640791106, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),MediaType.Name))", "score": -0.2003335621217454, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.LastName))", "score": -0.20757934126716923, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22180731685403432, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.Phone))", "score": -0.2272042568871634, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.FirstName))", "score": -0.22887814990201494, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23915692352100643, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.24170792641963076, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.Country))", "score": -0.277679005742738, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2785442682796771, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28788504002564486, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.Company))", "score": -0.2980230106656654, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Customer.Address))", "score": -0.305474731784736, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From how many different countries have tracks from the artists AC/DC been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30860345525828387, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Genre.Name),Genre.Name))", "score": -0.172942568151484, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Genre.Name),Artist.Name))", "score": -0.25202661433650064, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Genre.Name),Album.Title))", "score": -0.3720215974135499, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.49596531412097355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.4967417274698645, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Genre.Name),Invoice.BillingPostalCode))", "score": -0.49886564591361093, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Artist.Name))", "score": -0.5043768375110768, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Artist.Name))", "score": -0.5051532508599677, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Milliseconds,>,235598), Genre.Name),Genre.Name))", "score": -0.5145610365596373, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Milliseconds,>,235598), Genre.Name),Artist.Name))", "score": -0.5255228374878091, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(InvoiceLine),getData(Artist),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.5375579301052533, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(Album),getData(Artist),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.5383343434541442, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Album.Title))", "score": -0.5458972599057508, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(InvoiceLine),getData(Artist),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Artist.Name))", "score": -0.5459694534953565, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,235598),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId), Genre.Name),Album.Title))", "score": -0.5466736732546418, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,2004-03-04 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.11266578497129008, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,2004-03-04 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.15040862155658952, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2004-03-04 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.18323600183934916, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,>=,2004-03-04 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.20137216362341967, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,2004-03-04 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22080568697249758, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>=,2004-03-04 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23911500020871912, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,<,2004-03-04 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.24997038971421215, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,2004-03-04 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2580023277504854, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,>=,2004-03-04 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.260848207937198, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,>=,2004-03-04 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2640424824401366, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,=,2004-03-04 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26702481843569137, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2004-03-04 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2698706986224039, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2004-03-04 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2760214972570209, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2004-03-04 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.31297071687406575, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees hired before 2004-03-04 00:00:00?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2004-03-04 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3432677154503132, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.HireDate,<,2004-03-04 00:00:00),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.03133992696487803, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.23962810563803383, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.City),Customer.PostalCode))", "score": -0.24208538785601125, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.274872542833649, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3336767007855606, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.33998084507298054, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.PostalCode))", "score": -0.34004333499089795, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.City))", "score": -0.34201633571206963, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3531905278794029, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Employee.PostalCode),Customer.PostalCode))", "score": -0.37578376919311957, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.38054324101237635, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.38803787887368774, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Email),Customer.PostalCode))", "score": -0.40125442604627626, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.40194618686260203, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.4103636729249562, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23372948274560218, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2729981332620833, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3252940521237541, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33351673176525165, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34224213916201296, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3490369658262049, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35173422633729867, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.3565074532724587, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.3663021491920846, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37278538228173275, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.37605643044123876, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3827830780313826, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38448808119983846, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Nega Gizza),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.38455166466370105, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all album tracks by Nega Gizza?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza), Track.TrackId),Track.Milliseconds)", "score": -0.38585112636086466, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nega Gizza),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99), MediaType.Name),Genre.Name))", "score": -0.3062863863947405, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), MediaType.Name),Genre.Name))", "score": -0.32588732253473635, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), MediaType.Name),Genre.Name))", "score": -0.3656069809196579, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), Genre.Name),Genre.Name))", "score": -0.3667502764557848, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), MediaType.Name),MediaType.Name))", "score": -0.38079286660906997, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<=,0.99), MediaType.Name),Genre.Name))", "score": -0.38203933793098, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.UnitPrice,<,0.99), MediaType.Name),Genre.Name))", "score": -0.3852079170596538, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99), Genre.Name),Genre.Name))", "score": -0.38635121259578065, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), MediaType.Name),MediaType.Name))", "score": -0.4003938027490659, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<=,0.99), MediaType.Name),Genre.Name))", "score": -0.40164027407097586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), Invoice.BillingCountry),Genre.Name))", "score": -0.4154194945135797, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>,0.99), MediaType.Name),Genre.Name))", "score": -0.42423744796612806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.UnitPrice,<,V6C 1G8), Genre.Name),Genre.Name))", "score": -0.4260708709807022, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),Album.ArtistId,Invoice.InvoiceId),Track.UnitPrice,<,0.99), MediaType.Name),Genre.Name))", "score": -0.4270890460239944, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),Track.GenreId,Invoice.InvoiceId),Track.UnitPrice,<,0.99), MediaType.Name),Genre.Name))", "score": -0.4303968777976164, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2651140430516534, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30895391493504576, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38844887181585364, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.43228874369924597, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4507556335574918, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47000733404820494, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.49412814169591, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.49459550544088415, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5102726557797723, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5192175248212152, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5270258524960809, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.5609315299789159, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.574252925476685, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5774550956102757, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingCity,=,Edmonton),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6583780469654034, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.06535218322392211, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Park), Employee.Phone),Employee.Phone))", "score": -0.2108433026980947, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.2809053439807485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.Address))", "score": -0.6058953783169727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Park), Employee.Phone),Employee.Phone))", "score": -0.6279896278094839, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.FirstName),Employee.Phone))", "score": -0.6606132201079618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Address),Employee.Phone))", "score": -0.6642753890876065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Park), Employee.Phone),Employee.Phone))", "score": -0.7130042690944265, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Customer.Phone),Employee.Phone))", "score": -0.7248484305266629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.Fax))", "score": -0.7316284558430652, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Fax),Employee.Phone))", "score": -0.7350026778105985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Customer.Phone))", "score": -0.737163879598711, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,Park), Employee.Phone),Employee.Phone))", "score": -0.7426536459636282, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Park), Employee.Phone),Employee.Address))", "score": -0.7513864977911453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Park), Employee.Phone),Employee.Phone))", "score": -0.7649521608066152, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.16771609217511813, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.17418331939361095, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2440402772611695, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2505075044796623, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,The Final Concerts (Disc 2)),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2558976166102696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.2928618707856743, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3127861744113523, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3192534016298451, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.32902146284752676, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.33704361923162485, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,The Final Concerts (Disc 2)),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33706302292089163, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.34351084645011765, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Track.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.34699193317554666, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Genre.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3484905437988567, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Track.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3534591603940395, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.34692875641314974, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Bark at the Moon (Remastered)),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3520706677402923, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,8624492), Artist.Name),Artist.Name))", "score": -0.3533340325297129, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Bark at the Moon (Remastered)),merge(getData(Track),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.37238481682728203, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.3776648715079995, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Bark at the Moon (Remastered)),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.38146728075200687, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,8624492), Artist.Name),Artist.Name))", "score": -0.38407014762456265, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.3970004200077567, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.3985475251774964, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Bark at the Moon (Remastered)),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.40178140104307536, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.4030554668398409, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,8624492), Artist.Name),Artist.Name))", "score": -0.4034056961243198, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,8624492), Artist.Name),Artist.Name))", "score": -0.4049528195683942, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,8624492), Artist.Name),Artist.Name))", "score": -0.40946076123073866, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.42773655337694105, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,!=,Netherlands), Customer.City),Invoice.BillingCity))", "score": -0.41358905791692324, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.City,!=,Netherlands), Customer.City),Invoice.BillingCity))", "score": -0.4136240028748767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.41678779576754915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.42285662920069206, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.4450785036393244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,!=,Netherlands), Customer.City),Customer.City))", "score": -0.44687164505809707, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.City,!=,Netherlands), Customer.City),Customer.City))", "score": -0.44690659001605054, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.4511473370724673, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.45723817944971684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.46226820223939674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.46330701288285975, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4683370356725397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Invoice.BillingCity))", "score": -0.4684645484419077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Fax))", "score": -0.47414296234481185, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "how many billing city does exist except from netherlands", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Customer.City,!=,Netherlands),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.City),Invoice.BillingCity))", "score": -0.4745333818750506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Netherlands), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.06592157717842279, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.1992695012586578, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.2603344513754564, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.29777658753911684, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.LastName),Customer.LastName))", "score": -0.30806369560262314, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.3685505582670885, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.Fax))", "score": -0.37956315454306183, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.39391925453634663, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.Company))", "score": -0.39513244463328584, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Artist.ArtistId))", "score": -0.39869817710762556, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.Country))", "score": -0.4032468339875247, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.4067198968956321, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1), Customer.LastName),Customer.LastName))", "score": -0.40905841129824694, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.LastName),Employee.LastName))", "score": -0.4216404634735603, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.4421296557573238, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.2513936131092193, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27680423711181473, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.2832395230084459, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.29941025356985673, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.3084769506201702, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3086501470110413, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32482087757245215, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.3312561634690833, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.3323890038707312, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.34032286051939686, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.35649359108080764, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35666678747167874, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3577996345185392, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.38040565097658124, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How many invoices had the billing state of Wisconsin on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,WI), Invoice.Total),Invoice.BillingCountry))", "score": -0.38776420328783107, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,WI),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.07305283241888011, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.49054838393975064, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Address))", "score": -0.5167327608131923, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.557587834844417, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Country))", "score": -0.5684817900230847, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Country))", "score": -0.6667406619482609, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.6768000975782036, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.7016044289597881, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.750130520338973, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.7598030863215072, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Invoice.CustomerId))", "score": -0.902021674532254, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.902504932470698, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.LastName))", "score": -0.9102297619914327, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.9119687662478747, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.9859773415439553, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.3833982233814847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.3875812483913493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.3923408446950222, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,>=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.4190855477250173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,>=,AB),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.4232685727348819, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Track.TrackId),Invoice.Total)", "score": -0.4237495769729498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Track.TrackId),Invoice.Total)", "score": -0.42793260198281435, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Track.Name))", "score": -0.43377672084170626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.4351340590749185, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Track.Milliseconds))", "score": -0.4474969948132639, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,>=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Track.TrackId),Invoice.Total)", "score": -0.4594369013164824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,>=,AB),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Track.TrackId),Invoice.Total)", "score": -0.4636200317714891, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.46663771793036657, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,>=,AB),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Track.TrackId),Invoice.Total)", "score": -0.4708216059685347, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingState,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,AB), Employee.HireDate),Invoice.Total)", "score": -0.47446504841525416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1059338113154144, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1274480845333401, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.1508593441970854, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.24153296434295488, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Genre.Name,!=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26245966287953587, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),Genre.Name,!=,Drama),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2769674146502961, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.292374236588758, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.29793113971918544, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3103600612107595, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Drama),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3298915996989588, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Drama),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3336257249294912, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.341931574019125, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Genre.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3521282487958226, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3532359369257031, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different media types are tracks, other than Give Peace a Chance, that belong to the Drama genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.372067991704007, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Name,!=,Give Peace a Chance),Genre.Name,=,Drama), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.18525681588444576, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.1963530146538729, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.25163069284846146, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2713625922065904, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.28544343062012895, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,>=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29481713782907293, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,>=,1973-07-01 00:00:00),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29666327846646773, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2967755205145259, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,>=,1973-07-01 00:00:00),getData(Invoice),Invoice.CustomerId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2991357218654055, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.TrackId,<=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29989512885653413, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3058501478051232, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30672884777814946, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,1973-07-01 00:00:00),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3076962842266439, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,1973-07-01 00:00:00),getData(Invoice),Invoice.CustomerId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3101687276255816, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>=,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Employee.EmployeeId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3278390224139123, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22406696268552448, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2256124087671869, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2287310867794322, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2597303788737982, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2612758249554606, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2643945029677059, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2729989413095132, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2745443873911756, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2766134762251327, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2776630654034209, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2781589223067952, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2812776003190405, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30866236663495417, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3092026091283051, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Whats the billing addresses of tracks sold with a different byte size than 475656544?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,475656544), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3102078127166166, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,475656544),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.33902086181614915, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.36500871567409815, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3791110731671163, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37943845508035623, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Playlist),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.39121065988938597, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.39389681405092253, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.40281303177357963, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.404680126267229, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(InvoiceLine),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.4055798987974184, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Playlist),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.40599640077319227, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.41096266187065345, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.41297368837088466, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Track.TrackId),Invoice.Total)", "score": -0.41510396046404335, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.4183768015652332, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.42208705039982475, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.013693943782347366, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7461231241801874, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7617356447319023, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8695830790148211, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9937297701311882, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.023047310284048, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -1.0729694943832102, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.1146873527352044, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.189927943923883, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.2073668621846136, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Invoice.BillingPostalCode))", "score": -1.2349509283291253, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.2729796735245262, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.3077451751517681, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -1.3182818294144703, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.3183769369918616, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.1852540639426759, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2106059619865199, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2183483235229498, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.23265728482889297, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.25672756442209566, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.25800918287273694, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.26600512735839665, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2688394785227313, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.28029527443079305, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.30444648500618665, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.30564718119647855, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3059773370478989, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.31525488344038943, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3364572835582258, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3395996380419343, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,India), Customer.Fax),Customer.Fax))", "score": -0.1489984175132122, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.Fax),Customer.Fax))", "score": -0.278798811690649, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))", "score": -0.2897345950768795, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,India), Customer.Fax),Customer.Fax))", "score": -0.31681226994260214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,India), Customer.Fax),Customer.Fax))", "score": -0.3198971083329525, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,India), Customer.Fax),Customer.Fax))", "score": -0.3566569616959896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,India), Customer.Fax),Customer.Fax))", "score": -0.3592379024194088, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,India), Customer.Fax),Customer.Fax))", "score": -0.47960387970670126, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,India), Customer.Fax),Customer.Fax))", "score": -0.5348746707604732, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,India), Customer.Fax),Customer.City))", "score": -0.5600410146580543, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,India), Customer.Fax),Customer.Fax))", "score": -0.5639443924592342, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.CustomerId,!=,India), Customer.Fax),Customer.Fax))", "score": -0.6095132162736263, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,India), Customer.Fax),Customer.Fax))", "score": -0.669092886702856, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.Fax),Customer.City))", "score": -0.6898414088354912, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.City))", "score": -0.7007771922217216, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.2513369999915085, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.2549387596636734, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.33621085510549165, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.382883020499321, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Customer.Phone),Employee.Phone))", "score": -0.3862575970679245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.3864847801714859, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.FirstName,!=,Margaret), Customer.Phone),Employee.Phone))", "score": -0.3898593567400894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Customer.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.46775687561330415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.FirstName,!=,Margaret), Customer.Phone),Employee.Phone))", "score": -0.47113145218190766, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.47367698774633027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Milliseconds,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.4772787474184952, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.5005965314894638, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,!=,Margaret), Employee.Phone),Employee.Phone))", "score": -0.5041982743978224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Margaret), Customer.Phone),Employee.Phone))", "score": -0.5178036008119307, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}, {"orig_question": "what are the different phone numbers of the empoyees except those whose first name is Margaret", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,!=,Margaret), Customer.Phone),Employee.Phone))", "score": -0.5214053604840956, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))", "score": -0.1478696113663318, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,USA), Customer.Email),Customer.Email))", "score": -0.17186667977148318, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,USA), Customer.Email),Customer.Email))", "score": -0.23436286507421755, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,USA), Customer.Email),Customer.Email))", "score": -0.41403023360544466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,USA), Customer.Email),Customer.Email))", "score": -0.4460876418488624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,USA), Customer.Email),Customer.Email))", "score": -0.47008471025401377, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,USA), Customer.Email),Customer.Email))", "score": -0.5139345323877933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,USA), Customer.Email),Customer.Email))", "score": -0.5325808955567481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,USA), Customer.Email),Customer.Email))", "score": -0.548956850750983, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Employee.Email))", "score": -0.5674389751839044, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,USA), Customer.Email),Employee.Email))", "score": -0.5914360435890558, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,USA), Customer.Email),Customer.Email))", "score": -0.6337155496912601, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.CustomerId,=,USA), Customer.Email),Customer.Email))", "score": -0.644562045319617, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,USA), Customer.Email),Employee.Email))", "score": -0.6539322288917901, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Email addresses from customers living in the USA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Album.Title))", "score": -0.679695740549505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.025749688275469747, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7257653708614581, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7403791940338642, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.853729828465945, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8745526380090031, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9001817032069417, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9695876514492173, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.9709207981623809, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.9728219407023221, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.0116056668142739, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.1286093225551435, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.1372937230904465, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Invoice.BillingPostalCode))", "score": -1.1836382128294043, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2157610034570716, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -1.260825986694002, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11584972871009987, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.11751537666188482, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13568044937747303, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15522973486467145, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16685757280357313, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16929860877726516, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.17393450885329018, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17642564289225632, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19041905609023446, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.20427776244989865, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.22986788811094339, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2298745229594216, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.24963757297897102, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.26575096866262793, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2662747914619321, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.08571901307808343, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Regina Spektor),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.10494810201997853, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Regina Spektor), Genre.Name),Genre.Name))", "score": -0.12870163181884306, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Regina Spektor), Genre.Name),Genre.Name))", "score": -0.15400185302942543, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Regina Spektor), Genre.Name),Genre.Name))", "score": -0.20752119049351428, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Regina Spektor), Genre.Name),Genre.Name))", "score": -0.23102146207042218, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.23583415307892822, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Regina Spektor),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2550632420208233, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.32216105981093146, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Regina Spektor),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.34278006071537326, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3729205703807815, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Regina Spektor),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3737072213294938, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3816602032826396, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Regina Spektor), Genre.Name),Genre.Name))", "score": -0.3921385631820701, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres used in tracks that are in an album of an artist with another name than Regina Spektor?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.GenreId))", "score": -0.40867300723451483, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Regina Spektor),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.14528297071445986, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.16546442819640114, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,Do what cha wanna),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.20981755217358822, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Do what cha wanna),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.22474727156276925, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.24782083159421034, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.26800228907615165, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.277119698253019, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.29204941764220005, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.2977494824610771, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.31793093994301835, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.35561425377903266, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Do what cha wanna),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3670966930100611, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Genre.Name,=,Do what cha wanna),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3820263880334626, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,Do what cha wanna),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.38754049130226736, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,Do what cha wanna),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.39852759097010504, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.08948627972643482, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.23583683572987976, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Composer,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.2939570711706025, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.3006881930715715, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.309018760605498, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.3262673690434692, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Milliseconds,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.33673653984448254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.34198950564026925, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.35633153489134795, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,=,Milton Nascimento Ao Vivo),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.36423548123389865, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.36561424038773294, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.3667124647694507, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.387132379555533, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,Milton Nascimento Ao Vivo), Genre.Name),Genre.Name))", "score": -0.3877267540972184, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names of tracks in albums with a title different than \"Milton Nascimento Ao Vivo\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4081375978666776, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Milton Nascimento Ao Vivo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.16280317217024276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.19105201870115707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.2894754400840611, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,!=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.3177242866149754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Address),Customer.FirstName))", "score": -0.43666457667859504, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564), Customer.Address),Customer.FirstName))", "score": -0.46491342320950935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,+55 (11) 3033-4564),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.5571487745041177, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,+55 (11) 3033-4564),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.5597155201945607, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,+55 (11) 3033-4564),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.5629894085302272, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,=,+55 (11) 3033-4564), Customer.Address),Customer.FirstName))", "score": -0.5633368445924134, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.5805644514402957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,!=,+55 (11) 3033-4564), Customer.Address),Customer.FirstName))", "score": -0.5915856911233277, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))", "score": -0.60881329797121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.Address))", "score": -0.671646198759845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer that has the fax number +55 (11) 3033-4564?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), InvoiceLine.UnitPrice),Customer.FirstName))", "score": -0.6718811500250013, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.37812728961489483, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.3982661046602516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.43543632110140607, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.4493772514679222, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.45914710839770123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.46951606651327893, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.47567571481249615, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5066862829544334, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5303970702507286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Fax,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5444321759559898, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5469256766655235, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.575967145762661, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5828315556564121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5829845626421957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5955468077727346, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.08237683249030328, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.08616022404720897, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Milliseconds)", "score": -0.1965515420678111, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Milliseconds)", "score": -0.2401463345384512, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Milliseconds)", "score": -0.2820112649372268, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.30307013733608734, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Milliseconds)", "score": -0.3312422900258194, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3474232226566008, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3484191180736437, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3700664039080135, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.38584431442917905, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4126730775829875, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.44138943841487926, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4444646523068899, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average duration of tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.4584061787702878, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.033445657177757236, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5422162094571412, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5702448388136262, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.5957187208433737, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6118008898353425, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6240936110987728, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6471573187201468, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6753527735570916, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.684908671367651, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Genre),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6945287334118739, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7056868776687429, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7152943636338761, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7207190007419323, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.Name,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7290807572664212, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7716204854637863, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.21727916344389087, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.25722989186033374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.2648463372825063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.27176859720930224, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Stockholm), Invoice.Total),Invoice.Total))", "score": -0.36777539297327166, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Track.Milliseconds))", "score": -0.45843879624590045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.Total),Track.Milliseconds))", "score": -0.4983895246623433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Employee.HireDate))", "score": -0.5016124074099935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.Total),Track.Milliseconds))", "score": -0.5060059700845159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Track.Milliseconds))", "score": -0.5129282300113118, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Track.Composer))", "score": -0.5410774771808065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Stockholm), Invoice.Total),Employee.HireDate))", "score": -0.5415631358264363, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Stockholm), Invoice.Total),Employee.HireDate))", "score": -0.5491795812486089, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Employee.HireDate))", "score": -0.5561018411754048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the totals invoice from Stockholm?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Stockholm), Invoice.Total),Customer.Address))", "score": -0.578931999647466, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Stockholm), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.03603652548190439, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.45182614270743215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Phone))", "score": -0.4901947133257636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.LastName),Customer.Fax))", "score": -0.5121050175293931, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Phone),Customer.Fax))", "score": -0.5228893455132493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5351303095012554, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.City))", "score": -0.5572062186911353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5676357025295147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.PostalCode),Customer.Fax))", "score": -0.5840243693455704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6210875982433208, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6237808937221416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Genre.GenreId))", "score": -0.6325414828970679, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.PostalCode))", "score": -0.6639702968313941, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Address),Customer.Fax))", "score": -0.6793208714589127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.City),Customer.Fax))", "score": -0.6870931979283341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11293389693381978, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.12132677274829931, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16695410179590245, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18409302897580726, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2113185386968493, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2740847949243573, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.31189046964102835, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3367636541099634, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3602504587102688, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38991104593781917, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39078385897204604, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Science Fiction), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39372519129741973, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.404193265892914, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.4142828202812662, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43722104248630983, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.09125065648368036, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.30431554885490186, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.315677283642799, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos), Track.TrackId),Track.Bytes)", "score": -0.3249115006455739, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.48517055312733154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.48622082779093034, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.5409711583833996, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5472672826759141, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5693960082428874, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5695965341780809, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.600997999680369, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.6085027522279876, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.6087032870926854, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.6110983018191728, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.6137995131783921, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.11747646507499654, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.19433773174827565, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.1957760835837962, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.22037867345142698, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.25568981841626476, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2699688100855674, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2726373502570753, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.2872751273244166, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.3087304853507792, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Track.Name))", "score": -0.321960177027515, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Genre.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3343776660433261, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3482684285943671, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.3692734733773129, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3760104240955744, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.37719917468557956, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2905325320494746, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2969593956675593, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Genre.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.30140890878551546, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.30512585207524584, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Track.Name,!=,The Police Greatest Hits),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3057715580791316, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Genre.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.30783577240360016, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Track.Name,!=,The Police Greatest Hits),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.31464718797044067, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Genre.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3157608549500085, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.320057140274596, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Genre.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3246364848413176, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Track.Name,!=,The Police Greatest Hits),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.32813562235144106, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Track.Name,!=,The Police Greatest Hits),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33456249338347366, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),Playlist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33725271625968867, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.3389726076146442, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.34056611641757595, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.023878882682765834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Bernard), Customer.Country),Customer.Country))", "score": -0.43530097701295745, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Phone))", "score": -0.5544363218796207, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Bernard), Customer.Country),Customer.Country))", "score": -0.5623699734424008, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.FirstName))", "score": -0.5750970202934695, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.FirstName),Customer.Country))", "score": -0.5864022481691791, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.State))", "score": -0.6039757091057254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.State),Customer.Country))", "score": -0.648886870170827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.6607446382258786, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Phone),Customer.Country))", "score": -0.6707039582979633, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Address))", "score": -0.6711218911659671, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Address),Customer.Country))", "score": -0.6757348287355853, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.6775700161670102, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Bernard), Customer.Country),Customer.Country))", "score": -0.7138993451808346, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Bernard), Customer.Country),Customer.Country))", "score": -0.7196936319087399, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.02038638194511055, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.1951169344227188, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21227386280286556, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.251294560552294, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.26023967855395086, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.3088927856639491, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Track.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.3299470457719893, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.3506094319568432, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.3519812694259594, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.3720670908536057, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.Name),MediaType.Name))", "score": -0.37924961281891095, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.4069799470431125, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.4070551369758651, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.4074688814546077, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which different media types do the tracks in the playlist On-The-Go 1 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),MediaType.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))", "score": -0.4155469681073969, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.2184601184708299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Customer.Address))", "score": -0.22134534090582747, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Customer.Address),Invoice.Total))", "score": -0.34265563458029646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Customer.Address),Customer.Address))", "score": -0.345540857015294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.Total))", "score": -0.3901845571381273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Customer.Address))", "score": -0.39306977957312483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.BillingAddress))", "score": -0.39445219009940047, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Invoice.BillingState))", "score": -0.41560987204138655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Customer.State))", "score": -0.5107027646881761, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Customer.Address),Invoice.BillingAddress))", "score": -0.518647706208867, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.Total),Employee.Address))", "score": -0.533480858503026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Customer.Address),Invoice.BillingState))", "score": -0.5398053881508531, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingState),Invoice.Total))", "score": -0.5443694350105943, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingState),Customer.Address))", "score": -0.5472546574455919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Where were the invoices with the total of 1.99 or smaller issued? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5661766287666978, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.026921263117401395, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.4950536253527389, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.Address),Customer.FirstName))", "score": -0.515381572455226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.5458196972634173, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.5610433878973708, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.5807221258562982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.5867838400516836, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.5897959067032355, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.Address))", "score": -0.5936742228586809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.6210829081610427, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.6300173037816421, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.Email),Customer.FirstName))", "score": -0.6443541922271834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,=,R3L 2B9), Customer.FirstName),Customer.FirstName))", "score": -0.6691058936194167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.LastName),Customer.FirstName))", "score": -0.6888217606247053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of the customers which have the postal code  R3L 2B9 ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.695967689495106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,R3L 2B9), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.03741332322351809, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.38561901908360596, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.Address))", "score": -0.4817616650088894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (780) 428-9482),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5021283436220827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.5207380400224793, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.526454074853637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Track.Milliseconds),Employee.Address))", "score": -0.5798561581596005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Phone,=,+1 (780) 428-9482),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5856942353838978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.Address))", "score": -0.6018347152694332, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Phone))", "score": -0.6090442709810304, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Phone),Employee.Address))", "score": -0.6412680753692257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Title))", "score": -0.6509145669824647, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.6570724294706451, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.State))", "score": -0.6633647255785036, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.6798217342420685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.16541863292261, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2260914885571034, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23058435595490812, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23763448153089103, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,S\u00f8nder Boulevard 51),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2653573697763952, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,S\u00f8nder Boulevard 51),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2930143652103499, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3028002045631891, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3256470086762511, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3274816002849143, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Track.Composer,!=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3391941964410901, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.34014343323649615, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3533039949851455, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36213609986601897, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3684945625877597, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38663789949626476, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.06130751243108534, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.State),Employee.Address))", "score": -0.38196942044669413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4058992389800551, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Title,=,Sales Manager),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4237670924189363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4518690830478293, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4526821026578219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.47434245220224014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.CustomerId,Customer.SupportRepId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.47515547181223267, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Title,=,Sales Manager),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.49772028850836364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4984982385602715, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.HireDate),Employee.Address))", "score": -0.498525111212075, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.CustomerId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.4993112637079412, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.5152885100444358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Track.Composer,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.516101573402078, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Phone),Employee.Address))", "score": -0.5281926674979331, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.08198477119373407, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3306241088858954, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.35029263672082256, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.35681455446712157, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3895953321056489, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.4395240642517307, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2010-11-19 00:00:00), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.44903401549823746, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.4501733026996489, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,!=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.48054284697635524, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.48721224345276776, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,2010-11-19 00:00:00), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.488336720240412, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,2010-11-19 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.49904195780086136, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,2010-11-19 00:00:00), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.5049579484800791, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.5175668651598915, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,!=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5260995051954597, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.15942559078344135, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,<,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.16632542940761574, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,Sales Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.19711900842435667, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.21705556795484965, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,<,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22395540657902402, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.282580143589636, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,<,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2894799822138104, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.29944828699965437, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,<,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.30634812562382874, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,Sales Manager),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.32619676238874773, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3284794133156315, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,<,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3353792519398059, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3465250763505082, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,>,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35245933191430734, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.353424978491228, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.05535117062222105, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.5149996622087977, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.528190926836813, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.5721128382529763, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6945455360726476, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.6979486256169751, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.748612005750836, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.LastName))", "score": -0.759293499734427, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.7757676204092865, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.8017842387914925, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Country))", "score": -0.8126179884080997, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.8180707314620516, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8187956060345343, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.8341559682179337, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.8838406403798524, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.1967676111591108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.LastName,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.24773288307189129, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.2541112593678797, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.30250201301654384, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3050765312806602, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.3141455046043143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.31532868740313874, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3193395741466331, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.32697217899090913, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total)", "score": -0.33073957537461957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.33209780729420413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3322527893652809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.LastName,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.33653585038828016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Delhi), Invoice.Total),Invoice.Total)", "score": -0.34238306696239, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total)", "score": -0.3435662497612144, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.04558574891141989, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.557730382148607, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.709053509975424, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Address))", "score": -0.7163901264906856, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.716581331698108, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Genre.GenreId))", "score": -0.7759990998837832, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.8347675020872882, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.8923603366634593, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.CustomerId))", "score": -0.9184551897114603, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.9497462510088376, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -1.009072721569731, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Address),Customer.Phone))", "score": -1.0753397309685395, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Invoice.BillingCountry),Customer.Phone))", "score": -1.1030945641554641, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Employee.Phone),Customer.Phone))", "score": -1.1089843476835244, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -1.1196258041295528, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.17750963132003755, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.18135522426179784, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22542895312635064, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.23013341366069529, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.24466612237327318, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.2537803625066401, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Invoice.BillingAddress))", "score": -0.2576259554484004, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.26650477402872974, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.27745659153911795, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.28130218448087824, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,1033 N Park Ave),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2953419487429843, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.29937975711990034, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Genre.Name),Invoice.BillingAddress))", "score": -0.304424089267363, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.3209368535598757, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.3230602038896196, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.0540338473748298, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5838663274309398, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6155348246275132, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6204428563105854, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Customer.LastName,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.622847724390132, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6597238257359329, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6960751834368495, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Customer.LastName,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7033883009704812, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.7264806675994746, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7301736658329042, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7694542777181359, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),InvoiceLine.Quantity)", "score": -0.7934814529221754, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.8481412140785098, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8590094950431741, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Customer.LastName,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8663223222154552, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.05371088338415628, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2648065602431609, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28370400644751265, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28512437119079326, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Alternative),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2948865379073411, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.29981303054130987, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.3097928953384203, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Alternative),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3137340459431669, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Alternative),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3368446848522023, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,!=,Alternative),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3556922060686709, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Customer.Email),InvoiceLine.UnitPrice)", "score": -0.3624296372509115, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceDate),InvoiceLine.UnitPrice)", "score": -0.36776259528990507, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38336074167871514, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.39591167641342295, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4003845923736573, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.2879616823471102, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.29861625090269905, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.2993615485252046, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Invoice.CustomerId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.30723624689811, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.30831838856381943, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3098242689014325, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.31001612361780373, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(getData(Employee),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.31753101684233315, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3204788374570213, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32122413507952685, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(getData(Customer),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.32166179289614305, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.32358654695116984, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Invoice.CustomerId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3290988334524323, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.331878710172126, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(getData(Employee),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.33279917522968355, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.07306621904841433, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.Total),Invoice.Total)", "score": -0.3496406213995962, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), Customer.Address),Invoice.Total)", "score": -0.5289051375871197, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.5917405800067759, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6832052362422455, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7371125668611173, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.Total),Invoice.Total)", "score": -0.8683149823579577, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.8825111976985835, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.906554206178537, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.Total,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),Invoice.Total)", "score": -0.9606411266887792, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),Invoice.Total)", "score": -1.014548457307651, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.BillingAddress),Invoice.Total)", "score": -1.0164018501134984, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(InvoiceLine), Customer.Address),Invoice.Total)", "score": -1.0475794985454812, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), InvoiceLine.InvoiceId),Invoice.Total)", "score": -1.0597549744445245, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(getData(Invoice), Track.TrackId),Invoice.Total)", "score": -1.0615190490011828, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.07031590253586285, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.12269226509662554, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.2470233084631549, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.26841574335003054, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.27733628132705196, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.38018120126673716, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3808125843397922, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3892279330548566, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.4176492167143308, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.4182267493441183, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.42510273098144613, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.43440201353912944, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.4587932284606064, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,=,Jazz),Track.Bytes),Album.Title))", "score": -0.47338272428375694, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Album),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.4935036719582873, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.09995953837642446, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),MediaType.Name))", "score": -0.26100950414547697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Country))", "score": -0.368303467577789, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,71020-677), Customer.Country),Customer.Country))", "score": -0.3741495044318617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,71020-677), Customer.Country),Customer.Country))", "score": -0.42164647154719304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.44162336053877954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,71020-677), Invoice.BillingCountry),Customer.Country))", "score": -0.4602540203786846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Employee),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.46891714475713364, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,71020-677), Customer.Country),Customer.Country))", "score": -0.471718378799595, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Country))", "score": -0.5077509874940159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,71020-677), Customer.Country),MediaType.Name))", "score": -0.5102355881809615, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.5127544592859481, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,71020-677), Customer.Country),Customer.Country))", "score": -0.5305203476114647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.5329572922017288, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Employee),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,71020-677), Customer.Country),Customer.Country))", "score": -0.5331432086878717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.019942792227084283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.State))", "score": -0.4349632715820917, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.State),Customer.Address))", "score": -0.44258597642328823, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.6251233162838616, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.City))", "score": -0.6568854009747156, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.697744721408526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.7117950859028497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Employee.Address))", "score": -0.7226252710461267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Phone))", "score": -0.7236203109860071, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.7382426800686517, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Invoice.CustomerId))", "score": -0.7401137506603845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.774424249168078, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.7865518274265924, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.City),Customer.Address))", "score": -0.7971424177303561, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.FirstName))", "score": -0.8507464086651453, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.2153696064510683, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.2249861164562078, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.2612182603505099, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.28193943520164044, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.30061627555272724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3102327855578667, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3114305388114562, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.32068868183157356, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3210470488165957, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3334277482033427, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3390435248472523, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3430442582084822, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3464649495946784, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.3486600549949014, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Are there any orders placed for the tracks of Nicolaus Esterhazy Sinfonia?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),InvoiceLine.Quantity,=,Nicolaus Esterhazy Sinfonia), MediaType.Name),MediaType.Name))", "score": -0.37823530141377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Nicolaus Esterhazy Sinfonia),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.10153468533536893, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),MediaType.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19532490132687133, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),Track.AlbumId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2156067546806612, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Age Of Innocence),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23398522089909599, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23764890712965653, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Track.MediaTypeId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31709553474088686, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31780275481365766, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Customer.Email,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32494332591865976, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Track.GenreId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.327116292715864, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Age Of Innocence),getData(Track),MediaType.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3277754368905984, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),Track.MediaTypeId,Genre.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34026381149666984, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),PlaylistTrack.TrackId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3423675340711241, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Track.MediaTypeId,PlaylistTrack.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34347748946813855, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Age Of Innocence),getData(Track),Track.AlbumId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34805729024438825, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Track.Name,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35579416950138487, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12668295788821657, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14288287094524468, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2133897229664151, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2295896360234432, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2840285430871604, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3002284561441885, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3121887186473546, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Genre.GenreId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3254647739775665, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3295719484204976, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Genre.GenreId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3416646870345946, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Artist.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.366237541658561, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3665976282967888, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36800878045235397, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37073530816535893, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.37150923345260056, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01991770242871065, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5301442233306323, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7819613642096809, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.0085291279089519, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.Title), Album.Title),Album.Title))", "score": -1.026955082840428, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Album.Title,Album.AlbumId), Album.Title),Album.Title))", "score": -1.0746723463118777, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.0774688680571636, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0797873298786267, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -1.1399089528635753, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -1.1409605604077637, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.148081126248504, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Customer.PostalCode), Album.Title),Album.Title))", "score": -1.1510813872902417, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.2025487163473834, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.2202141393144732, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.2690915231728197, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Album),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14915653307721005, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.20316945261361505, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21825547818954646, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2220224346351831, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Album),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -0.22807933297772853, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2650497785990496, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27058472900729263, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28390276062061764, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2894377110288607, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -0.297178278090065, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3073135078934784, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31359062692003853, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3159538902248094, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.3223907129090525, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32616649880994036, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.HireDate),Employee.BirthDate))", "score": -0.28034443028579104, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,On-The-Go 1), Employee.HireDate),Employee.BirthDate))", "score": -0.3033718616092536, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Employee.HireDate),Employee.BirthDate))", "score": -0.3092235922469203, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Employee.HireDate),Employee.BirthDate))", "score": -0.3236542465800509, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Employee.BirthDate),Employee.BirthDate))", "score": -0.3304841923826198, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.HireDate),Employee.BirthDate))", "score": -0.33531681412345166, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.BirthDate),Employee.BirthDate))", "score": -0.33988868937614924, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.HireDate),Employee.HireDate))", "score": -0.34765869280284895, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Employee.HireDate),Employee.BirthDate))", "score": -0.34905708755369436, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,On-The-Go 1), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3519709416632048, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,On-The-Go 1), Employee.HireDate),Employee.HireDate))", "score": -0.36867545114118483, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Employee.BirthDate),Employee.BirthDate))", "score": -0.3703176832592521, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,On-The-Go 1), Track.UnitPrice),Employee.BirthDate))", "score": -0.37097560287726916, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Employee.HireDate,=,On-The-Go 1), Employee.HireDate),Employee.BirthDate))", "score": -0.3716915580819929, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.41368821648094817, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.058867813625715276, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10411859709537695, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11303383570620412, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19925375526585837, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20660156789531, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2227895680793544, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2400045411548193, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25341977734634724, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2579841825682031, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26076758997579885, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27956753771061355, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.2905467288276046, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29332915915825203, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30000270164837456, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30113877374785913, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.16117943565756615, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1704261692375794, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.1855306990082504, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.2069449416771611, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.22354435490291874, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Album.Title))", "score": -0.25280392591040757, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2884014814047881, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3060838864263562, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3188588557611201, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.32797045879813197, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.37407843318989287, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Bytes),Album.Title))", "score": -0.3757954314263019, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.38375067302263366, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.3961396021223032, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.4020984290448856, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.09151363506401965, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.3949426044260489, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6246440988866508, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.651856596105171, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6568371866710909, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.6961746792059208, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Customer.Address)", "score": -0.7098494368313987, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7282690254163446, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7332496159822646, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.7424549431211387, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.7474355336870587, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Customer.City)", "score": -0.7582295461661225, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7622912404598978, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.7650315952385262, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7672716040162204, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15455088401397682, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15660155784833507, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18185351198476662, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19194271899025944, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20583960214249541, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.21108071256926378, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.231091556278927, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23208987192204963, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Milliseconds))", "score": -0.2409782300264404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Invoice),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2793094611789324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.28922945360642566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Milliseconds))", "score": -0.2896910248998776, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29839245547650456, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30308634184299266, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Is there a track in the Heavy Metal Classic playlist that does not have a genre label?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Name))", "score": -0.3138583675560764, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))", "score": -0.04787718226725701, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.City),Customer.City))", "score": -0.22245370318705682, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,>,21000), Customer.City),Customer.City))", "score": -0.5025079893093789, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Employee.City),Customer.City))", "score": -0.573455843157717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.PostalCode),Customer.City))", "score": -0.587100121207186, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Fax),Customer.City))", "score": -0.5899791447591269, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.Fax))", "score": -0.6076679960970068, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.PostalCode))", "score": -0.6338365213159705, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Company),Customer.City))", "score": -0.6670542685460532, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.State),Customer.City))", "score": -0.6753101078938926, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Employee.City))", "score": -0.7091444269899512, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,21000), Customer.City),Customer.City))", "score": -0.7447939987905556, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Employee.City),Customer.City))", "score": -0.7480323640775168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.State))", "score": -0.7519840137247229, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}, {"orig_question": "Whats the name of the city with the postal code of 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.PostalCode),Customer.City))", "score": -0.7616766421269858, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.052421747619266906, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.1881278714027486, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.2207755705026863, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2237236830344611, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.24600076206295685, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2585221317708352, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2749332778778979, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3425076783172464, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3504839251772237, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.36780446690030055, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.37155337092182245, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.37539390449378757, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3946594399043393, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.4052666952747906, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.PlaylistId))", "score": -0.40614695578359944, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.035767655943345744, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Country),Customer.Phone))", "score": -0.3175488357737777, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Address))", "score": -0.48269251280726166, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Country))", "score": -0.5351746707528946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Fax))", "score": -0.5442231922716019, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Address),Customer.Phone))", "score": -0.5918778424456832, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.5973807341724751, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Genre.GenreId))", "score": -0.6144364505380508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.6405162579685566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Fax),Customer.Phone))", "score": -0.6492215042308089, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.FirstName),Customer.Phone))", "score": -0.6793068294718978, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.6866624123722431, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.7453155882030842, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.7636683351665852, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Country),Customer.Address))", "score": -0.7644736926376936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),Customer.State))", "score": -0.17991966777844937, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), InvoiceLine.UnitPrice),Customer.State))", "score": -0.3483904006461671, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.State))", "score": -0.43382068002028973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Address),Customer.State))", "score": -0.4517291935662797, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),Employee.HireDate))", "score": -0.45425339066787274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Company),Customer.State))", "score": -0.5112162383775285, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),Customer.Email))", "score": -0.5146385284642747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),InvoiceLine.UnitPrice))", "score": -0.5163858088235429, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Invoice.Total),Customer.State))", "score": -0.518034532902675, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Employee.HireDate),Customer.State))", "score": -0.5339366945008805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),Customer.State))", "score": -0.5385321094945539, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),Customer.Address))", "score": -0.5444418939332536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.State),Customer.City))", "score": -0.5780649336556962, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6136331335613202, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What's the e-mail address of the customer with the phone number +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), InvoiceLine.UnitPrice),Employee.HireDate))", "score": -0.6227241235355905, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.1905298275891698, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.21524973490446805, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.21867104918860428, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.22502528564231472, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.23028609223519297, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.24339095650390252, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.249745192957613, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2531665072417492, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.25500599955049125, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2647815502883379, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.27788641455704743, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.28950145760363616, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2928388969975829, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3417569826971114, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3522250448693624, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.06650374731907505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.FirstName),Track.Name))", "score": -0.30325281522164005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.3410079292480077, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.3934446433086123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.48185877590367454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.FirstName),Customer.FirstName))", "score": -0.48229774734863895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.562472567846271, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Track.Name))", "score": -0.5777569971505727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.5972102740306582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.FirstName),Track.Milliseconds))", "score": -0.5980038633097138, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.6091296532649721, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.6111123421687807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,+1 (403) 262-3322), Employee.FirstName),Track.Name))", "score": -0.6301937112111773, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.6643805363673891, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees whose fax number isn't +1 (403) 262-3322?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))", "score": -0.667948825237545, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-3322), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.026974127405992476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.38136981684874627, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.5233403619022283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.City))", "score": -0.5419290231184277, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.City),Customer.PostalCode))", "score": -0.5587834324796859, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.581400531122199, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5833732651190076, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.6539759214610967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),InvoiceLine.InvoiceLineId))", "score": -0.6786735223249707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.6851706083507452, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.7233020772800955, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Email),Customer.PostalCode))", "score": -0.7402833309133712, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.7446237381191168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Album.Title))", "score": -0.7668631838278088, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.7709250028819952, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.11636675683033926, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11740926664731774, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15127209683946205, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.1837025197648835, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18493021977789154, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19635724234619134, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2242921794625653, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.2367324824058426, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.23703831976711395, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.2417312558285384, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.24276884448627634, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24867719905488664, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25281996550016295, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.26941153893789477, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.2764719173540135, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.07696780899000584, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 456-9986),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.1394639627931966, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.15361703697201282, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.19672634879068812, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.2203172176760846, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.23313854365512066, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.23677923762329994, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.243539877996663, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.24783288420740848, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 456-9986),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.2614871963303655, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.272569962034214, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Phone,=,+1 (403) 456-9986),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.28746530237309326, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.2904009225964973, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,+1 (403) 456-9986), Track.TrackId),Track.Bytes)", "score": -0.31000986836421063, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold by the employee with the phone number +1 (403) 456-9986?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 456-9986),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.31374598427361783, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 456-9986),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.24742977468370944, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2777517795105358, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Company,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.27840130823948245, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Country,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28458535169193905, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Company,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3106245991893352, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.Company,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.310680489212409, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Country,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3168086426417918, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.Country,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31686453266486553, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32481657338230935, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32570348212738937, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.Company,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3429037801622617, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.Country,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3490878236147183, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.349605041441493, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.35049195018657303, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Company,=,Lyon),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3548608492333122, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.11248867555987344, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.16881728311177713, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1694522053784594, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.20322403989816795, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2231307059555863, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.22750718990285923, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Invoice.Total)", "score": -0.24263341927610285, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2536431422353856, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2790932739979979, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.28451477064298364, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2973896300478112, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3005011664374247, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Invoice.Total)", "score": -0.3014839798936461, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Invoice.Total)", "score": -0.31445635565313107, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.340404050871155, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2117971043115936, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21279046703769752, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2655753390162272, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.27353642213298, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2773773783451709, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2789324588021171, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.2928745932766404, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.293316532108014, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Invoice.Total,=,6.94),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2979146736334344, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.29827062994577747, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.31116972132857307, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Playlist.PlaylistId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.31409467651906753, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.32099315145396795, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.326261724085296, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.344789000979458, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.24655993493479164, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.3419028506566034, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.PostalCode),Employee.PostalCode))", "score": -0.3946125786622592, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.PostalCode),Employee.PostalCode))", "score": -0.3999549466249459, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4080477403166836, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.41892930362540653, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.4240301959460831, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Track.TrackId),Employee.PostalCode))", "score": -0.43526319892084664, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Employee.BirthDate),Employee.PostalCode))", "score": -0.43775816458953587, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Employee.Address),Employee.PostalCode))", "score": -0.44338671281714537, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.PostalCode,!=,BC),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.4439891236236966, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Customer.PostalCode))", "score": -0.4461995892644979, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Track.Bytes))", "score": -0.44882471404706764, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.PostalCode,!=,Chase),Customer.SupportRepId,Employee.EmployeeId),Employee.PostalCode),Employee.PostalCode))", "score": -0.5768481180287268, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),filter(getData(Employee),Employee.PostalCode,!=,Chase),Customer.SupportRepId,Employee.EmployeeId),Employee.PostalCode),Employee.PostalCode))", "score": -0.5920753161175966, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.14568784278012084, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19042488944215152, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.20376566964872936, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.20728331300402866, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.21385621670892668, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.24038635873210004, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.2522228229417287, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.25600157730667633, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.2754516869328345, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.2834325864181796, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.3019818708776318, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,683 10 Street SW),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3025419891552034, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.30940543562509865, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.3121098755400289, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,683 10 Street SW),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.34182572938811795, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.1766151984196504, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Canada), Invoice.Total),Track.Milliseconds))", "score": -0.19885313294026152, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.21924294359961688, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Canada), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.24904437492040093, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.28874583346488886, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Canada), Invoice.Total),Track.Milliseconds))", "score": -0.340245325911554, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Canada),Invoice.Total),Track.Milliseconds))", "score": -0.36958298455966976, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.State,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.37691020804537784, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Composer))", "score": -0.38256737831115895, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Canada), Track.Milliseconds),Track.Milliseconds))", "score": -0.38534920356255215, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Canada), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.3904365678916934, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Canada),getData(Invoice),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3930473235220053, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Canada),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4126089261862423, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Composer))", "score": -0.4251951234911254, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.State,!=,Canada), Invoice.Total),Track.Milliseconds))", "score": -0.43091013990476096, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.09313875534031305, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.18366632921889384, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.21211293488562627, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.2230340211266221, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.30264050876420706, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.30920226244713694, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3152452247066268, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.3234609775198502, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Album.AlbumId),MediaType.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.34946218352755876, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3570732762349104, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.Name,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.359789123859758, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,MediaType.Name), Album.Title),Album.Title))", "score": -0.36516895285538176, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.36614577406499477, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3715182020770415, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.3862919963800889, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.04625091226080258, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Customer.City))", "score": -0.3353229396907409, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.36832051434794266, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,>,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40192164936343033, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.5069520132547041, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5726605587569793, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.629783953905644, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.649062976373898, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingState),Invoice.BillingCity))", "score": -0.6552594559198042, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCity),Customer.City))", "score": -0.657392541777881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.6661618881789764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,>,89503), Invoice.BillingCity),Customer.City))", "score": -0.6909936767933686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.InvoiceId),Invoice.BillingCity))", "score": -0.7031130449777265, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Customer.Fax))", "score": -0.7037429743377288, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingState))", "score": -0.7336821489898284, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19549988235475366, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22702514318197276, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2516703315421289, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Artist.Name,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.258257698108074, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28328850402603056, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Artist.Name,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28978295893529304, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.29559603782504185, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3103804118435366, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3110060454521783, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Artist.Name,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31442814729544927, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3148137648532497, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3230283190390059, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.3271212986522609, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33945895321340586, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average cost of tracks sold by Andrew?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Invoice.BillingCity,=,Andrew),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34190567267075567, "correct_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Andrew), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.09685203548514569, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.6171235662511172, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7065411212317358, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.741858572724588, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7785198028926796, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8233331989670074, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8245826642097307, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Employee.LastName),Artist.Name)", "score": -0.8662902045066132, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9813388905740669, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -0.9816277509596816, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Employee.LastName)", "score": -0.9911964016815211, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Genre.Name)", "score": -0.9922926310541648, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Customer.Fax),Artist.Name)", "score": -0.9953248938830168, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Album.ArtistId),Artist.Name)", "score": -1.0188593986370196, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.ArtistId),Artist.Name)", "score": -1.0781978163345878, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.HireDate),Employee.Title))", "score": -0.23502225660195109, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.HireDate),Employee.HireDate))", "score": -0.3079544403444743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.Title))", "score": -0.31907064699043985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.HireDate),Employee.BirthDate))", "score": -0.34092097960819956, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.HireDate))", "score": -0.39200283073296305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.39371084653248545, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.BirthDate))", "score": -0.42496936999668833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.HireDate))", "score": -0.46664303027500864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.HireDate),Employee.Address))", "score": -0.4852716573368525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.HireDate),Employee.Title))", "score": -0.48568399854411837, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.4996095695387339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Address),Employee.Title))", "score": -0.5427631684433436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.Title))", "score": -0.551145634133718, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.HireDate),Employee.HireDate))", "score": -0.5586161822866416, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.Address))", "score": -0.5693200477253413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.036493744250055776, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1697614083802285, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.2248648644585005, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.2594268433420824, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.32701861436714785, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3573491626666389, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.39646238410137546, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.3981218281617244, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.4039535913624925, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.4379534704992231, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Genre.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.47243485798592927, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4896293648185869, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.49422065484996613, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.5003930457186799, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.5098505503173488, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,=,238759),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al), Track.Name),Album.Title))", "score": -0.49440723060581954, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,!=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,238759), Track.Name),Album.Title))", "score": -0.5005377499935044, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,238759),filter(merge(getData(Album),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,238759),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.5116085927127227, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,238759),merge(filter(getData(Album),Track.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.5120812597257431, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al), Track.Name),Album.Title))", "score": -0.5185184465605479, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),filter(merge(getData(Album),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,238759),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.5218370379551963, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(filter(getData(Album),Track.Name,=,238759),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.522309782940181, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,!=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,238759), Track.Name),Album.Title))", "score": -0.5246489659482328, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,238759), MediaType.Name),Album.Title))", "score": -0.5317889252875382, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,238759),merge(filter(getData(Album),Track.Name,=,238759),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.5328003952558026, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,238759),filter(merge(getData(Album),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,238759),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.5363342674787105, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,!=,238759),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,238759), MediaType.Name),Album.Title))", "score": -0.5379193334285985, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Track.Name,=,238759),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,238759), Album.Title),Album.Title))", "score": -0.5379833439417291, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(filter(getData(Album),Track.Name,=,238759),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.5430289303895217, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}, {"orig_question": "Which songs performed by Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al are not 238759 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),filter(merge(getData(Album),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,238759),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.543960401882191, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Charles Dutoit & L'Orchestre Symphonique de Montr\u00e9al),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds,!=,238759), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.03742445791431237, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Milliseconds))", "score": -0.3619951137370663, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.46563703585707117, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,2950224), Track.Composer),Track.Composer))", "score": -0.4716974852635758, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Milliseconds),Track.Composer))", "score": -0.5169712546776282, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Track.Composer))", "score": -0.5394265181685415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.541624010230354, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,2950224), Track.Composer),Track.Composer))", "score": -0.5543369708611863, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Invoice.BillingAddress))", "score": -0.5546044536895351, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Track.Composer))", "score": -0.606197153563968, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6073623517208, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6083946456257805, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Invoice.BillingAddress))", "score": -0.6095598437826125, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Track.Composer))", "score": -0.61158420590568, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6137816337304374, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.06622948391156766, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.09655191252864989, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Miles Davis),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1334057448814971, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2925403567562227, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.3069140933901168, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31210468096223143, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.4387784978946416, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4496410863341873, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.454060255709043, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.Name), MediaType.Name),MediaType.Name))", "score": -0.46752957195536665, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.4731263529010061, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.49920206757451274, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.5017648845411359, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.502342357894738, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Miles Davis),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.5174582447114706, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.16135607859724202, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.17936844128977564, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.MediaTypeId,MediaType.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24900092634009688, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30668946235371763, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3081599917521609, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.3359879223844688, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33647943271299086, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33861318092976067, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3473364053761363, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35872368746056904, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,MediaType.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3611701270191455, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3628016756169289, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.36957092083841764, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3707568357423447, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}, {"orig_question": "How much is the invoice total of Protected MPEG-4 video file media types?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Invoice.InvoiceDate),InvoiceLine.UnitPrice)", "score": -0.37083307034176133, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))", "score": -0.017906104997564398, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.47103832932756085, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.476746696088541, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Genre.GenreId,Track.GenreId),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))", "score": -0.49830542654589366, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Genre.GenreId,Track.GenreId),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))", "score": -0.5111092097906443, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5184777185606988, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Artist.ArtistId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5201504720089976, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Album.AlbumId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5354581664668057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Genre.GenreId,Track.GenreId),Genre.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))", "score": -0.5391643451751362, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5393148325882988, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Name,=,Turn The Page),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5447409344490677, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Turn The Page),Genre.GenreId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5515251985988427, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Name,=,Turn The Page),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5589277744123786, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Turn The Page),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5810458550604567, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track named \"Turn The Page\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Turn The Page),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5841438755386789, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Turn The Page), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.08194022819923642, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.09188888516440316, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.23468982077178813, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2759691153295145, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2918125866176689, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3168667838411465, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3283504639780188, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(filter(getData(InvoiceLine),Invoice.BillingAddress,>=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3392460094480939, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3446591253105555, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3526627011383744, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36767000799101257, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3690835261435911, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37035912710208707, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(filter(getData(InvoiceLine),Track.Composer,>=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37783917440783993, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39363291616594437, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "who is your daddy", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.3445096519266651, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.42869867710818677, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Composer),Track.Milliseconds))", "score": -0.4396686408254027, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4750022704556773, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4784946626753619, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.494363311240351, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5399168310387811, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Invoice.Total),Track.Milliseconds))", "score": -0.5422797653409361, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.5434958789082884, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Composer),Track.Composer))", "score": -0.5687630030843138, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.6000248644086241, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Composer),Employee.HireDate))", "score": -0.6153534505101561, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6205367464707224, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>=,None), Track.TrackId),Track.UnitPrice)", "score": -0.6271268815376378, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "who is your daddy", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6272901885314953, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.13731268713349853, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.16658330192784454, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.19336789241255356, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1982553774957912, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),Track.Bytes),Album.Title))", "score": -0.23573742787427465, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.23756993275711769, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),Track.UnitPrice),Album.Title))", "score": -0.24556057605485104, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.28847070180633294, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.3106062416429626, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3482833365588271, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.35223989281383833, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.35546658460351804, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3574322830639981, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3575082871292579, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.35930137979484006, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.36499160223166804, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3744816884779914, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.3861666374775618, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.39530026688434927, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.40479035313067263, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.4133767958061556, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.41647530213024303, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.422866882052479, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.42443541206463387, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4339254983109573, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.4345518310520494, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.43513508505471754, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.4436854117420695, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.InvoiceLineId))", "score": -0.4440871283322309, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4446251225842736, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.10324588780520268, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.16903436561241814, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.22971000650569012, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.2727464864688595, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.28163502686564934, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.3099836221677086, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3258788890011985, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3544498150772568, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.3653001756157735, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(getData(Playlist),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.3740010885863178, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Milliseconds),Track.Bytes)", "score": -0.3804988842037323, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.3944928862533226, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes)", "score": -0.4049247564224939, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.UnitPrice)", "score": -0.4049729954107206, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.4333836783888666, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),MediaType.Name))", "score": -0.11258687542134876, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Track.UnitPrice))", "score": -0.11523936075923301, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Track.Name))", "score": -0.18814064778548026, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.19511907348815277, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), MediaType.Name),Track.UnitPrice))", "score": -0.197771558826037, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),MediaType.Name))", "score": -0.2230352040165099, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Track.UnitPrice))", "score": -0.22568768935439412, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), MediaType.Name),Track.Name))", "score": -0.27067284585228424, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.2985889763806414, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Album.Title))", "score": -0.33599796587301545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),MediaType.Name))", "score": -0.3709831223052845, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Track.UnitPrice))", "score": -0.3731739677989438, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Employee.Email))", "score": -0.3809177423392781, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.UnitPrice),Track.Bytes))", "score": -0.4122431327361285, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), MediaType.Name),Album.Title))", "score": -0.4185301639398194, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.17110868114559707, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.22846218514769134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.27766307387082634, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.3350165778729206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.Address),Employee.Phone))", "score": -0.6066152606117612, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,!=,Calgary),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Customer.Phone),Employee.Phone)", "score": -0.6370900819684389, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Customer.Phone),Employee.Phone))", "score": -0.6421175751793271, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,!=,Calgary),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone)", "score": -0.655910908537164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Address),Employee.Phone))", "score": -0.6639687646138555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.6725982138232212, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Calgary), Employee.Phone),Employee.Address))", "score": -0.67915201829328, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.BirthDate,!=,Calgary),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Customer.Phone),Employee.Phone)", "score": -0.6977899682207208, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Customer.Phone),Employee.Phone))", "score": -0.6994710791814214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.7008520620220224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.BirthDate,!=,Calgary),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone)", "score": -0.7166109934228436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25885278874375217, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),MediaType.Name))", "score": -0.2686703740928351, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3648327826831519, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),InvoiceLine.InvoiceLineId))", "score": -0.41586863392330997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Album.Title))", "score": -0.46081119173504703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.48569043123461597, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.BillingCity),MediaType.Name))", "score": -0.4955080165836989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.BillingPostalCode),Invoice.InvoiceDate))", "score": -0.5130645796034514, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,VV),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5140946073859287, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Customer.LastName))", "score": -0.5195538639400183, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.5228821649525344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),Track.Name))", "score": -0.52372437113263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5358500047896086, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.5400086283061682, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,VV), Invoice.Total),MediaType.Name))", "score": -0.5456675901386916, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Audioslave),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.16955556381329043, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Audioslave),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1897379202781727, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Audioslave),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.22313771109316544, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Audioslave),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2986474815661568, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Audioslave),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3120491830512348, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), Artist.Name),Artist.Name))", "score": -0.3127980363170035, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Audioslave), Artist.Name),Artist.Name))", "score": -0.3526508160307212, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Audioslave),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35273525879780604, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Audioslave),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35330217606410114, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave),Artist.Name),Artist.Name))", "score": -0.3595628400295327, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Track.AlbumId,Album.ArtistId),Artist.Name,!=,Audioslave),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3665338184703574, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Audioslave),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3666800908722621, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Audioslave),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Album.ArtistId))", "score": -0.39638966529337527, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Audioslave),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.40264497544658856, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}, {"orig_question": "is it possible that the artist audioslave has no mediatype?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Audioslave),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Album.ArtistId))", "score": -0.419378003598535, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Audioslave), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.049457473148322606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.257147233401156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Customer.City),Invoice.InvoiceDate))", "score": -0.4651849720894461, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.4843814861296778, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5358505402027731, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.535923231792367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5968555914505487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6195849286659723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.622960463565505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), InvoiceLine.UnitPrice),Invoice.InvoiceDate))", "score": -0.6472973380505209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Customer.State))", "score": -0.6610543024062281, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Customer.State),Invoice.InvoiceDate))", "score": -0.669032469791091, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Customer.City),Invoice.InvoiceDate))", "score": -0.6728747323422795, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6870758425711756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.6920712463825112, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.HireDate),Employee.HireDate))", "score": -0.09681167854796513, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Track.TrackId),Track.UnitPrice)", "score": -0.3128835729493659, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Track.TrackId),Track.UnitPrice)", "score": -0.38325330409121416, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Invoice.Total)", "score": -0.3972179723575139, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.HireDate),Employee.BirthDate))", "score": -0.40274455054532154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.HireDate))", "score": -0.42675432591568097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Invoice.Total)", "score": -0.4334790600055912, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.4395577385829878, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Employee.HireDate),Invoice.Total)", "score": -0.4545639783965883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.47581882623106514, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Invoice.Total)", "score": -0.4795293947610767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan),getData(Track),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Invoice.Total)", "score": -0.48109437329327276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Callahan), Track.TrackId),Track.UnitPrice)", "score": -0.48454946208832816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Employee.HireDate)", "score": -0.4891102622305452, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Employee.HireDate),Invoice.Total)", "score": -0.4908250660446657, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.13556731041097841, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -0.2592474060966721, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5029590241403269, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.504606545117553, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,=,None), Artist.Name),Artist.Name))", "score": -0.5158041937053369, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Invoice.InvoiceId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5219885030083538, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Invoice.InvoiceId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5236360239855797, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Artist.Name),Artist.Name))", "score": -0.5350834616845768, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5562169763551669, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5569963689743701, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.557864497332393, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5586438899515962, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Invoice.InvoiceId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5752463411470441, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Invoice.InvoiceId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5760257337662474, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Invoice.InvoiceId),Artist.ArtistId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.5768938621242702, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.0799301406861091, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11965015000846782, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.14064489436869132, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2207838413273833, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23817361711167484, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24946684804839253, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2509578059770908, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.27640840891454893, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2770702802954588, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2823886201446795, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28460622434420224, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2956371684574285, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.31524578697033784, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.33563734232155557, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks on the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3481609807550111, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Employee.Email))", "score": -0.30083753695998894, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Phone,!=,+1 (204) 452-6452), Customer.Email),Employee.Email))", "score": -0.3413640462449621, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (204) 452-6452), Employee.Email),Employee.Email))", "score": -0.35209908863816963, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Phone,!=,+1 (204) 452-6452), Employee.Email),Employee.Email))", "score": -0.3926255979231428, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Employee.Email))", "score": -0.3988942780188154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (204) 452-6452), Customer.Email),Employee.Email))", "score": -0.43942078730378853, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,!=,+1 (204) 452-6452), Employee.Email),Employee.Email))", "score": -0.4501558296969961, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (204) 452-6452), Employee.Email),Employee.Email))", "score": -0.4906823389819692, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Album.Title))", "score": -0.5173156463197301, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))", "score": -0.5211272441438268, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Phone,!=,+1 (204) 452-6452), Customer.Email),Album.Title))", "score": -0.5578421556047033, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,+1 (204) 452-6452), Customer.Email),Employee.Email))", "score": -0.5587171368888448, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Track.Bytes))", "score": -0.5613149606278967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))", "score": -0.5616537534288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of our clients with the phone number other than +1 (204) 452-6452?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Employee.Title))", "score": -0.5636007987550329, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (204) 452-6452), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22779422044500122, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2891746454631528, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.30570803626277376, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3257389157301056, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3308343746322269, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33562255336824764, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-01-15 00:00:00),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3479397567739798, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.367088446536013, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,!=,1.99),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3681318725254729, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3835990124199174, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3839327381835333, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.39662642311436713, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3969600595284335, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.40739611529968667, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.40772984106330257, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2915666903714074, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31561598491365694, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.32469169383146346, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.33976532495890366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3462279451703226, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.348740988373713, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.35126663610380415, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3638146195011532, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,1), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.36399989651586095, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.Composer,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.364619289337879, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3702772397125722, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3728903284189597, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3753159306460537, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Playlist.Name,=,1),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3778504410803658, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers that purchases one or more tracks from us?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Track.Name,=,1),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3793529486303787, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.01842606900369248, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20766877132581993, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25971466846198765, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(Playlist),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2758141549465883, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2998500334864267, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Name,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3023598836706696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.33247847798166386, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3355961714143766, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.34784067124636125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3548761507983646, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.36310993244017215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.36993935653435445, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3783762577337492, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38317065989369026, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types do tracks from the Classical playlist have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.41139111441598936, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.0460695396468509, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Milliseconds))", "score": -0.2696760068938602, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Milliseconds),Track.Composer))", "score": -0.36778214809601195, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4897719927149726, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Invoice),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.536345650815415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.5365748495806546, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,8271418),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5392645313096769, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Invoice),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5597217768869662, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5611898191288922, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,8271418), Track.Composer),Track.Composer))", "score": -0.5647622479882557, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Invoice),PlaylistTrack.PlaylistId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5830540142406767, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Invoice),Track.GenreId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5845659427793395, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Milliseconds),Track.Milliseconds))", "score": -0.5913886153430212, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Employee.Title))", "score": -0.6182968388602603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),filter(getData(Track),Track.Composer,>,8271418),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.623524015151365, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.05780979613181659, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.10879372439251783, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.21450273044966636, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25821048677944736, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.33900965847821185, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.346344093434353, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.4593374997774298, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.46725557525657, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4854159270185551, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5144881055109028, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(Playlist),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5172805041642166, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.520941197605307, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.5212335071273413, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5241250172579126, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.5585820470173141, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.06482175457526612, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.11710318193711322, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.12408692965111846, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13490508330209097, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2997220559117227, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.3181253855367516, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name)", "score": -0.321328910031623, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.33336186561549547, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.34792294319504863, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Track.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.38615469993636115, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3870693292068654, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.GenreId))", "score": -0.3889899517990445, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3898992071374668, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.39778304280436966, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.GenreId))", "score": -0.41208838498052347, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Country),Employee.Country))", "score": -0.16314316231728299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Country))", "score": -0.23609041858435376, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Country),Employee.FirstName))", "score": -0.30012547660589917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.FirstName),Employee.Country))", "score": -0.3442739366364549, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.FirstName))", "score": -0.37307273287296994, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.HireDate),Employee.Country))", "score": -0.47299183595896466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.LastName),Employee.Country))", "score": -0.475342255718715, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.FirstName),Employee.FirstName))", "score": -0.48125625092507107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Country),Employee.LastName))", "score": -0.4894578574967454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Country),Employee.Email))", "score": -0.49104110587359173, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.Country),Employee.Country))", "score": -0.5136343219128321, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Title),Employee.Country))", "score": -0.5242152034115861, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.LastName))", "score": -0.5624051137638162, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.5639883621406625, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.Email),Employee.Country))", "score": -0.5865815781799029, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.10868280315277902, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.13797356242195383, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.22645895523440399, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.2557497145035788, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3016180448666105, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-05-03 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.32267751807582257, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3309088041357853, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.3407639349141545, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.3479330473957421, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.35196827734499736, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.38036042381137436, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-05-03 00:00:00), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.38711095828885816, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.40965118308054915, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4103742477776015, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2013-05-03 00:00:00), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.41640171755803296, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.04102071921669667, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13317080640002293, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.1594378629949673, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.21304858753745104, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2675401729498533, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2718009407448832, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.31149082463110267, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Employee.FirstName,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.33925592025143103, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3436403093981741, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.GenreId))", "score": -0.36720751537128504, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3714194989541459, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.37375720690657166, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3790752493284938, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.39753126124229354, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre is the playlist Classical 101 - Next Steps from?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.39906568937097403, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.057057747536098914, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.11051073881214117, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13647486637463502, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2349738141898707, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2644685011123683, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.26590083309337137, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2964238626375372, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2992023272445081, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.321942706815345, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.33701165175623343, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3471748949148101, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,MediaType.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.35213714585466005, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.GenreId))", "score": -0.3602276178769229, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36607027901696776, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.MediaTypeId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.37361178863445327, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))", "score": -0.1430565436827188, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.Bytes))", "score": -0.15875328899427224, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.20678566084438324, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Bytes))", "score": -0.22950768056358292, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.UnitPrice))", "score": -0.2455075073324671, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.2799645780258306, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.UnitPrice))", "score": -0.30923662449413153, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))", "score": -0.319747511876567, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))", "score": -0.32532603519227116, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.UnitPrice))", "score": -0.3319586442133312, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.Bytes),Track.UnitPrice))", "score": -0.3358124422672211, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.34895741703913946, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))", "score": -0.35735540464115534, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))", "score": -0.39005826179900227, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name,!=,Brazilian Music),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))", "score": -0.407034049478663, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.05946050726963579, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.16813442371921936, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20517491264145207, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21127296950450627, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24281982933157106, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,9640349), Playlist.Name),Playlist.Name))", "score": -0.29667452301839853, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.302326644864041, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3191720963916658, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33955764455219384, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35698737487632254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.39463229156644153, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,9640349), Playlist.Name),Playlist.Name))", "score": -0.3995026312786965, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.4204766423650673, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,>,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.42307321993732805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Customer.Country))", "score": -0.4352757966172295, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.0324881693009773, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5482586038147904, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.6018553651364978, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.6611914885949881, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.7877823979425227, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8199017337937611, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9271250486366037, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Invoice.BillingPostalCode))", "score": -0.9499391405036098, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.9532935998217721, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9771328314054977, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.PostalCode))", "score": -0.9972164043051976, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.ArtistId))", "score": -1.117625799650311, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Customer.PostalCode),Artist.Name))", "score": -1.1704849888703506, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -1.184254017134357, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -1.2002932288547612, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.08642174326359964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.HireDate),Employee.FirstName))", "score": -0.3055186348456118, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.37647159234165883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.Country),Employee.FirstName))", "score": -0.3924847918051455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.Address),Employee.FirstName))", "score": -0.4004002886313174, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.Title),Employee.FirstName))", "score": -0.46900213532626367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.HireDate))", "score": -0.47530724037915206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.557584895049331, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.584704715521184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5891076510260973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.HireDate),Employee.FirstName))", "score": -0.595568483923671, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.Email),Employee.FirstName))", "score": -0.6040301399725649, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Customer.FirstName),Employee.FirstName))", "score": -0.6138272362250063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6300636532205317, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Customer.FirstName))", "score": -0.6340833150270555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13443127306937927, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.14393932708207233, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17988456264370747, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.20565119914335603, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.22609754144444982, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2520985630198908, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2738826157465389, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2878094135057335, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.297551852594219, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31587477369566336, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3299707662196262, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3613280582860821, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3810622555812225, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name),Playlist.Name))", "score": -0.3908704328646663, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name),Playlist.Name))", "score": -0.425318382077916, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.23029779406790452, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Genre.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.2645718888017065, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.26479295287395277, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.2727704862899185, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Track.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.2729915503621647, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Genre.Name,=,Hip Hop/Rap),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.27589622232371236, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Bytes),Album.Title))", "score": -0.30910554540280777, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Genre.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3104006063066647, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3106216703789109, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.31859920379487666, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Track.Name,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3188202678671229, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Genre.Name,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33283700673412747, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.34067553116294, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Milliseconds,=,Hip Hop/Rap),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.34423776161024344, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Hip Hop/Rap),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35660170682558984, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15676731853330225, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15965489991083123, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.17841666006228027, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18135831544101824, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Track.TrackId),Invoice.Total)", "score": -0.1824246136123773, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.1987648324782741, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21097872250627375, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.22021486783832195, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Track.TrackId),Track.Milliseconds)", "score": -0.22077337455785345, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23354358943880035, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.23531982043642374, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Track.Milliseconds)", "score": -0.2371135934237502, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.25028043348790235, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2718923503842765, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2748106409750958, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.12119143390789089, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.13001137456256837, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.20068581117163267, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.20495720444702972, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,>,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.20891492755477506, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.22915660194409235, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,>,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.23443529725807408, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.2400273735350078, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.2522121984857355, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.2560768814489574, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,>,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.25615894960217345, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.2602690350044078, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.262228750491481, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.26554772140483185, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Employee.HireDate),Track.UnitPrice))", "score": -0.2882077560542075, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24076410871742898, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27236257748055853, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27459749537969247, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.28966068164872444, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.306195964142822, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31629717902926374, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.321259150411854, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3234940683109879, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Album),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33078104452475876, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34292162199416015, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,AC/DC),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34789564779239335, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35509255451780053, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,AC/DC),getData(Album),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3623795224250556, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,AC/DC),getData(Album),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36461444032418955, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "Has the artist AC/DC produced a track that is on an album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,AC/DC),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36519380650667926, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,AC/DC),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Andrew), Employee.Country),Employee.Country))", "score": -0.14705417708682944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))", "score": -0.22389833287525107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Andrew), Employee.Country),Employee.Country))", "score": -0.33820685402679374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Andrew), Employee.Country),Employee.Country))", "score": -0.3487900461368554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Andrew), Employee.Country),Employee.Country))", "score": -0.36361971155929496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Andrew), Employee.Country),Employee.Country))", "score": -0.3844139243774407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.Country))", "score": -0.48482951180267264, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Andrew), Employee.Country),Employee.Country))", "score": -0.4985649253540032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Andrew), Employee.Country),Employee.Country))", "score": -0.5468284751586907, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Andrew), Employee.Country),Customer.Country))", "score": -0.5658451089002483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,Andrew), Employee.Country),Employee.Country))", "score": -0.5677856470756524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Andrew), Employee.State),Employee.Country))", "score": -0.575874130550801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Andrew), Employee.Country),Employee.FirstName))", "score": -0.589558936033427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Customer.Country))", "score": -0.6426892646886699, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.State),Employee.Country))", "score": -0.6527182863392227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),getData(Track),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.18482038124215974, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),getData(Track),Genre.GenreId,Track.GenreId), Track.Name),Album.Title))", "score": -0.2844863086399152, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3380625045966601, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),getData(Track),Genre.GenreId,Track.GenreId), MediaType.Name),Album.Title))", "score": -0.3606331073708054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),getData(Track),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3790288875878648, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,World),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.41207288850582796, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Album.Title))", "score": -0.43593454242315, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Track.Name),Album.Title))", "score": -0.4456541865274771, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.4627555430237867, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), MediaType.Name),Album.Title))", "score": -0.47640512755159914, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),getData(Track),Genre.GenreId,Track.GenreId), Album.Title),MediaType.Name))", "score": -0.47718875208699624, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.48529848257013225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4883508935391939, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,World),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.49219375712457286, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Are there album titles of the \"World\" genre?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Track.Name),Track.Name))", "score": -0.49541206553452705, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,World),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.26666994896065904, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),Track.Bytes),Album.Title))", "score": -0.29528881950309055, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1), Album.Title),Album.Title))", "score": -0.3119833350369459, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Album.Title))", "score": -0.3256463187936728, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33234169656064394, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.35315803799248374, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.35535575565272026, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3595889734899377, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1),Track.Bytes),Album.Title))", "score": -0.37221259547615715, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.37943282316118415, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),InvoiceLine.Quantity),Album.Title))", "score": -0.3822587392707733, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3858637586586381, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1),Album.Title),Album.Title))", "score": -0.38924195395665423, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.38950206570611956, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "On which albums are tracks that have been sold on orders that have only ordered one song with the minimal unit price? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3896647844816514, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.15384785043231045, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.16137982386409191, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2587884236267127, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Bossa Nova),getData(InvoiceLine),Genre.GenreId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2663203970584942, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27979143289549424, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2842762068660817, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Rock And Roll),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2873234063272757, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2901364100774889, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29180818029786315, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29476267962946434, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2976683835092704, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Bossa Nova),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3022946530612458, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32042488100389344, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Rock And Roll),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32795685443567485, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35210548814923326, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.0847038407518994, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.2036446598067414, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2649466083094012, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.3838874273642432, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Employee.City))", "score": -0.49503771631862037, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Artist.Name))", "score": -0.6431118664040696, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6591403768106829, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingState))", "score": -0.6703390297188889, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,696 Osborne Street), Invoice.BillingCity),Employee.City))", "score": -0.6752804838761222, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.7165780623618048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Customer.Fax))", "score": -0.7269271430268418, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.7298624929680955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingState),Invoice.BillingCity))", "score": -0.7498725016776007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.752477972273482, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7544881389185321, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13357204364877326, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Track),Genre.GenreId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1800092308613614, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18571688812981454, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20267545212890103, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,Scorpions),getData(Track),Genre.GenreId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24698674280014898, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,Scorpions),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25269440006860217, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2637106186441536, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Album.ArtistId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27004983056167764, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Genre.GenreId,Album.ArtistId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2862442252788983, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3101184130005714, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31302143972905044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Track),Artist.ArtistId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3187290969975036, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Scorpions),getData(Track),Genre.GenreId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33584003100025167, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3391532390418054, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Track),Genre.GenreId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34124834580718894, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.15233251440309264, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18841998663530418, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20286573892942236, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2129317756361441, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2275036216545937, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23820935362235274, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24123910982982594, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Track),Track.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2571699062535983, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.26093027609701314, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2665166878160346, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2900060324483695, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(min(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name),Genre.Name))", "score": -0.3112456553844226, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.GenreId,Artist.ArtistId), Genre.Name),Genre.Name))", "score": -0.3116889956512402, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.314547123999756, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3152836014358527, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.06191794581900467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Employee.State))", "score": -0.2934956849385344, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.4314786699433171, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Invoice.BillingState),Customer.State))", "score": -0.4450863973070227, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Invoice.BillingState))", "score": -0.4754908383656584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Employee.State),Customer.State))", "score": -0.5005407110620581, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Riotur), Customer.State),Customer.State))", "score": -0.5074993279595219, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.State),Customer.State))", "score": -0.5826769378800236, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.6001714971680485, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.Country))", "score": -0.6382074654866301, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Riotur), Customer.State),Customer.State))", "score": -0.6455303934235417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.Address),Customer.State))", "score": -0.6519712881017767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Employee.State))", "score": -0.6630564090628468, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Invoice.BillingState),Employee.State))", "score": -0.6766641364265524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.Country),Customer.State))", "score": -0.6840534881521307, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.08467140700546927, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.12761295854900717, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1739011680625686, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1781015919193913, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18439301619970422, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.216879215610681, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.2354556879517312, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2487467156546031, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.2523976641516078, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,>,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25972014063714133, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2665763316711089, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.26929987269786076, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.2775291539098689, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.29661145980513015, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.30301586318450807, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1271360164184398, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.164116633265442, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1657610169969945, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.1756458031740163, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.23266100550896968, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24425768443716295, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.24985874898155472, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Invoice.Total)", "score": -0.25669795408601936, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Invoice.Total)", "score": -0.26364466445788715, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.27182852002740016, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2786971634366466, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Customer.CustomerId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.2909260392490744, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2939734466821305, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.3089224409057105, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3199841497271234, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Milliseconds),Track.Name))", "score": -0.32975075242896257, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,1.99), Track.Composer),Track.Name))", "score": -0.3359851011155115, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.3638080517446036, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Name))", "score": -0.37667051638345583, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),Track.Name))", "score": -0.3942927784470764, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Track.Name))", "score": -0.39797440342903057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Track.Name))", "score": -0.41299095359608784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Track.Name))", "score": -0.4138449431567845, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Playlist.Name),Track.Name))", "score": -0.41990420748379415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Name))", "score": -0.4203652257526164, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Name))", "score": -0.4342190054805089, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4346242495213625, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,1.99),merge(getData(InvoiceLine),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Milliseconds),Track.Name))", "score": -0.45438367937051216, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,1.99), Track.Name),Track.Name))", "score": -0.4555272873573643, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,1.99), Track.Name),Track.Name))", "score": -0.45785527367392803, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Track.Name))", "score": -0.06725676526548341, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.25931702909292653, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Track.Milliseconds),Track.Name))", "score": -0.5042339318953095, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId), Track.Name),Track.Name))", "score": -0.6132358341670063, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Name),Track.Name))", "score": -0.6170030122739263, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Name),Track.Name))", "score": -0.6258493548375554, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId), Track.Name),Track.Name))", "score": -0.6459089048386754, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,null,1.99), Track.Name),Track.Name))", "score": -0.6503153329831548, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1.99),getData(MediaType),Track.MediaTypeId,PlaylistTrack.TrackId), Track.Name),Track.Name))", "score": -0.6526726191333276, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Track.Name),Track.Name))", "score": -0.6754105829326078, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,<=,1.99), Track.Name),Track.Name))", "score": -0.6856743790558539, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Track.Milliseconds))", "score": -0.7105235681519844, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Milliseconds),Track.Name))", "score": -0.7150201086769812, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,1.99),getData(MediaType),Track.MediaTypeId,PlaylistTrack.TrackId), Track.Name),Track.Name))", "score": -0.7187626762208025, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,1.99), Track.Name),Track.Name))", "score": -0.7191977387410589, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.14026811544622533, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,!=,3.96),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14720749318100476, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,!=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15484406586768645, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.Total,!=,3.96),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21370321170133483, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,!=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2619653801755417, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,!=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2765413305970028, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,3.96),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2783477667045394, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,!=,3.96), MediaType.Name),MediaType.Name)", "score": -0.30021086094515914, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.Address,!=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30862715039138816, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,!=,3.96),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.34484348522486946, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,!=,3.96), MediaType.Name),MediaType.Name)", "score": -0.3520908440510326, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,<=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37396921127408866, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,!=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3755638536902769, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<=,3.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3885451170047646, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,!=,3.96), MediaType.Name),Track.MediaTypeId)", "score": -0.4308850853893562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Customer.State),Customer.State))", "score": -0.21762081888141657, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Customer.Company),Customer.State))", "score": -0.2695849282688449, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Invoice.InvoiceDate),Customer.State))", "score": -0.2716242819915211, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Customer.State),Customer.State))", "score": -0.289421574529641, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Customer.State),Customer.State))", "score": -0.3110487866139309, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), Customer.State),Customer.State))", "score": -0.3113679362391144, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.State),Customer.State))", "score": -0.3220914567877109, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Invoice.Total),Customer.State))", "score": -0.3354074778932639, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Customer.Company),Customer.State))", "score": -0.3413856839170693, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Invoice.InvoiceDate),Customer.State))", "score": -0.3434250376397456, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Customer.Company),Customer.State))", "score": -0.3630128960013593, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), Customer.Company),Customer.State))", "score": -0.3633320456265427, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Invoice.InvoiceDate),Customer.State))", "score": -0.36505225526171264, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), Invoice.InvoiceDate),Customer.State))", "score": -0.3653714048868961, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Employee.HireDate),Customer.State))", "score": -0.36748482836420004, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.19889144798798952, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.20526103874726687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.2521284689573804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.26612237295194063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.33908209404035006, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.41553494533582125, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.4162166436581174, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.4697388728527585, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.5431236048607389, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.5501059313683072, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.CustomerId,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.5671826024918118, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.5890855809120694, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6709944029717008, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6870635171799222, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Fax),Genre.GenreId))", "score": -0.710939981174306, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))", "score": -0.35805121764860814, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Track.Composer))", "score": -0.401202454490781, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Playlist.Name))", "score": -0.42813690105326263, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Employee.FirstName))", "score": -0.4298055670969583, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Track.Milliseconds))", "score": -0.433700095830095, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Milliseconds))", "score": -0.4599687080117292, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Invoice.BillingAddress))", "score": -0.46699580062092655, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Employee.Phone))", "score": -0.47918811771557374, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,522919189), Playlist.Name),Track.Composer))", "score": -0.4821202269541408, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Track.Composer))", "score": -0.4847449197978921, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Track.Composer))", "score": -0.4891687640798067, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Track.Composer))", "score": -0.492570862624196, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,522919189), Track.Composer),Track.Composer))", "score": -0.4941202426717133, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,522919189), Playlist.Name),Track.Composer))", "score": -0.5030532557652312, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}, {"orig_question": "Is there any composer of tracks that do not have 522919189 Bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,522919189), Playlist.Name),Playlist.Name))", "score": -0.5090546735166225, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,522919189), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.17245506519754314, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.19527576199706304, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.21741885425800656, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.24580873943132867, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.27756291331591193, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3093595222173733, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.31505514166228815, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3386335980163397, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.34073345323431026, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3524427791224075, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.35576587032871926, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.36387815283041935, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -0.36433474464461124, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Artist.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.37203505635990164, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.3827007817359354, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.39324771214160137, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.43712602902087383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.4889708643022459, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.BirthDate))", "score": -0.5316862349573057, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.City))", "score": -0.5335413103166502, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title)", "score": -0.5560615073454347, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,=,1973-07-01 00:00:00), Track.TrackId),Employee.Title)", "score": -0.5605364566675144, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,=,1973-07-01 00:00:00), Employee.Title),Employee.HireDate)", "score": -0.5627148110354563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,=,1973-07-01 00:00:00), Track.TrackId),Employee.HireDate)", "score": -0.5671897603575361, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title)", "score": -0.5744623957343665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Track.TrackId),Employee.Title)", "score": -0.5789373450564462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.HireDate)", "score": -0.5811156994243881, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Track.TrackId),Employee.HireDate)", "score": -0.5855906487464679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.HireDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title)", "score": -0.5983328934728676, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.HireDate,=,1973-07-01 00:00:00), Track.TrackId),Employee.Title)", "score": -0.6028078427949473, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.027821750919846577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.18800000489153884, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.28455308712543204, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.2965278471118088, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29913645964862146, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3342599784717022, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.34699614970354176, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.UnitPrice),Track.Name))", "score": -0.37798921194030477, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.UnitPrice))", "score": -0.38608222053068997, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.4076643018688914, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.42222163917318056, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.4423181302130536, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Playlist.Name),Track.Name))", "score": -0.4431839573201114, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.447051343430947, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.44860153936812686, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.13234473683768846, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.14191100705513457, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.19475113596674462, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.2226018638417386, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.272479123344307, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Track.Bytes))", "score": -0.2771588366245733, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Track.Bytes))", "score": -0.30959547650220653, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3177899745194007, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Bytes))", "score": -0.319992320896574, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3544540593969803, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.36322368870954425, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Album.Title))", "score": -0.4017385267584727, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.4031480552374621, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.40353546949410063, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.40776034178441717, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.08662331499673682, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.19820333880190905, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2129227416426769, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.21746061230097913, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.2268128694595105, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.2431442148092838, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),Track.Milliseconds),Album.Title))", "score": -0.25021281973244824, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.2517092543558022, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.32833584467620214, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.330196739182015, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33085232041526436, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),MediaType.Name),Album.Title))", "score": -0.3379284165257105, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.344667181096471, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.36328927816097445, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),Track.Milliseconds),Album.Title))", "score": -0.3724214368933694, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.10809572035015685, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.13839711006734226, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.15801675762909545, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.22134922797815434, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.22778840868753228, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2383903415979951, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.29234614770018913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.30040487844642155, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.31931977515428406, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2013-07-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3404183485415805, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3490261712309989, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,null,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.3519141523502115, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.3569743175824788, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.38909143510761485, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3898658571077989, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.07612249352713923, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.11685602421142983, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2017779934097189, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2301352112512083, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2637221171200903, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2848437816283331, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.29577268763510156, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.30553324150914923, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.32507973266208506, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.32620956056735767, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.33491052918233116, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3391201473780312, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3427271788949289, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.39583044282742336, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Milliseconds))", "score": -0.411730671288412, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.15603912169457526, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,WI), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.15646312185663228, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,Budapest),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2178580487242341, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,WI), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.23667928314435124, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), Track.TrackId),Track.UnitPrice)", "score": -0.23710328330640826, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,Budapest),filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2739872656869872, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,WI),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3187440976844857, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,Budapest),merge(filter(getData(InvoiceLine),Invoice.BillingCity,!=,Budapest),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32288949306721754, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,Budapest), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33570673136854695, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,WI), Track.TrackId),Invoice.Total)", "score": -0.33613073153060397, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,Budapest),merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3423247478759775, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,WI),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3428421978897081, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,WI),filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3557493312922419, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,Budapest),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38047937092720396, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks sold to customers living in another state than WI and the invoices being sent to another city than Budapest?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,<,WI), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38153475764794936, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.State,!=,WI),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Budapest),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.10534674594326934, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.15638352920382936, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),InvoiceLine.Quantity),Album.Title))", "score": -0.20247009194701865, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.2131295762381335, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.2638258881299924, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,0.99),InvoiceLine.Quantity),Album.Title))", "score": -0.3115187128329559, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3148626713905524, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.31644803111100056, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3219389256979419, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3261776144213897, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.33635138727659425, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Album.Title))", "score": -0.3389665047121301, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.35444501310246107, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3674848510586718, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the title of the album with the minimum amount of invoice line quantity who has a invoice line unit price of less or equal 0.99?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),InvoiceLine.Quantity),Album.Title))", "score": -0.37163246391665167, "correct_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.12078060822349349, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.12645916832107465, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,4838884), Artist.Name),Artist.Name))", "score": -0.17791668619857653, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1972446440236264, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.20292320412120754, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))", "score": -0.21180142263361368, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,4838884), Artist.Name),Artist.Name))", "score": -0.3030756260182455, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,4838884), Artist.Name),Artist.Name))", "score": -0.31851620055562224, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3299441158962838, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33562267599386497, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))", "score": -0.33696036245328265, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37593607858625566, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,4838884), Artist.Name),Artist.Name))", "score": -0.3841625103164133, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,4838884),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.40640813314519825, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks smaller than 4838884 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,<,4838884), Artist.Name),Artist.Name))", "score": -0.4067447208541101, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,4838884), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.0974671766962274, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.21391646162872402, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.22767148020706568, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.31324775491447987, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.32700277349282153, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.3404009342993959, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.3443630148288697, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,>,0.99), Customer.Phone),Customer.Phone))", "score": -0.35688964471773943, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.3581180334072113, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.Phone),Customer.Phone))", "score": -0.40976743992421605, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Customer.Phone),Customer.Phone))", "score": -0.4235224585025577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.43220703700069596, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.44369432251258617, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.Country),Customer.Phone))", "score": -0.44475549761902944, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers which bought an item with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Phone),Customer.Phone))", "score": -0.457449350504979, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.07276613849336619, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.11954424281305177, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1466079387604589, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.19873208068302517, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23307235082924335, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3553360348324717, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.37088275266378784, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.38149230664236927, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title)", "score": -0.38601293226453154, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3873155543564048, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.43587109109525657, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title)", "score": -0.47239063993035196, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title)", "score": -0.4838668075381431, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.AlbumId),Album.Title))", "score": -0.48767388034459147, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Drama), Album.Title),Album.Title)", "score": -0.5064122773948774, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.LastName))", "score": -0.2832344173657225, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.LastName))", "score": -0.3119967968317271, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.PostalCode),Customer.LastName))", "score": -0.32226776039507266, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.City),Customer.LastName))", "score": -0.32967018326106506, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.LastName))", "score": -0.3387282960572353, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Invoice.BillingCity),Customer.LastName))", "score": -0.3435502048707265, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.Address))", "score": -0.3496307244857451, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.PostalCode),Customer.LastName))", "score": -0.3510301398610772, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.City),Customer.LastName))", "score": -0.35843256272706964, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.LastName))", "score": -0.3674906755232399, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.Address),Customer.LastName))", "score": -0.3691003805724469, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Invoice.BillingCity),Customer.LastName))", "score": -0.37231258433673103, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.PostalCode),Customer.LastName))", "score": -0.3777616390865854, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.Address))", "score": -0.37839310395174963, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers that didn't give us their phone?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,None), Customer.LastName),Customer.LastName))", "score": -0.38270167107121844, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.UnitPrice),Invoice.InvoiceDate))", "score": -0.3740909708867548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.Email))", "score": -0.3972106589208124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Invoice.InvoiceDate))", "score": -0.41658683253626805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.UnitPrice),Employee.HireDate))", "score": -0.41756165160040837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Invoice.InvoiceDate))", "score": -0.429547728432226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.Email))", "score": -0.43970652057032567, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4526674164662836, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4527197493443964, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Employee.HireDate))", "score": -0.4600575132499216, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.State))", "score": -0.46314042939047795, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Employee.HireDate))", "score": -0.47301840914587956, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4815539730916498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),InvoiceLine.UnitPrice))", "score": -0.49521561099390965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Invoice.Total),Customer.Email))", "score": -0.5046736611257074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))", "score": -0.5056362910399912, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.12108662082027877, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.2739873240716406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Company),Customer.LastName))", "score": -0.3152177604861208, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.3177522729165503, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.4094853709466406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,vstevens@yahoo.com), Customer.Company),Customer.LastName))", "score": -0.46811846373748267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.4828287671334692, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,vstevens@yahoo.com), Customer.Company),Customer.LastName))", "score": -0.5118834125823923, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Country),Customer.LastName))", "score": -0.5223474773592898, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.Company))", "score": -0.5538835880361148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.Country))", "score": -0.574857479055936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.584461123777146, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,vstevens@yahoo.com), Customer.Company),Customer.LastName))", "score": -0.6036165106124827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))", "score": -0.6281524012811133, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}, {"orig_question": "what is the customers last name with the e-mail vstevens@yahoo.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.Fax),Customer.LastName))", "score": -0.6423818740076968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,vstevens@yahoo.com), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.22767624840683462, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.27822321431086866, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.2933219455568414, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.31403384715572147, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.33991608629859593, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.34386901694370975, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Black Eyed Peas),Invoice.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3750296551505479, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.3786092303693021, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Black Eyed Peas),Invoice.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3833496013096803, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.3922921251496432, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Invoice.InvoiceId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.3936936947097975, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.41297332543082677, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Black Eyed Peas),Invoice.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.41389580757853506, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Black Eyed Peas),Artist.ArtistId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4182616906871493, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Black Eyed Peas),Invoice.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.42221556616698197, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17474912336911075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.21183907470549457, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.37206740064187394, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.3995452661093257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4229040921211299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.4503819575885817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.45557798000389493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.46487615923420716, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.46681067808302296, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.46806812951120674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.4700026483600226, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4789010835678723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4830558454713468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.5028891143785532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,33000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.504823633227369, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.1712648495195026, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,>=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.21635425082422444, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.22043283275343128, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.2655222340581531, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,<=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.4345848037955875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.4837527870295162, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.5053919701931591, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.5477163343784923, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,>=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.5504813714978809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Apple Inc.), Customer.Country),Customer.Phone))", "score": -0.5736730880198593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,>=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.5928057356832142, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,>=,Apple Inc.), Customer.Country),Customer.Phone))", "score": -0.6187624893245811, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Apple Inc.), Customer.Country),Customer.Phone))", "score": -0.6228410866206104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.6303569380288536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers that work at Apple Inc.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Apple Inc.), Customer.Phone),Customer.Phone))", "score": -0.6407624188905174, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Apple Inc.), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.21279987537720974, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.280641353113084, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28940866891053685, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30612680892475297, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33196199590929815, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Reggae),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.33918237426365794, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35210436279297896, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35635581780775716, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35725015600375937, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Reggae),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.366603042360658, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Reggae),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3694478219743921, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3739682773032791, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Reggae),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.InvoiceLineId))", "score": -0.3818717870164835, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Reggae), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38235872958783285, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a Reggae track been purchased? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Reggae),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3947458406345355, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Reggae),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.20294229616774828, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.3569842979813984, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.State),Customer.Company))", "score": -0.358378752371209, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.3862126350904873, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.Company),Customer.State))", "score": -0.41762261395706446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Employee.Country),Customer.Company))", "score": -0.4236257367338112, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AB), Customer.Company),Customer.Company))", "score": -0.4321185753251484, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Customer.Company),Customer.Company))", "score": -0.46899158624364645, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.Company),Customer.Country))", "score": -0.4953864098097256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,AB), Customer.State),Customer.Company))", "score": -0.5124207541848591, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.5402546369041374, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.State),Customer.Company))", "score": -0.541649091293948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.InvoiceDate),Customer.Company))", "score": -0.5450566702093056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,AB), Customer.Company),Customer.State))", "score": -0.5716646157707146, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.State),Customer.State))", "score": -0.5730590701605252, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.08978123330962262, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Customer.Country))", "score": -0.34146064260494313, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3730214330571471, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Customer.Phone))", "score": -0.45191508272182546, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),MediaType.Name))", "score": -0.4526055429269036, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.46020175746890507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.46825349258547255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Customer.FirstName))", "score": -0.5028008792687615, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Customer.LastName))", "score": -0.5269240412999352, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingCountry),Employee.Phone))", "score": -0.5271141801167687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Phone),Customer.Country))", "score": -0.5681170329170374, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.575326685437081, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.5753279354400739, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.5809918310655087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do we have in our database that do not have a place with the postal code 1016?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.5931167381022533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.16333770261213196, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.21103797944662353, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.22024264522291187, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,12024875),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.24173513701148688, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.26794292205740344, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.27660142493875906, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.2802035049407447, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,12024875),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.2926031044349866, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.3201022078295223, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32357604225518427, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.3243017017732507, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.32790378177523627, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),Track.Name,>=,12024875),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.33198874300148634, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.3335063828615633, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total for invoices that contained tracks smaller or equal to 12024875 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,12024875), Invoice.InvoiceId),Invoice.Total)", "score": -0.3371084932040416, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,12024875),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.032417890141005046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4362770303486161, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Composer))", "score": -0.45178962730824423, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Composer),Track.Milliseconds))", "score": -0.4584680767638929, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.46288424892247254, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,Trampled Under Foot),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.46647272870440704, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4692223286492996, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.48890221164583636, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4938448392986994, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.49582954722315603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Trampled Under Foot),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5056470957045878, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Track.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5204521054965794, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5244746509277057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5267901663953041, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Trampled Under Foot),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.536428935196415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.047364862644598375, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.6347085878136948, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6810745512775611, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.PostalCode))", "score": -0.7124040186090645, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.7260397618266454, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.741286612570635, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.PostalCode),Artist.Name))", "score": -0.7762550608806932, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.7809954526568847, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7954079964838456, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.8075609768224139, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.LastName),Artist.Name))", "score": -0.8270250959423937, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8936747038675906, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -0.8968370723121781, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8972984099362588, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Give me the name of all artists", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.City))", "score": -0.8993635546627734, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.4314225599112921, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4315353335991297, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.45370473778199116, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.46036521630009936, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.46047798998793704, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.46604712149754557, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.49230156754271087, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.49241434123054856, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.493541351908542, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5058837356240964, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.5086386391935281, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.5140391923921573, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5209811691037596, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.5227760033688087, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many tracklists are there where no track costs 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5263817223023888, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.014673811015768376, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.7779790404937302, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.7856946682761929, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7999291141032113, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.8046727145956538, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8161409792239164, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.870444915980522, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -0.9873067094053425, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.0523347506481233, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.162978146485109, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Fax),Artist.Name))", "score": -1.2036917953283386, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.2071323392686812, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.2235737766421895, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.LastName),Artist.Name))", "score": -1.2330743990238693, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.235566417026852, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.05721687318873592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.3043235445220489, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4340360135676783, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4412421928566069, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.46356379864582853, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.46805559637141414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4707699779347571, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.49275452968100003, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.4999606990021097, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.5104358697135467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.LastName,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.5222822992536542, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.LastName),Customer.Fax))", "score": -0.5281777808268089, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.LastName,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.529488464421506, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.PostalCode),Customer.Fax))", "score": -0.5408000180323143, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of any customer working at the company Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))", "score": -0.5627216303546447, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.24116569213992864, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.2640368215694222, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.Quantity),InvoiceLine.InvoiceLineId))", "score": -0.30170063724415447, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.3038724699250762, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.324571766673648, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),Track.Name))", "score": -0.32783553182749775, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.3320776583409268, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Bytes),InvoiceLine.InvoiceLineId))", "score": -0.3488715459282769, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),InvoiceLine.InvoiceLineId))", "score": -0.35506584097516763, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3557324887024545, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.Quantity),Track.Bytes))", "score": -0.364407415029302, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Bytes),Track.Milliseconds))", "score": -0.37174267535777045, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Milliseconds))", "score": -0.3779369704046612, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.Quantity),Track.Name))", "score": -0.3883704769317236, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3926126034451526, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2755720913870338, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3064065866392457, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3314992660152078, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3389588427657872, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,<,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3464659460768287, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.350780892755596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3623337612674197, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3738938063195214, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,<,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3773004413290406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38525163090721853, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3948860173939612, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4001442401066763, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,<,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4023931572536719, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.BirthDate,>=,2010-05-17 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40472833812040254, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries to which an invoice was sent on or after 2010-05-17 00:00:00 by an employee living at 5827 Bowness Road NW?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4495555542587198, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.InvoiceDate,>=,2010-05-17 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.019586449521508658, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5909782602226636, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6051244687720826, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Employee),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6806677340386822, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6831495913860002, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.7215727163745219, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7412462105820087, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7463431354990462, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7508155033350331, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Employee),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7669827977132482, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),getData(Artist),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.78250047140228, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.8078876995340014, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8202989083990205, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.8513214600128148, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8534228773440458, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.17034034422493943, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2596268201846945, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26912120307222914, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31336885547033305, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3286142044533923, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.340929232358399, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3584076790319842, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Artist.ArtistId,Invoice.CustomerId),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3630742133377457, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Artist.ArtistId,Invoice.CustomerId),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3648624314062303, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Artist.ArtistId,Invoice.CustomerId),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3705677998790002, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Artist.ArtistId,Invoice.CustomerId),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3723560179474848, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Employee.EmployeeId,Invoice.CustomerId),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38133413622230977, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Employee.EmployeeId,Invoice.CustomerId),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38312242091935056, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Employee.EmployeeId,Invoice.CustomerId),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38882778939212037, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity sold to customers with other last names than Philips?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(Customer),Artist.ArtistId,Invoice.CustomerId),Customer.LastName,=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3894928561255754, "correct_code": "sum(distinct(merge(filter(getData(Customer),Customer.LastName,!=,Philips),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)", "score": -0.17972688419495372, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1904558812763354, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce/Clapton),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2477612096832944, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce/Clapton),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28422000618968074, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)", "score": -0.2957956582271522, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce/Clapton),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.3031148627523461, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3065246553085339, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Track.TrackId),Invoice.Total)", "score": -0.3190932639473389, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Invoice.Total),Invoice.Total)", "score": -0.3215040797977268, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)", "score": -0.3308256318967248, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)", "score": -0.33185180520453494, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)", "score": -0.3322949329205557, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3415546011896179, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.342580774497428, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount issued in invoices of tracks composed by \"Bruce/Clapton\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bruce/Clapton), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34302390221344875, "correct_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bruce/Clapton), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.0714039039266936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Customer.LastName))", "score": -0.3462660704208247, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Artist.Name))", "score": -0.3471230063987605, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Artist.ArtistId))", "score": -0.40067873340376536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.4108986091268889, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.45914678093322436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5558449458731047, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5588862132681243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5741914939535491, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Customer.Fax))", "score": -0.5874648187709681, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5898366403234832, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Album.Title))", "score": -0.6093834136081568, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Genre.Name))", "score": -0.6131016705585353, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Artist.Name),Employee.LastName))", "score": -0.6504389313449792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Customer.LastName),Employee.LastName))", "score": -0.6756369141330651, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.11233708779135619, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Milliseconds))", "score": -0.17625306068707428, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.18052535203553183, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Milliseconds),Track.Composer))", "score": -0.2594571350472415, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.26509447526371444, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Bytes),Track.Composer))", "score": -0.27235008791651566, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Milliseconds))", "score": -0.2783313064366964, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.2975355714780736, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Genre.Name),Track.Composer))", "score": -0.2998320291143576, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Bytes))", "score": -0.3280551718957964, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.35372945876498757, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Milliseconds))", "score": -0.3673194519427516, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Invoice.BillingAddress))", "score": -0.3792554638261044, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38293589831616764, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Composer))", "score": -0.38720818966462517, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))", "score": -0.09221436128063942, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Milliseconds),Track.Composer))", "score": -0.2428276580576494, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Milliseconds))", "score": -0.38979330051733996, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Stay Away), Track.Composer),Track.Composer))", "score": -0.395621796586056, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Milliseconds),Track.Milliseconds))", "score": -0.5404065972943499, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Stay Away), Track.Milliseconds),Track.Composer))", "score": -0.546235093363066, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6041743365220493, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(Track),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6085603894799501, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(Track),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.61748361639039, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId), Track.Composer),Track.Composer))", "score": -0.6343411409147198, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6422116175746259, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.644999871250989, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6465976860380226, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),merge(getData(Track),getData(Invoice),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6493860349624329, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of the track Stay Away?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Stay Away),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId), Track.Milliseconds),Track.Composer))", "score": -0.6531144659882732, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Stay Away), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.07627225199145454, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1636300474046576, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17796941816583525, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22294776087338433, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24965537627356157, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2855362682278237, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Invoice),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28599714556276223, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3015617839901101, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.3066494113729778, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3109747990551427, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3189452265237761, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3457937992189948, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3537642452388467, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.3649568025811577, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal codes have invoices been sent for tracks who don't belong to the genre Soundtrack? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.3802331440119153, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.2534519499399899, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2856184647659577, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.302316625850841, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.3102771984691996, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.31255971602613414, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.31425777163005586, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.33224329646007295, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.33448314067680884, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3424437132951675, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.34472623085210197, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3464242864560237, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,1),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.35914187438005074, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.35949915866523213, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.36367837495104727, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.36440981128604083, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.04301238647894934, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.2568401231546886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.48200310609536245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.5502773060579784, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.State),Customer.Country))", "score": -0.6038410289329477, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.609100176312495, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6185101403971203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Phone),Customer.Country))", "score": -0.6199708206695504, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Employee.Country),Customer.Country))", "score": -0.6256568653625436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6429946555872448, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6644511952181347, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.FirstName),Customer.Country))", "score": -0.6851298434776254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Employee.Country))", "score": -0.687156074505765, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Address),Customer.Country))", "score": -0.6884099466842599, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Company),Customer.Country))", "score": -0.7077746613067575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.BirthDate),Employee.Title))", "score": -0.2155846342939185, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.2615157351392554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Title),Employee.Title))", "score": -0.2977464333671378, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8), Employee.BirthDate),Employee.Title))", "score": -0.4013532457221526, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.HireDate),Employee.Title))", "score": -0.4336632624763297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.Title))", "score": -0.43698109542310704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.4385131210542253, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.BirthDate),Employee.BirthDate))", "score": -0.4614355028170394, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Email),Employee.Title))", "score": -0.4673676625388907, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.4855871498296625, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8), Employee.HireDate),Employee.Title))", "score": -0.489413374637631, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.HireDate),Employee.Title))", "score": -0.4944274992180169, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8), Employee.Title),Employee.Title))", "score": -0.49646995690067564, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8), Employee.BirthDate),Employee.Title))", "score": -0.5001886466634003, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T1K 5N8), Employee.Country),Employee.Title))", "score": -0.5021170054001428, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.09039752306550668, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.15753853342904378, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.20270518256459943, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.24622291152692238, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2548227344499407, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2653294571878961, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.27469495747904, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.280332066336708, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2924772430644584, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.29560673325260467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2011-03-05 00:00:00), MediaType.Name),Genre.Name))", "score": -0.31552397557654666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.32196375254258036, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3225841994485447, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3258341514204854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3324704752805357, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.04779363919274316, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.08466655243163791, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18099723727588043, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28034932234155596, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2851223975490266, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32517632002330726, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3265974226442541, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.32958076209039605, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3372737579891973, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3453317068551896, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name)", "score": -0.34796098470601716, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.35369962693193574, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Track.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.35422810882526923, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name)", "score": -0.37225340795645706, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name)", "score": -0.40975925027333343, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.09361589754289783, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.0953084355265349, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1789958479117094, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.21267863565291775, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22300839754473858, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2616342988919512, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.27607104395509224, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2880048900640755, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2937424456553029, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31424076709765025, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total)", "score": -0.322061280165717, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.32742523339651125, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.3451969841764532, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34560043152537734, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3505515981727104, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.026328265446863952, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4408185563643201, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.4889689029787405, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.5074233992618247, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5206926248629316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Customer.City))", "score": -0.5798825605434104, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingState),Invoice.BillingCity))", "score": -0.6077758909796103, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingState))", "score": -0.6135217531245871, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6284048936922773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6321207864803, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6643149040301068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6973430297930463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7011079068888648, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.7615261657756491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.770644950460337, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.055162718439765335, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.6479822164498088, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.6973681972754471, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Address))", "score": -0.72723223557902, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Fax))", "score": -0.7452208762122001, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(getData(Customer),getData(Customer),Customer.CustomerId,InvoiceLine.InvoiceId), Customer.Address),Invoice.BillingAddress))", "score": -0.767551942407561, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Address))", "score": -0.7759665114814291, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Invoice.BillingAddress))", "score": -0.7761049954827975, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Phone))", "score": -0.7854465203843086, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(getData(Customer),getData(Customer),Customer.CustomerId,InvoiceLine.InvoiceId), Customer.Address),Customer.Address))", "score": -0.8270986174200378, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.8356516704952743, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.City))", "score": -0.8451171499570087, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Invoice.CustomerId))", "score": -0.8648582586990708, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Invoice.BillingAddress))", "score": -0.8676507862804729, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Invoice.InvoiceId))", "score": -0.885004119339752, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.3378689953206049, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Employee.Phone),Employee.Phone))", "score": -0.3704130121586786, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.3755326860664354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.38141573156099184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Employee.Phone),Employee.Phone))", "score": -0.40807670290450915, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,Michelle), Employee.Phone),Employee.Phone))", "score": -0.4139597483990656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.4190794223068224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,Michelle), Employee.Phone),Employee.Phone))", "score": -0.4516234391448961, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.45244808430652483, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Phone,=,Michelle), Employee.Phone),Employee.Phone))", "score": -0.48499210114459856, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.48899621452073916, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.4959948205469118, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.5185752848564793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Employee.Phone),Customer.Phone))", "score": -0.5215402313588129, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.5266599052665697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))", "score": -0.02668297498530592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Country),Customer.Phone))", "score": -0.42289935353255714, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))", "score": -0.4520685572460934, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))", "score": -0.51670037697113, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Country))", "score": -0.5548496523224458, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Address))", "score": -0.5693344750725373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Fax))", "score": -0.5980698743187531, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Genre.GenreId))", "score": -0.6128973045670136, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Address),Customer.Phone))", "score": -0.6159287274167582, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))", "score": -0.649981250269775, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Fax),Customer.Phone))", "score": -0.7180068671987101, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Employee.Phone))", "score": -0.7180826940857514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.FirstName),Customer.Phone))", "score": -0.7243497550771281, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))", "score": -0.7324268717602536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the distinct phone number of the customer whose email address is joakim.johansson@yahoo.se?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))", "score": -0.7855632204846188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,joakim.johansson@yahoo.se), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2160485638287355, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.City))", "score": -0.2608493370917131, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.26514467131164565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingState))", "score": -0.4359531057980348, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.State))", "score": -0.46409433614280715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingState),Invoice.BillingCity))", "score": -0.4772960161772062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.State))", "score": -0.48999821673896804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.4943831218388368, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5046296333875944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.Fax))", "score": -0.5160040510800172, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingState),Employee.City))", "score": -0.5220967894401838, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingState),Customer.City))", "score": -0.5263921236601163, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.Country))", "score": -0.5297824991848756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.Address))", "score": -0.5422354591992189, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCountry),Employee.City))", "score": -0.549430406650572, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.021378436339065037, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.2354867226592884, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.34406966461392585, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.3676035548880718, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.39314970208787353, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.42381193668812067, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.PlaylistId,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.42576930212393455, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4272482031026666, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4488485100932888, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4517537944339138, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.46252360084154664, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Employee.FirstName,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4680900916438249, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4726009885616742, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4739386713745531, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Bytes),Track.UnitPrice))", "score": -0.5362894056256976, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.03841500777434703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Customer.State))", "score": -0.3652039063317716, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.3855511439187467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.47244327936004993, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.48452119903322455, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.5748516586763799, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Invoice.BillingState))", "score": -0.601803973798269, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingCity),Invoice.BillingState))", "score": -0.627245560769552, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.6646288223719239, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingCity))", "score": -0.6670547914845883, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6672444497389733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.6970450468515992, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.7239986248468995, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Employee.State),Invoice.BillingState))", "score": -0.7453482900900781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.7468585558390259, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2511552304711659, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2655657962426786, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2929050187276074, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3073155844991201, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3307413212390039, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3451518870105167, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34666611691644017, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37249113359770597, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.Quantity,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37849496700011687, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3869016993692187, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3873156662655894, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3994468686201372, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41718342870161784, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42931467712624655, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43556812941656164, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.3657747665116109, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Country),Customer.Country))", "score": -0.3701351600886208, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.40010131655107783, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Country),Customer.Country))", "score": -0.4044617101280877, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.4065341968807505, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,11085915), Customer.Country),Customer.Country))", "score": -0.40935496283944833, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Country),Customer.Country))", "score": -0.4108945904577604, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.Milliseconds),Customer.Country))", "score": -0.4249854270695385, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.44086074692021743, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Country),Customer.Country))", "score": -0.4452211404972273, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,11085915), Customer.Country),Customer.Country))", "score": -0.45021680164536904, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Phone))", "score": -0.4510190264622624, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Address),Customer.Country))", "score": -0.4550856440508381, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Country),Customer.Phone))", "score": -0.4553794200392723, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.Milliseconds),Customer.Country))", "score": -0.45931197710900545, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.06871898717183601, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1436712476257065, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15345637162872186, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.23354316235438752, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Track.TrackId),Invoice.Total)", "score": -0.24895322345146248, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25896417260844784, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.2924608694275349, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.29382989831927586, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.2968044777834639, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.Total),Invoice.Total)", "score": -0.29745137428603685, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.29748727266598807, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.29796526909072685, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Artist.ArtistId,Track.AlbumId),Album.Title,=,Iron Maiden),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3074482632362512, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3182805706817816, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices of tracks belonging to the album titled Iron Maiden?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceDate),Invoice.Total)", "score": -0.31977037684285564, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Customer.City),Customer.City))", "score": -0.06987893605808851, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Customer.Company),Customer.City))", "score": -0.19839096930188294, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.2141967289507101, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Customer.City),Customer.City))", "score": -0.22230268563562283, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.2443989543754474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.27092383007642845, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.3051313110252316, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Customer.State),Customer.City))", "score": -0.3221315704512893, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,1.99), Customer.City),Customer.City))", "score": -0.32724941392947215, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.33505266546438955, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.33533353644996894, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Customer.Company),Customer.City))", "score": -0.34469517029130325, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingCity),Customer.City))", "score": -0.3528790931610897, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.36245810439908877, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3652548908891268, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.05872342910859389, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.2928124584034783, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.563582722449775, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.7976717517446594, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.State))", "score": -0.824019484065701, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.LastName))", "score": -0.9247910229363119, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.State),Customer.Company))", "score": -0.9566427226264931, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),MediaType.Name))", "score": -1.0105082700567096, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Email))", "score": -1.0126084484766353, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Employee.Country))", "score": -1.0171732951772094, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -1.0345578115795653, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Album.Title))", "score": -1.0947634525852556, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Address))", "score": -1.12343452344243, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Employee.Country),Customer.Company))", "score": -1.1429990386183047, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "Are there customer companies?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -1.169793496999287, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.027635087673843373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.3736807074819808, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.4843088322741096, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.City))", "score": -0.512266736892343, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.City),Customer.PostalCode))", "score": -0.594208977134258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),InvoiceLine.InvoiceLineId))", "score": -0.6268369969402556, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.6381165799175506, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Email),Customer.PostalCode))", "score": -0.6597757553172414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.LastName),Customer.PostalCode))", "score": -0.6988850449633901, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.Fax))", "score": -0.7151798423801665, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7221324974161689, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7224889331919258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Employee.PostalCode))", "score": -0.7297522243534331, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7635264927012031, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Employee.PostalCode),Customer.PostalCode))", "score": -0.7750032757830922, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Track.Milliseconds)", "score": -0.15891755150176873, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Invoice.Total)", "score": -0.16838830396595897, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Track.Milliseconds)", "score": -0.16936505202670823, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Invoice.Total)", "score": -0.18368498731403665, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Invoice.Total)", "score": -0.2281946824158431, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.254964671429712, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Track.UnitPrice)", "score": -0.25687246559418664, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2692846067170404, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.28175121191515595, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Track.UnitPrice)", "score": -0.28267187743567884, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2912219643793462, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day), Track.TrackId),Track.Milliseconds)", "score": -0.30386388279319415, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30878512855813944, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),getData(Track),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3101718943680927, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on a purchase of tracks from artists other than Green Day?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Green Day),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31712858702601227, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Green Day),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.07216815474139045, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.11896344655680112, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.14994460149302077, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.28195929832882, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.29397545443739864, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.359233083171402, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.370049380524647, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3889816112749651, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3938843227282838, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Album.Title,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4151411350928054, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.41807963688744465, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4308057079791138, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.43088887284986116, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4354338381492246, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Album.AlbumId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.440417499505717, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.20452268696467799, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2250410717972469, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps), Track.TrackId),Track.UnitPrice)", "score": -0.23512320311385632, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2575561736358968, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps), Track.TrackId),Track.UnitPrice)", "score": -0.2595912282165026, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2780745584684657, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2793109874207533, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2862207913372145, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.29199066619998343, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2998293722533222, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3067391761697834, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.33234447409197204, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3392542780084333, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3515664228344851, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from the album Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35286285892454095, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.3577993403094309, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.36309469314750703, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.GenreId,Track.TrackId),Track.Milliseconds,=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.3927426768310317, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.GenreId,Track.TrackId),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.3980380296691079, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.41736292306799855, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.41958679219366185, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.422009486080095, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.4242333552057583, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.4312229853468716, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.4351709010988998, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,=,248032), Track.Milliseconds),Track.Composer))", "score": -0.4362411641526407, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Milliseconds))", "score": -0.4365183381849478, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,>=,248032), Track.Milliseconds),Track.Composer))", "score": -0.4415365169907169, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,=,248032), Track.Composer),Track.Milliseconds))", "score": -0.4427593269256556, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds,>=,248032), Track.Composer),Track.Milliseconds))", "score": -0.44805468640894436, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.01909965494996868, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Address),Customer.FirstName))", "score": -0.4333432897401508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Address))", "score": -0.5359596450289246, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Email),Customer.FirstName))", "score": -0.5843252524209674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.6323885178135242, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Email))", "score": -0.6447568376024719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), InvoiceLine.UnitPrice),Customer.FirstName))", "score": -0.6816028341127094, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.State),Customer.FirstName))", "score": -0.7073429807496723, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.FirstName))", "score": -0.7215042550524231, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Country),Customer.FirstName))", "score": -0.7266692503762897, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.7564540957973804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Country))", "score": -0.786900802369928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.8051088308857288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Track.Name))", "score": -0.8056082565744873, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.State))", "score": -0.8176061351259705, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.08181906147189875, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.1575587285777899, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15836720029800055, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.20746677913899994, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.22646972851270813, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2357603100397659, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),getData(Invoice),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24523274183144483, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.250773754274347, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.25405704309417465, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2581338738947083, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.26247908171082673, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2733288537661916, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2848526455657691, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Track.TrackId),Invoice.Total)", "score": -0.3360076443977581, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.3368868828552991, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30236763991760696, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31623660464321707, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.31839712891730254, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3280425474366802, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34191151216229027, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.3588926601738242, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.AlbumId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36603444733677204, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.AlbumId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3799034120623821, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39170935485584524, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40557831958145535, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.41400903608500184, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.41673909079636384, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.41945476204684495, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43060805552197395, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Album),Genre.Name,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),Genre.Name,=,Renato Russo - Marisa Monte),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.44156112904837913, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.Title))", "score": -0.13702662401010457, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.BirthDate))", "score": -0.2982506241660303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.BirthDate),Employee.Title))", "score": -0.35874173157026235, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.City))", "score": -0.4312952395539469, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.City),Employee.Title))", "score": -0.4513816248636431, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Address),Employee.Title))", "score": -0.4734530162077135, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.Address))", "score": -0.4994545813660807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.HireDate),Employee.Title))", "score": -0.503162951396007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.BirthDate),Employee.BirthDate))", "score": -0.5199657317261881, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Title,=,General Manager), Employee.Title),Employee.Title))", "score": -0.5450202517222351, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.PostalCode))", "score": -0.5450847979645914, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Title),Employee.Email))", "score": -0.5478710766892618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,General Manager), Employee.Title),Employee.Title))", "score": -0.5688967091973609, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.Email),Employee.Title))", "score": -0.5742234896879381, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the name of our general manager?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.PostalCode),Employee.Title))", "score": -0.5822418939333147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,General Manager), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.09989066473217119, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,<=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.15185257902099772, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.38824640517263465, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.4286533627483009, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.43101298530758525, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.44214660093087854, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.5226104439429587, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.5429202824066564, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)", "score": -0.5568219314988934, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5697802407083975, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),Track.Milliseconds,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5756174974335476, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.5809138563316908, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),Track.Milliseconds,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.5867511448151136, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5888938845486591, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a unit price of 0.99 ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6176463070686763, "correct_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.04218202571987193, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3988966155378717, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.49924320868336247, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.547565924437298, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6259179287140887, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6414163051900329, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6479125175827888, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6548625485686292, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6795492375006315, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6961461735699553, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7147149537465024, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7262645218595795, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Customer.Address)", "score": -0.7318368257102893, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Phone,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.737734545779265, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.7573040789969886, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "who are you", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.1815795692481245, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.38819362575660105, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.7234829360053553, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.7642977379434651, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.7781041397599261, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.7932812386822551, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Bytes)", "score": -0.8012412773350005, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.8024959826194985, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.8025467465961578, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(PlaylistTrack),Track.TrackId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.8039856639343513, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(PlaylistTrack),Track.TrackId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Bytes)", "score": -0.8119457025870968, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Bytes)", "score": -0.8158640376152613, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,PlaylistTrack.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.8165126147931528, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,Track.GenreId),getData(Track),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.824294879709059, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,PlaylistTrack.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Bytes)", "score": -0.8244726534458983, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.04854559614516851, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.13907738701425398, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))", "score": -0.17867860223746093, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.28171741934125194, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.35572958506605046, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,<=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.48795568560268965, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "count(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.4914263294083008, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))", "score": -0.4918052109970069, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.49527492242002086, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,=,Comedy), MediaType.Name),MediaType.Name)", "score": -0.49799852563040337, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.5009526983825161, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.5196986140886014, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.5215603769492898, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Track.UnitPrice))", "score": -0.5219138456146508, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),Track.Name))", "score": -0.5247977969975596, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
