{"index": 0, "beams": [{"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.09531073788077866, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.11498266729124423, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.19013270803322488, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.19385223104938812, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Track.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.24235754508316457, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2763206347714874, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2777806716065879, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3075319614413416, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3148060839750045, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),merge(getData(Track),getData(Album),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.31669481337766137, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.32140848623981755, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Track.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.32170271731022876, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.32972215367619945, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33784280526774507, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Track.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3530904189627767, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.10943306430999655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.11465013965789694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3964667339605512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5038688371598387, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5118498821539106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.553689362553996, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5612159986776533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.Total),Invoice.BillingState))", "score": -0.684702975282562, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.Total),Invoice.BillingState))", "score": -0.6899200506304624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.710392934808624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.7156100101565244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Customer.Country))", "score": -0.7254656721634092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Customer.Country))", "score": -0.7306827475113096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.7623387776111485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.7675558529590489, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.13627726516666086, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21125354862086004, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23865674958715716, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.26536360787422064, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2743293095879582, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29759984841279286, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31292041317958635, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31363303317979824, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.35397963268231003, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId), Album.Title),Album.Title))", "score": -0.3723122303511088, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId), Album.Title),Album.Title))", "score": -0.37768212475390667, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.38654787500556254, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(getData(Playlist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.39033778324954027, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.39191776940836043, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the music genre Classical?", "inferred_code": "count(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.40299122224084555, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.054303122004057514, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.19847674041011487, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Track.UnitPrice))", "score": -0.5221577461525158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Customer.State),Employee.State))", "score": -0.5632398917987302, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Customer.State))", "score": -0.5730717953010753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.6392078933022276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.6540725764534727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Track.UnitPrice),Employee.State))", "score": -0.6624770953967527, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.HireDate))", "score": -0.6625550564094738, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.State),Track.UnitPrice))", "score": -0.6663313645585731, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.666414612223889, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.HireDate),Employee.State))", "score": -0.6669700935199216, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Customer.State),Employee.State))", "score": -0.7074135102047876, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.7130452927849547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.State),Customer.State))", "score": -0.7172454137071327, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.06787131782170569, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.11748643143118692, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.177928445879194, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2802696784197899, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.29550102665418254, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31168804272434747, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3745912501090991, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3862181211152807, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3976910623498396, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.40803375924522717, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.4129740654827918, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.41649554035203645, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.427089801462529, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.47650195060163875, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4878221516130556, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.058865902879915666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.30551552952238126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.35494756692060037, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.4255981989692735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.439888499341808, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.47211552605304424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5006896740429421, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.Country),Employee.Country))", "score": -0.518291977764935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5266308398121272, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.534923674473248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.5373335775007305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5383343725849885, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Country),Employee.Country))", "score": -0.5465946292988099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5592837939916017, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.5610062543831946, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.03324507246203379, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.08882955959894517, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2623480210462867, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2639716693669725, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Customer.LastName))", "score": -0.3225974825398091, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.33157080304937475, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.MediaTypeId))", "score": -0.3402379289395053, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.342537270267878, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(Playlist),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.34672879849364446, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Customer.Company))", "score": -0.3474457920263237, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.38305330920233827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Invoice.BillingState), MediaType.Name),MediaType.Name))", "score": -0.39505932067134536, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.4051450565380654, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.MediaTypeId))", "score": -0.41091156823621344, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which sort of different media types are in the playlist Grunge included?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.41971633737004715, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.11763378676550929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.11892124709265772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.35328992900031153, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.46772051945717225, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4722503216538754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.4847582250513369, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.505378846186303, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5099086483830062, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5182748108782107, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5409558701807315, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.5454856723774347, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.6194061904825503, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.6692400842584902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Madison), Customer.FirstName),Customer.FirstName))", "score": -0.676019576159888, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Give me the first names of customers coming from a city different from Madison", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Madison), Customer.FirstName),Customer.Phone))", "score": -0.6879454136505956, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Madison), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.07383205374952016, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.UnitPrice))", "score": -0.20050561472470552, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.2076129088201149, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.21892401756328625, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.2733140475705153, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Bytes))", "score": -0.2983711272293134, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.3572894528143473, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.3711581382623816, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.4000289949297272, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.UnitPrice))", "score": -0.4081880401125882, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Composer))", "score": -0.415411984894729, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.UnitPrice))", "score": -0.42504468820449876, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.4510265427615058, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.UnitPrice))", "score": -0.47010312948425753, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.49863800596387314, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.1609576520655743, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.16283618467944358, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Mitchell),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.25985083924949176, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26342456817149085, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.Company,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2647618914354866, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Mitchell),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2653031007853601, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.27263464648107677, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29919907164273013, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3010776042565994, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3139974146826544, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31587593953860854, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3227422550737077, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Mitchell),merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.33093835934804694, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Mitchell),merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.3417001135123221, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average track length sold to customers supported by Mitchell?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Company,=,Mitchell),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.35006543201450435, "correct_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.1678454491921002, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.3095005292125279, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Employee.HireDate))", "score": -0.3554459202714497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.Title),Employee.HireDate))", "score": -0.40732332949119154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.42848046754079405, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.State),Employee.HireDate))", "score": -0.44649311785178725, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.Title))", "score": -0.4517134118505055, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.Address))", "score": -0.46333983425574843, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.Fax),Employee.HireDate))", "score": -0.47447189573722426, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.4971010002918774, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.State))", "score": -0.526166884941631, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.City),Employee.HireDate))", "score": -0.5318503666348988, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.Title),Employee.BirthDate))", "score": -0.5489784095116192, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.Address),Employee.HireDate))", "score": -0.5497166800923878, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.5529073092766339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.Address))", "score": -0.34746620290752617, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.Title))", "score": -0.37550391488548485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.HireDate))", "score": -0.43005408578392235, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.FirstName))", "score": -0.46238284044738975, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.FirstName),Employee.Address))", "score": -0.46627600722786156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.State))", "score": -0.4763230257558462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.BirthDate))", "score": -0.47916628652092186, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.FirstName),Employee.Title))", "score": -0.49431371920582023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.State),Employee.Address))", "score": -0.4993686401176092, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.BirthDate),Employee.Address))", "score": -0.5174461328315374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.State),Employee.Title))", "score": -0.5274063520955679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Title),Employee.Address))", "score": -0.5277589284705755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.Address),Employee.Fax))", "score": -0.5427389317082998, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.BirthDate),Employee.Title))", "score": -0.5454838448094961, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": "What are the adresses of employees which are hired until 2002-08-14 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-08-14 00:00:00), Employee.FirstName),Employee.HireDate))", "score": -0.5488638901042577, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-08-14 00:00:00), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.060785700035921764, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.Company))", "score": -0.3602357398995082, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.Fax))", "score": -0.3635790240296046, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.City))", "score": -0.3802104484566371, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Company),Customer.City))", "score": -0.41766946430288954, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Employee.City),Customer.City))", "score": -0.46415178890310926, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Employee.City))", "score": -0.47330932731711073, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.City))", "score": -0.5722895156868617, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Invoice.BillingCity))", "score": -0.5729704093464534, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Album.Title))", "score": -0.5952286314495723, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.6327022820987622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.State))", "score": -0.6535198878773372, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.6600829279559548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.Company))", "score": -0.6796604883202235, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.Fax))", "score": -0.68300377245032, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.07354071413335557, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.08794995903824987, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.14363032685794522, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2401995299687775, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2537287982687632, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.28262237053938977, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2924192940945398, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3011559507713484, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.315494163928516, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32271674786608395, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))", "score": -0.33610488502851316, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34641197256235057, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3588134365117159, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.37421327409615507, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.39168524803673477, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.019139999465448736, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.4419022651679459, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Beto Guedes, M\u00e1rcio Borges),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.46920043272180173, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.4740638452570268, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.49739159865180754, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.5095882810637571, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5164015605285527, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5239616264209943, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.5295531787408884, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Beto Guedes, M\u00e1rcio Borges),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.5341310379189864, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5636111312176076, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.5692417315566342, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.5706623808738428, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Bytes)", "score": -0.5830347019432064, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,>,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.629709839270147, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.18239812122192234, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(filter(getData(Track),Track.Bytes,=,6252071),Track.UnitPrice),Track.UnitPrice))", "score": -0.19281012625287985, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,=,6252071),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.49261774080175297, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,=,6252071),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5081178310148537, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes,=,6252071),Track.UnitPrice),Track.UnitPrice))", "score": -0.5152520428158045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,=,6252071),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId),Track.Bytes),Track.UnitPrice))", "score": -0.5185531893411586, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Bytes,=,6252071),Track.UnitPrice),Track.UnitPrice))", "score": -0.5213009228906028, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,=,6252071),getData(Track),Genre.GenreId,Track.Bytes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5350257509519918, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,=,6252071),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5497225324257685, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes,=,6252071),Track.UnitPrice),Track.UnitPrice))", "score": -0.5511544723493047, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,=,6252071),getData(Track),Genre.GenreId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5555953337045242, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,=,6252071),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId),Track.Bytes),Track.UnitPrice))", "score": -0.5601578907520735, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,=,6252071),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.5668852558928568, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,=,6252071),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.5720977511922098, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,=,6252071),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.599756331599023, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.05887813515659785, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1423291197227777, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15305958332068131, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.167293721949064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.19443517722216108, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.21462612173629275, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.21479030867801804, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22765388287608146, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2308322007785955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23756417744856664, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Album.Title,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.254373916397292, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26740462947292787, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27024991965475226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.28457596965990184, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32041512988793, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.030144632454929925, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.20128085059984427, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24967325018180656, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3369620908983955, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3380719229356742, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.35349387387837555, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43701216849034913, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4380736015442145, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.4418385511720112, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4851174222815443, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4911213906336245, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4923636630964668, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5015187243816764, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.5023426159411856, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Customer.State)", "score": -0.5155311506710777, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.0994663586053034, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.10044256691600263, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,null,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.23565426694695918, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))", "score": -0.2766254274442149, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2972319936926372, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,0.99), Customer.Address),Customer.Address))", "score": -0.3400559131821109, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,0.99),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3688046524186216, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.37715916634494334, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.386129448190701, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3891480094300266, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.39574531512862887, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.4041229882546402, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,0.99),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.4071124777964087, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.41595411502999197, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Invoice.InvoiceId))", "score": -0.4349070638572601, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Raul Seixas),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11848992958369726, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14596783235952607, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.156683080888377, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Raul Seixas),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1618994506867327, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17098895226544905, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18937735346256152, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.1900665361522389, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20094408123332952, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), None),None)", "score": -0.20707129230700785, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.20801890495886383, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22563922122830693, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22761471589340695, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2387440429257836, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24245268411794113, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2554482024209497, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.1714430277354411, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.20450567838548905, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.20953595530290534, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.2764372454332366, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.2886832930021476, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.31909937022839735, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.33297925235135345, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),Track.Name),Track.Name))", "score": -0.375361514075772, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name),Track.Name))", "score": -0.3771441326670999, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Track.Name),Track.Name))", "score": -0.3930469109066516, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.39443019842480775, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3984322024813758, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.4045745730796038, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Track.UnitPrice),Track.Name))", "score": -0.4173865348559856, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.UnitPrice),Track.Name))", "score": -0.45319365706965925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.19732322057825513, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.21316959222895093, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Customer.State))", "score": -0.3865102778945584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.Total),Customer.State))", "score": -0.4023566495452542, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.4803655266587157, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.4894470840517897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.4962118983094115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.5052934557024855, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.BillingState),Customer.Country))", "score": -0.5155960570846219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Invoice.Total),Customer.Country))", "score": -0.5314424287353177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.5696197867218871, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Invoice.BillingState),Invoice.BillingState))", "score": -0.5727922700170893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.5854661583725829, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton), Customer.State),Invoice.BillingState))", "score": -0.5862494360480923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}, {"orig_question": "Get all states that have a city called Edmonton", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Edmonton), Invoice.Total),Invoice.BillingState))", "score": -0.5886386416677851, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Employee.Email),Track.Milliseconds))", "score": -0.34338634603500395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1970-05-29 00:00:00), Employee.Email),Track.Milliseconds))", "score": -0.358818942241669, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Employee.Email),Employee.Email))", "score": -0.38136189573287993, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.38499323421001463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1970-05-29 00:00:00), Employee.Email),Employee.Email))", "score": -0.39679449193954497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1970-05-29 00:00:00), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.4004258304166797, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Invoice.BillingAddress),Employee.Email))", "score": -0.4229687839078906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1970-05-29 00:00:00), Invoice.BillingAddress),Employee.Email))", "score": -0.43840138011455565, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Customer.Email),Track.Milliseconds))", "score": -0.4813906490135196, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<=,1970-05-29 00:00:00), Employee.Email),Track.Milliseconds))", "score": -0.49442821138381987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1970-05-29 00:00:00), Customer.Email),Track.Milliseconds))", "score": -0.4968232452201846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.City,<=,1970-05-29 00:00:00), Employee.Email),Track.Milliseconds))", "score": -0.49846773736953764, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.5193661987113956, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<=,1970-05-29 00:00:00), Employee.Email),Employee.Email))", "score": -0.5324037610816958, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the people who were born on 29.05.1970 or before?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1970-05-29 00:00:00), Customer.Email),Employee.Email))", "score": -0.5347987949180606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1970-05-29 00:00:00), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.038382493976314436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Address),Customer.Email))", "score": -0.3988127178436116, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.43187122318535043, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Address))", "score": -0.49306285902093805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.5739897373987333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Customer.LastName,!=,Gruber),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Email),Customer.Email))", "score": -0.6279016004314417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Customer.LastName,!=,Gruber),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.6413585999188934, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.LastName),Customer.Email))", "score": -0.6584329075103597, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Customer.LastName,!=,Gruber),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.6747083426052077, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.6805860880685941, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.7085183743311063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Customer.LastName,!=,Gruber),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.InvoiceId), Customer.Email),Customer.Email))", "score": -0.7262841185053837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Gruber), Customer.Email),Customer.Email))", "score": -0.7302372734684468, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.LastName))", "score": -0.7700856380088226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.State),Customer.Email))", "score": -0.7755490011459187, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.14089289517505676, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.16182056279285462, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.26943758339984925, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.2903652510176471, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3165317983304133, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.37164658907393266, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.37583339850369674, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.43078891679179737, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4504301270972064, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4542484620757963, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.460766937173803, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4713577947150043, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5037145792247727, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.5092039893626223, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.5157224644606291, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3209428340126451, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3355891129340443, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.36133377848324316, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2010-07-14 00:00:00), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.3759800574046423, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3961451632334641, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingPostalCode))", "score": -0.40205192436161596, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.40701159207050747, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.InvoiceDate,>,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4107914421548633, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2010-07-14 00:00:00), MediaType.Name),Invoice.BillingPostalCode))", "score": -0.4166982032830151, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4168674524176062, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2010-07-14 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4216578709919066, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.42226553138208006, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceDate,>,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4315137313390054, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5040540317782247, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices made on 2010-07-14 at 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2010-07-14 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5171364341806345, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-14 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.11048632039819495, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.21294539346490637, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Company),Customer.Company))", "score": -0.25293581857476966, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.4685295078008398, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.5069569789503571, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Company))", "score": -0.5462358362892701, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.5740279621738008, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Fax),Customer.Company))", "score": -0.5753251930618717, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.5809404881326315, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Company))", "score": -0.5957556089306308, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.6187889714869805, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.Company),Customer.Company))", "score": -0.6348981030205323, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Country))", "score": -0.6353127436632349, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.6615805394867493, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Fax),Customer.Company))", "score": -0.6777842661285831, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.14098452939308295, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.16369337723464483, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.1851860703896952, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.20513435306223637, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2180077220179378, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.22159013448780482, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2517771896305736, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2608194867007352, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.26513418171592257, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28573995815695824, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2867728507549309, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2939368829800966, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.29581514782509255, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),Invoice.InvoiceId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.30110283514604996, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),PlaylistTrack.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.30169526567492483, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.028881433353081677, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Movies), Track.TrackId),Track.Bytes)", "score": -0.17493757101706686, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.25532574872047226, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.3579094341857053, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.40660183492276564, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.4237472325195506, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.44683118970586594, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4506626543761319, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.4526561187627514, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,<,Movies), Track.TrackId),Track.Bytes)", "score": -0.45303038771603954, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.45725632363395696, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.48417615966116334, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4963497907602985, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Employee.Country,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.4976616978637742, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.5006482115191593, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.012694186063527013, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Employee.PostalCode))", "score": -0.5278814299945225, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.58597951126103, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.6083896621112217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.6268919085250673, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Customer.PostalCode))", "score": -0.6316807958046411, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Artist.Name))", "score": -0.6401004060153355, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.6707983512878855, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.Phone))", "score": -0.6972330077533115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Artist.ArtistId))", "score": -0.7652807696704258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7838947268883203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.7894927759170969, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.7967683572769602, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.Phone),Customer.PostalCode))", "score": -0.7979275080124353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.8209790595556115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21910453467873003, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2310884229623252, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.24295326398041042, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2651825539793111, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2761448382899164, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2876884803554276, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2880096793080016, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3018176612450244, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3093402251979569, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3316433197889397, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3370570120546257, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.35480451821655523, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3601418820886416, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,94040-111), Genre.Name),Genre.Name))", "score": -0.36352207385017304, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(MediaType),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.37208775594905424, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Fax),Customer.Fax))", "score": -0.4089214418818301, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.Fax),Customer.Fax))", "score": -0.4225191538025683, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.LastName),Customer.Fax))", "score": -0.43531568989055813, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.LastName),Customer.Fax))", "score": -0.44891340181129635, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.46089027663587295, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Fax),Customer.City))", "score": -0.47327108576791943, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.Fax),Customer.City))", "score": -0.48686879768865765, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Fax),Customer.Fax))", "score": -0.4944714967896289, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.LastName),Customer.City))", "score": -0.49966533377664746, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.5037199273178208, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.LastName),Customer.City))", "score": -0.5132630456973857, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Customer.Fax))", "score": -0.5208657447983569, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.Fax))", "score": -0.5325494323660678, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.5431659089678382, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.City),Customer.Fax))", "score": -0.546147144286806, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.13827638589282287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.3497285272969748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.3813035216226126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.41567415260215057, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Artist.Name))", "score": -0.41694095991988434, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Fax),Employee.Title))", "score": -0.41818896569748176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.City),Employee.Title))", "score": -0.44445577897568, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Fax))", "score": -0.4600521948232199, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Album.ArtistId))", "score": -0.536498579014733, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.BirthDate),Employee.Title))", "score": -0.536840713401034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Album.ArtistId),Employee.Title))", "score": -0.5536542300178553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Album.Title))", "score": -0.5923374619378592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.5974790182008292, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.6271262940063025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Artist.Name))", "score": -0.6283931013240363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Customer.State))", "score": -0.1204684870717756, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.State),Customer.State))", "score": -0.1933960738060705, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.State))", "score": -0.21688447617270867, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.State))", "score": -0.4286931576607458, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Customer.Country))", "score": -0.5283983881054155, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Employee.State))", "score": -0.5708616311130754, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.State),Customer.State))", "score": -0.598563772666239, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.State))", "score": -0.599063856567227, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.State),Customer.Country))", "score": -0.6013259748397104, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,None), Customer.State),Customer.State))", "score": -0.6115482869026891, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Invoice.BillingState))", "score": -0.618566029745125, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.Country))", "score": -0.6248143772063486, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.State),Employee.State))", "score": -0.6437892178473703, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.State),Customer.State))", "score": -0.6620746078369848, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Employee.State))", "score": -0.6672776202140085, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.BirthDate),Track.Bytes))", "score": -0.3107410383163369, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.BirthDate),Employee.Title))", "score": -0.33354709416016703, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.Address),Track.Bytes))", "score": -0.38213590651139384, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.Address),Employee.Title))", "score": -0.40494196235522395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.Title),Track.Bytes))", "score": -0.41111794977769023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.Title),Employee.Title))", "score": -0.43392400562152034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.47508148222550517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1947-09-19 00:00:00), Employee.BirthDate),Track.Bytes))", "score": -0.4829731073914445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Track.Bytes),Track.Bytes))", "score": -0.49486056833848124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1947-09-19 00:00:00), Employee.BirthDate),Employee.Title))", "score": -0.5057791632352746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Track.Bytes),Employee.Title))", "score": -0.5176666241823114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.BirthDate),Track.Bytes))", "score": -0.5264736016033567, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1947-09-19 00:00:00), Employee.Address),Employee.BirthDate))", "score": -0.5464763504205621, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1947-09-19 00:00:00), Employee.BirthDate),Employee.Title))", "score": -0.5492796574471868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What PostalCode do the employees have who were born after September 19th 1947?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1947-09-19 00:00:00), Employee.Address),Track.Bytes))", "score": -0.5543679755865014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1947-09-19 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.10631986772712372, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.20203670564941079, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.2397727502501336, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.24769959909942688, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.26599867828293566, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.27831874633210374, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2834528622173596, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.Address,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.2951930397856157, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingPostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.30451669245555746, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingPostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.33855716671886027, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.34909898860626243, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.35365449571949903, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,!=,T2P 5M5),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3546440200936742, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.3599464895342089, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,T2P 5M5),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.37229581253886496, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.2679112434175229, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.27057705905186785, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.2780217931487784, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.27937233903905034, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.28203815467339527, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.28342338078550117, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Izzy Stradlin'/W. Axl Rose),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.3142405500530103, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.32467142549526784, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Izzy Stradlin'/W. Axl Rose),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.35579344095641174, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Artist.ArtistId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Izzy Stradlin'/W. Axl Rose),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.36000964671058794, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.37361528007405953, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.37628109570840446, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.3773464423470527, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.3800122579813977, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.3850763662815358, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.2541251714264945, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.28976515037174977, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.36290292252217765, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Santiago), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.3679004321729735, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.3996539960966115, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Santiago), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.4035404111182288, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.43056606637305694, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.43167537947955753, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.4437398016250759, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,!=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.4523704546427325, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.4880104335879878, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.48923745028856713, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Santiago), Track.Bytes),Track.UnitPrice))", "score": -0.49160938066597737, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Santiago), Track.UnitPrice),Track.UnitPrice))", "score": -0.496611063454111, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "What tracks were invoiced in Santiago?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Santiago), Track.UnitPrice),Album.Title))", "score": -0.5033136651375341, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Santiago),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.008057240301707487, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.6937772892458837, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7401536960700085, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7527503534613149, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7630824793639552, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.8199882551247919, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.8527705134197381, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.85759416862129, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.8600383166849497, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.8655775132512733, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.9044474034284902, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.9599260379254702, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.9623701859891298, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Album.Title))", "score": -1.0350140087624493, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there no album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId), Artist.Name),Album.Title))", "score": -1.0357123863009075, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.01588206602173159, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Customer.Phone))", "score": -0.47306972093792865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.FirstName),Employee.Phone))", "score": -0.522234618467337, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6062119526686729, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6455161694684648, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6655095739188255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Customer.Phone),Employee.Phone))", "score": -0.6720741985263885, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Country),Employee.Phone))", "score": -0.6736482975902618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.FirstName))", "score": -0.6850439841291518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.685375861627108, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone)", "score": -0.7163741607950237, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.7442428989234031, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone)", "score": -0.7617241782833974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone)", "score": -0.7863767946599433, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.8306446207934641, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21290317382296492, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2684457186913767, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.GenreId),Track.Composer,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27740861456568666, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2878541452963588, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2980299737773106, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3040650968600107, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.UnitPrice,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.30780118822902863, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3098640935186237, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3154287763635534, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),Album.AlbumId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.32065344096141635, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3266885640441164, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.33248756070272945, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),Genre.GenreId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.34080106347304584, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.350954806999168, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "How many different cities have protected AAC audio tracks been ordered from?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),Track.Composer,=,Protected AAC audio file),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3561658822140527, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25023226176742547, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25656569870572116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2597820879239276, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26751392567963733, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3119825453725651, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3509494783764173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.357282915314713, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId),Playlist.Name,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36049930453291945, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3682311422886292, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.38023275064215295, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Argentina), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.386505410466077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3865661875804487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Argentina), Invoice.BillingAddress),Invoice.Total))", "score": -0.3883868384964199, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Playlist.Name,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3897826022719701, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4502610776683136, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.022834086581497104, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Customer.City))", "score": -0.3706665418812918, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Employee.City))", "score": -0.4605676017472433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5291134638482617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5528347764888865, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5840158667651849, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6285361007558095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.6299729691065359, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.Total),Invoice.BillingCity))", "score": -0.6420576495820569, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6690669141480612, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Employee.City),Invoice.BillingCity))", "score": -0.7001239580804395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Customer.Company))", "score": -0.7032846294114279, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.7281465612122702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Employee.City))", "score": -0.7343404895954623, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 162 E Superior Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7591346707431512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,162 E Superior Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.13693169855622372, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1584250791697263, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.17174366615966308, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.17963980500093066, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.1903010337947642, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.1918314050756807, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.19514856917547238, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.19691426312201757, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.1997983999553136, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22500852515327388, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.23524463938602633, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.23893934649134208, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25846192915275695, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.26719788273409273, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,IT Staff),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2727179392965138, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.026448301534401253, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Employee.State))", "score": -0.3789656502485741, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.Country))", "score": -0.513656322407769, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.5180924544401933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.5191335985728074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.5310108501289506, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Country),Customer.State))", "score": -0.6371752519917209, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Invoice.BillingState))", "score": -0.6604353529692162, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Employee.State),Customer.State))", "score": -0.6606315870594699, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Fax),Customer.State))", "score": -0.6709605355572421, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.6818440566130448, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),InvoiceLine.UnitPrice))", "score": -0.7052152497053612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.Fax))", "score": -0.7084992272139061, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.7568081030913163, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Track.UnitPrice))", "score": -0.7642534119368065, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.18418031834220164, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.25579519410378665, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2559417431921615, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2625699396103551, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2866733173917397, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3047933003458195, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.3115801368167001, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.31401703340601084, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), Invoice.Total),InvoiceLine.Quantity))", "score": -0.31872021362939595, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.32755661895374655, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3341848153719401, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.334331364460315, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,Beethoven: Symphony No. 6 'Pastoral' Etc.),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.34313083370026937, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.34453192494351215, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times per invoice have the tracks from Beethoven's: Symphony No. 6 'Pastoral' Etc. been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), Invoice.Total),InvoiceLine.Quantity))", "score": -0.34923510516689726, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Beethoven: Symphony No. 6 'Pastoral' Etc.), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.11267414662324882, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14185729171538566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27742303538284924, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29865213278071817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3372004439243028, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Hungary),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3467277653471445, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3528749650049917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37790630685267385, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.38058106201970077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39833372401814976, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.40123280765766717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4045411123153898, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4184170713044904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.4251497548304187, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.44122780848817494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.07372800318172033, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.08626751611088689, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15425570415646728, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.16107323518856842, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - The Basics), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20178746451900276, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20748028656835105, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), None),None)", "score": -0.21562878918748773, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23656386908921936, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24257796808116197, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25158329163227716, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.25248511344051694, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.25883328281927104, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.2607426403084032, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.2729877391089214, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average invoice total of invoices containing tracks that feature on the \"Classical 101 - The Basics\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)", "score": -0.27674991241186087, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))", "score": -0.011309514861295611, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,358761786), Track.Name),Track.Name))", "score": -0.36478325502548614, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,358761786), Track.Name),Track.Name))", "score": -0.6024505189766387, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,<=,358761786), Track.Name),Track.Name))", "score": -0.7694204143394927, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Employee.LastName))", "score": -0.8247571383167269, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,null,358761786), Track.Name),Track.Name))", "score": -0.8488483108726541, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Album.Title))", "score": -0.8637644444156649, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,358761786), Track.Name),Track.Name))", "score": -0.8996246136871378, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,<=,358761786), Track.Name),Track.Name))", "score": -0.9022611669411162, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Playlist.Name),Track.Name))", "score": -0.9468054556841707, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,358761786), Track.Name),Track.Name))", "score": -0.9559242591408292, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Bytes))", "score": -0.9603496585536959, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Customer.LastName))", "score": -0.9951430354763033, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),MediaType.Name))", "score": -1.0044672880817416, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Employee.LastName),Track.Name))", "score": -1.005199589728818, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.014677402668894501, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.FirstName),Employee.Phone))", "score": -0.4374486278866243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.577653008618654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Customer.Phone))", "score": -0.6626533107955765, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6688152729657304, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.FirstName))", "score": -0.6775523262222123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.7148657023099076, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.7374539553311479, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.7679203926709306, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Country),Employee.Phone))", "score": -0.7733258973930788, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.7868402778294694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.801271217980684, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.8035353872000996, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.8079995690968644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.8340296327260148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.12322125486883133, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.13069965340101705, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13438209698523038, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19824485666683136, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.1987648473851222, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.269160999724135, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),InvoiceLine.UnitPrice,<=,15563967),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.28620172233057634, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,15563967),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.29235455063957144, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),InvoiceLine.UnitPrice,<=,15563967),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.35000236473083224, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,15563967),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.35615519303982734, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36961595373768463, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,<=,15563967),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3790285910833592, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,<=,15563967),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.38512059207225885, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4037580460352279, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Employee.State))", "score": -0.4109888295747524, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Tribute), Invoice.BillingState),Invoice.BillingState))", "score": -0.17482749092119662, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.19269049198063626, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.20838314121336846, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.23304826437301598, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Playlist),InvoiceLine.InvoiceId,Playlist.PlaylistId), Invoice.BillingState),Invoice.BillingState))", "score": -0.26934091827901435, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Tribute), Invoice.BillingState),Invoice.BillingState))", "score": -0.2740230845014925, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.27732375271167004, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2787163327497932, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Album.Title,=,Tribute), Invoice.BillingState),Invoice.BillingState))", "score": -0.27908003485413546, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.2982964260007204, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.State),Invoice.BillingState))", "score": -0.3050569024016728, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId),Album.Title,=,Tribute), Invoice.BillingState),Invoice.BillingState))", "score": -0.31897398765726404, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3197955401730552, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Tribute), Invoice.BillingState),Customer.State))", "score": -0.3226593160188003, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Playlist),Track.MediaTypeId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3310456058324819, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.046042516243687714, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.36798079253458127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.36979038954996213, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.4077150368811999, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.4892009988617842, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.5582997346045886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.5839598667789687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Phone),Customer.FirstName))", "score": -0.5941847955091362, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.Phone))", "score": -0.6091803082945262, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.6196391648556581, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.6367040961071432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.Fax))", "score": -0.6776330837728892, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Artist.ArtistId))", "score": -0.7108895549299632, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))", "score": -0.7279810452582751, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What are the first names of customers that have postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Email),Customer.FirstName))", "score": -0.7326510344846611, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.20519776659057243, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Album.Title))", "score": -0.35061689482972724, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.UnitPrice))", "score": -0.36358495818421943, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Bytes))", "score": -0.45771447585866554, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.47310577155817407, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.47352761814181576, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),Album.Title))", "score": -0.4758771264589142, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.MediaTypeId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.47651431038486824, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.48887165361773677, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),Album.Title))", "score": -0.4916430085184769, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.5220544429561953, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5266871484849653, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), Track.UnitPrice),Album.Title))", "score": -0.5294585033857055, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.MediaTypeId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.Name),Album.Title))", "score": -0.5318984493153315, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}, {"orig_question": "How many distinct track names are there which costs less than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.MediaTypeId,Genre.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5354409136140111, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Country))", "score": -0.10814641345677956, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.23575302888093574, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.42228058536817753, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.4557981484049378, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Phone))", "score": -0.5306334395372687, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Phone),Customer.Country))", "score": -0.5596240723916708, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.Country))", "score": -0.5965474836939393, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Invoice.BillingCountry))", "score": -0.6024601359331427, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Company))", "score": -0.6157002944910346, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.Country),Customer.Country))", "score": -0.6164420240038453, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCountry,=,None), Customer.Country),Customer.Country))", "score": -0.6236929024068705, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.6260912039329471, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Employee.Country))", "score": -0.6349503893816291, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Country),Customer.Country))", "score": -0.6530789978514804, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Phone))", "score": -0.6582400549614249, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))", "score": -0.0699431936958416, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Waters),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.13529132019588702, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Waters),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23744794301413077, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Waters),getData(Artist),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.26138782198488775, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))", "score": -0.286986052599194, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Waters),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30103850515189506, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Waters),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30477766437286424, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))", "score": -0.31215584219142867, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Waters), Artist.Name),Artist.Name))", "score": -0.3304311342853835, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Waters),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3403606680889763, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,=,Waters), Artist.Name),Artist.Name))", "score": -0.34338221061413404, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Waters),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34567238514547066, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))", "score": -0.3595531136741884, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Waters),getData(Album),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3635444631466871, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}, {"orig_question": "Whats the name of the artist for tracks composed by waters?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Album.Title),Artist.Name))", "score": -0.3667471428841011, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Waters), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.0310144622234949, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2200178490844433, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2368446296864678, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.26902338902155565, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3050129888752827, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.3120741595748818, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33269555134617423, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.348704535128202, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.37897761349825465, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4180866967785001, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4187443002330065, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.428521741878859, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4311685851984426, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.4332182615431474, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4382806977221985, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Arquivo Os Paralamas Do Sucesso),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2409375668856149, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2595037830332044, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.26090826304397113, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Arquivo Os Paralamas Do Sucesso),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28314310597089254, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3121819868188181, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Dark Side Of The Moon),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3148054372068847, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3242392774329341, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Dark Side Of The Moon),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32905597419091726, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,Dark Side Of The Moon),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.33166794428537666, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.33443568560495746, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Dark Side Of The Moon),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Customer.Company))", "score": -0.3352657562533132, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33536472969924475, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.33709127781716935, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Dark Side Of The Moon),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3398880097011338, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,Dark Side Of The Moon),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.34059098703338037, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.05805222217681802, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.07287814692397285, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.GenreId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28156481906066744, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.32780249902865666, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3426350363161088, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3748522123046954, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.404500938701589, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.43531863479417615, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.44195164506645435, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4443480790109086, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.44503302010859025, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.45822747963283555, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Artist.ArtistId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4621075001363586, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(MediaType),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.46290819384608545, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.AlbumId),Album.Title))", "score": -0.46578892938224553, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.0787906301942406, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.36764600909559725, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3692880584640079, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.38069114226527745, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.3964091915827044, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3987806676668697, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.41018375146813923, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.4424626678981103, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.45611574907427377, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.45812895167032736, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.46738970095224186, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.4931254674098991, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.49414526962607763, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,None),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.49615286128864033, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums with any title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.49615817983277716, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.08278161152338726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.33180748908853275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.34743999927377445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.41249101287758094, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.4437031043235038, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Track.Name),Employee.LastName))", "score": -0.49766727215683204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.Email),Employee.LastName))", "score": -0.5234253895941947, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Album.Title))", "score": -0.542206697678921, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Track.Name))", "score": -0.5430891444448207, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.5570234586957667, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.Title),Employee.LastName))", "score": -0.5572581780616019, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.Title))", "score": -0.5866629709962581, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5959927333060477, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5998886176857923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.6235860479537223, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))", "score": -0.02245941981436772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.Fax),Customer.Fax))", "score": -0.42293217442693276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,India), Customer.Fax),Customer.Fax))", "score": -0.5101971890753703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Album.Title))", "score": -0.5292275332822101, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Employee.Fax))", "score": -0.5301253580464618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.State),Customer.Fax))", "score": -0.639773789697756, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Employee.Fax),Customer.Fax))", "score": -0.6561300790845053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,India), Customer.Fax),Customer.Fax))", "score": -0.6885197427100138, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,India), Customer.Fax),Customer.Fax))", "score": -0.688543584567924, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7010286118811564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Album.Title),Customer.Fax))", "score": -0.7030333316861288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.City))", "score": -0.7138322972668902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,India), Customer.Fax),Customer.Fax))", "score": -0.7327710654562907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.State))", "score": -0.7392167829884784, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}, {"orig_question": "What is the Fax Number of Customers not in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.City),Customer.Fax))", "score": -0.7563687599240438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.03938241371939642, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3274405017656971, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3431786334174732, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.GenreId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3654205055158674, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.41452659757006494, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.4176752847891422, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.4625934913433982, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.47833162299517434, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.49238016974692345, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.GenreId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.5005734950935685, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.EmployeeId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.52211999664078, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.5253050977504906, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.5375570622733686, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.5436524768240315, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many distinct artists names are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5492744379846586, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.12121338888656064, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.17866538064143883, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.1885494887450334, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Invoice.BillingAddress))", "score": -0.19847095506098777, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.240530361862098, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2463063771863192, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.2601501524659882, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Invoice.BillingAddress))", "score": -0.2684788527437864, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Invoice.BillingAddress))", "score": -0.2880986433476766, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3037583689411974, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3267897236931101, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.3589242552896006, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.36633706142645883, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.3667712877011492, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.3676992127268426, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Title))", "score": -0.18786812373582507, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Title))", "score": -0.2911383042592206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Fax))", "score": -0.39168657907430315, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.City))", "score": -0.40519668706838274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.HireDate),Employee.Title))", "score": -0.4340291152257123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Title))", "score": -0.4443482289570966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.FirstName))", "score": -0.4647855664152303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.Title))", "score": -0.48283697464648867, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Address),Employee.Title))", "score": -0.48559786179248476, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Fax))", "score": -0.4949567595976987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.City))", "score": -0.5084668675917783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.PostalCode))", "score": -0.5168014670271077, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.PostalCode),Employee.Title))", "score": -0.517308486487309, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.HireDate))", "score": -0.517539521541039, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Address))", "score": -0.5300519669908681, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.1489139281320604, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.15355122910023056, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.23154182062626205, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.3921341531086, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.40883632824898086, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.43730848358154617, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4421185767302024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.4450805120277437, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.47036819964929366, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.5020963991680478, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5893550857669143, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.5945658318805727, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,For the Greater Good of God),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5996972938998724, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.627309524278644, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.6418355338382753, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.06280813443663646, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.39068415838482906, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Fax),Customer.Company))", "score": -0.43685083355012466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Employee.City),Customer.Company))", "score": -0.49052690233293106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.4944237408526533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.49757479022446205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5143697269559198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5208959450465045, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Fax))", "score": -0.5227762403264933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5495359011292749, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Country),Customer.Company))", "score": -0.5813519235998683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5927299566865258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Phone),Customer.Company))", "score": -0.6037344809919887, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Employee.Phone))", "score": -0.6266260089651041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Employee.Phone),Customer.Company))", "score": -0.6407653296664648, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.Total),Invoice.InvoiceDate))", "score": -0.18128175586934958, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.2412269741344062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.Total),Invoice.Total))", "score": -0.29320043623920355, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.BillingAddress),Invoice.Total))", "score": -0.35314565450426016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.40471071303363715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Chile), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4249730698811618, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.Total),Invoice.BillingAddress))", "score": -0.46826428473468695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Chile), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.4849182881462184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.Total),Invoice.BillingState))", "score": -0.498788091545066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5166293934034911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5282095029997436, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Chile), Invoice.Total),Invoice.Total))", "score": -0.5368917502510158, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.BillingState),Invoice.InvoiceDate))", "score": -0.5473888546275703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5544087618636695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.5587333098101226, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.08903354572794342, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21079529243252182, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40064899231038, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,20040-020), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4478358473526884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,20040-020), Invoice.BillingCity),InvoiceLine.Quantity)", "score": -0.49173594288537265, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.49903370699576044, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5224107390149584, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.544379483710145, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.5491594847171655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,20040-020), Employee.City),InvoiceLine.Quantity)", "score": -0.550434440752802, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5575193872555246, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,20040-020), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5872188366817009, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,20040-020), InvoiceLine.InvoiceLineId),Invoice.BillingCity)", "score": -0.5885856038536391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Employee.City))", "score": -0.605296420666491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,20040-020), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6084081853471612, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.014585959732357878, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Address),Customer.Country))", "score": -0.5577006337771309, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Employee.Country))", "score": -0.5630563269442064, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.5747594409695012, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Address))", "score": -0.6397769223040086, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.State),Customer.Country))", "score": -0.6519056556353462, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.6521398692348157, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.653848844121967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.State))", "score": -0.6552892695253831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Phone))", "score": -0.692874766427849, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.7042101793995243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.7057315879574162, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Phone),Customer.Country))", "score": -0.7077232597002876, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Employee.Country),Customer.Country))", "score": -0.7106850144991768, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.81598181467416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.0352807403012604, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3839952948077932, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.3888866980899637, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.42330779127834467, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Album.ArtistId,Genre.GenreId),Album.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.440289393246703, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Album.ArtistId,Genre.GenreId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4451807965288735, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.GenreId,Artist.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.46338445259808086, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.471603282294296, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.4747112689423816, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.48558939891181846, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.48630668398390253, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.49048082163385287, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.49119810670593694, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4919635185651778, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Artist.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.5341515766087441, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.15679209880909184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Track.Bytes))", "score": -0.301802570153086, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Track.Name))", "score": -0.3126635944136069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.3348371332176612, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Album.Title))", "score": -0.37254654817661503, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Track.UnitPrice))", "score": -0.38427668266376713, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.UnitPrice),Employee.LastName))", "score": -0.4495692776181386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Track.Bytes))", "score": -0.4798476045616553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Track.Name))", "score": -0.49070862882217625, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.5191128199585364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.Name),Employee.LastName))", "score": -0.5193096922375844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Album.Title))", "score": -0.5505915825851844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Track.UnitPrice))", "score": -0.5623217170723365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.UnitPrice),Track.Bytes))", "score": -0.5945797489621327, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.UnitPrice),Track.Name))", "score": -0.6054407732226537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.10516822617695383, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.18018755287002688, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19870188950833806, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20601330998970444, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21421267739167035, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23141319658321188, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2458013551843745, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25260361863929026, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,!=,MPEG audio file), Track.TrackId),Track.Bytes)", "score": -0.2611506586975404, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,!=,MPEG audio file), Track.TrackId),Track.Milliseconds)", "score": -0.2625708775529559, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2643163924079266, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.274317860925291, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.27985123353075525, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.InvoiceDate)", "score": -0.28046241020477874, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.31730126433315486, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.0393045448772682, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.2723117468021883, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.4723742303513063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Employee.Fax))", "score": -0.5573385150246395, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Album.Title))", "score": -0.5646402032189144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5762630698345674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5825597641132845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.FirstName),Customer.Fax))", "score": -0.6224735930636598, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.State),Customer.Fax))", "score": -0.6653851822093202, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6949692961834444, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Employee.Fax),Customer.Fax))", "score": -0.7089746549800111, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.City))", "score": -0.7179501445107235, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.FirstName))", "score": -0.7434131295494808, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.7568650242947115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Artist.Name))", "score": -0.7804365546517147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.11161348406357864, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.12185521877710948, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14885722835089477, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1873478198868203, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2648391723274599, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26523388764036093, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2840827633774269, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2918219482275107, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2946731469231219, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.29516560597552255, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29653753142616174, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3003233055090388, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(MediaType),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3165127689373386, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.31915647379980117, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3201350879027374, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.0162328407059249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.LastName))", "score": -0.5277951839270827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.5738502405474719, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.6030409838895139, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Name,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.6111055370691036, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.Title))", "score": -0.633701968461537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.636306659669364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.Email),Employee.FirstName))", "score": -0.6416067145655688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.Phone))", "score": -0.6677640559973952, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.Fax))", "score": -0.6725223543944594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.6728389169911679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Track.Name,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.6801983087789416, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Customer.FirstName))", "score": -0.6973664644065138, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.7205780806143594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.Title),Employee.FirstName))", "score": -0.7476796172450122, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.11182852008778778, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.23935152419072103, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Name))", "score": -0.23961173742542097, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.32686037591665085, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.349705783931372, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.3522905944361109, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.3633671368224363, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.36713474152835424, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Name))", "score": -0.3998812255590296, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.40945308970756716, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.41756832823323287, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.41820646925745386, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Album.Title))", "score": -0.42124259539061093, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.4362721021993625, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.43649270751453356, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,!=,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.16661010776305848, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,!=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.2164218105586665, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,!=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.35302976096348976, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.36523258264170155, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,!=,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.38088753931234165, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.4150442854373096, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,!=,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.4306992421079497, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.5459746249161438, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.5516522358421329, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,!=,Mountain View), Track.TrackId),Track.Bytes)", "score": -0.567307192512773, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.5772688980807205, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.5957863277117519, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.6145683734924324, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<,Mountain View), Track.TrackId),Track.Milliseconds)", "score": -0.6270806008763284, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the sum of all tracks ordered outside of Mountain View?", "inferred_code": "sum(distinct(filter(getData(Track),Invoice.InvoiceDate,!=,Mountain View), Track.TrackId),Track.UnitPrice)", "score": -0.6428913728073787, "correct_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.05921552316431189, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.23911616751138354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.Fax))", "score": -0.4211026801276603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Customer.Company))", "score": -0.4713732971358695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.5774729157346883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.HireDate))", "score": -0.5862915589023032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Invoice.BillingCity))", "score": -0.5906758977580466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,+1 (403) 262-3443), Employee.City),Employee.Fax))", "score": -0.6010033244747319, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Artist.Name))", "score": -0.6055964900660911, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.Fax),Employee.City))", "score": -0.6075057297493913, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.HireDate),Employee.City))", "score": -0.6300146489884355, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Customer.Fax))", "score": -0.6414665056872764, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,+1 (403) 262-3443), Employee.City),Customer.Company))", "score": -0.6512739414829412, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))", "score": -0.6627201939481893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}, {"orig_question": "In which City do employees live who do not have the employee phone number +1 (403) 262-3443 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Invoice.BillingCity),Employee.City))", "score": -0.6759891420151689, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,+1 (403) 262-3443), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.2471332615978432, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.27290500916420185, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.28427120422923985, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.29572081466599903, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.32149256223235767, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.3242526260761871, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.3308844925770469, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.33186890637977373, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.33285875729739567, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.35002437364254574, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.3592689300778061, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.36139056870758374, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.372840225363972, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.3804563701277876, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.38504071535711354, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.15091601990387465, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15561282352338052, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1640298184256718, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.1689129989175166, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.17966282244368278, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.18456752676289648, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.1980710253682949, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.24486377365301681, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.25616615642181106, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.25999700638766166, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28817447394481893, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.29992719193435463, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.31801990044933987, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.33616048916935476, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.36951580442442217, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.051899499451739516, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.25777110946316945, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2773628973604962, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),InvoiceLine.UnitPrice),Playlist.Name))", "score": -0.2786315354503119, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.28141365947182606, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2969908878022504, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes),Playlist.Name))", "score": -0.3003928169137278, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Track.Name))", "score": -0.30408790315820755, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3182781795418634, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.Quantity,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3339849457902025, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3514160705214494, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3533208088300224, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),InvoiceLine.Quantity,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.35677788074624456, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.3728923793653834, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.37460810056963534, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.034369608973065624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Employee.Country))", "score": -0.29985955416123034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Customer.Country))", "score": -0.36322537123123766, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Employee.Phone))", "score": -0.4782363480226195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.635814786543051, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6382566946331577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6594889064206616, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Employee.Country))", "score": -0.6652984170775921, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.6684048925824303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.6754454908941189, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6788608067663549, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Employee.Country),Invoice.BillingCountry))", "score": -0.6853723489948607, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.6858655342204688, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6859013917876183, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "from what country is the invoice with the postal code 00-358 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Employee.Country))", "score": -0.686530628865096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,00-358), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.0956796590053104, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.12671967830516256, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18571105024623488, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18612389536080337, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,NSW),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.19516502952503, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.21550631720229438, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2621341162329873, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.27076271279361624, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,=,NSW),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.27356143066541366, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,NSW),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2880442510700751, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,NSW),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32344335594404383, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,NSW),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33287654557325475, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,NSW),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33719921391728663, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,NSW),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3374015159150317, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,NSW),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3516772335329474, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.3828901088504019, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.3914424398652, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.4004378603652456, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4039216617984606, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,<=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.40899019138004367, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4124739928132587, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.4181757314123627, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.42146941331330423, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.42672806242716077, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,<=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4300217443281023, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.43572348292720636, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,2),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4387570625578988, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4392072843604214, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.Quantity,<=,2),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.4442756176313491, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,2),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.4465958616554985, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.05967868478005893, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,!=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.14312156295467074, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.1853411227505738, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21129235437958885, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2450020733167294, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25079207291895406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2514712896837292, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2679890854023598, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33160198080754566, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33608984724312463, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3401106858837482, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.341867709733343, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3420600885675581, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3501045208882249, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3559049667087011, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.028130039332609158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Customer.Fax))", "score": -0.4363787739930558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Customer.Fax),Employee.Fax))", "score": -0.475452903418045, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.City),Employee.Fax))", "score": -0.545048121122818, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.FirstName),Employee.Fax))", "score": -0.5492448841614532, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.5595942318832385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.581359761992644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Title),Employee.Fax))", "score": -0.615459862856369, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.FirstName))", "score": -0.6241539686379838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.State),Employee.Fax))", "score": -0.6335246597809601, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Title))", "score": -0.6452423303780961, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Company,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6630236089622485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.City))", "score": -0.6942700117288041, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6976961672698963, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Artist.Name))", "score": -0.7200551002679276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.09738651114178526, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.11313670230953525, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.14508818374436958, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.15275459184016799, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.1922347773463426, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19406042519116107, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21344902502929117, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21381981033938277, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.BillingAddress),Invoice.Total)", "score": -0.24191164041702148, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.BillingAddress),Invoice.Total)", "score": -0.2538122404492942, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2563886767477341, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Track.Milliseconds),Invoice.Total)", "score": -0.2713119023584453, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceDate),Invoice.Total)", "score": -0.27622583605369383, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.BillingAddress),Invoice.Total)", "score": -0.27850771838639843, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.BillingAddress),Invoice.Total)", "score": -0.29178558882482514, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.16896205785181098, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.17579610417876715, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Title,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2088139215107034, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23611623880398247, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.258085446007125, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26750647515012244, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.272049615045176, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Artist.Name,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27698295996661787, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.280561620148085, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28320136777575206, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.28535772644941054, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,Customer.SupportRepId),Artist.Name,!=,Sales Manager),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2865523425500445, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,Sales Manager),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31199607130307594, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.31970241185863507, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3223421687018723, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.054319948204920365, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.19135913277523287, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.4472268375243402, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5007166119899011, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5418970140303827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5451287778701044, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingState,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5670784267272211, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5730200561370111, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.6659337433661676, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.LastName,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.6842798742140985, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),PlaylistTrack.TrackId,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7354492696608759, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7913257631148554, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.State,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.8035170587386347, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.8094935568656183, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Bytes))", "score": -0.8930475697993643, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.LastName),Customer.LastName))", "score": -0.11946204352534551, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Customer.LastName))", "score": -0.16013900238431233, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.LastName),Album.Title))", "score": -0.39836754511452455, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,None), Customer.LastName),Customer.LastName))", "score": -0.40354420758194465, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Album.Title))", "score": -0.4390445039734914, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,None), Customer.LastName),Customer.LastName))", "score": -0.4442211664409115, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.LastName),Customer.LastName))", "score": -0.5064865579024627, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.LastName),Customer.LastName))", "score": -0.5136697520629241, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,None), Customer.LastName),Customer.LastName))", "score": -0.5164088835135772, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.LastName),Customer.LastName))", "score": -0.5560454954520537, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,None), Customer.LastName),Album.Title))", "score": -0.6824497091711237, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Customer.LastName))", "score": -0.7095870659813954, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.LastName),Employee.LastName))", "score": -0.7120081395969464, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,None), Customer.LastName),Album.Title))", "score": -0.7231266680300905, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.LastName),Customer.Fax))", "score": -0.7310068817005231, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.3918024362913226, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4115395621088936, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4218426716324078, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.42282628250167065, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,<=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4235206998243043, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,<=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.4245043106935671, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,2009-04-22 00:00:00),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.4268341850883205, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4269890676217384, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.42797267849100123, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4286670958136348, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.4296507066828977, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4333601459156683, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.43434375678493115, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,<,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.43478648656577396, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,2009-04-22 00:00:00),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,<,2009-04-22 00:00:00), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.4357700974350368, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.08904444317098485, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.13245978180665266, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.1403058613169419, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Habib Koit\u00c3\u00a9 and Bamada),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1598680753506306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17026198504508944, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.2144818518681383, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23018637074572984, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2747460358175276, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28088036948158634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28992978988659257, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.33265008835523613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.370263907111725, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.37423013159729074, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.38549190628217483, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the album that includes a track of the artists named Habib Koit\u00c3\u00a9 and Bamada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada), MediaType.Name),MediaType.Name))", "score": -0.4068343366732746, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Habib Koit\u00c3\u00a9 and Bamada),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.020118071251543763, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.1609703392619166, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2422048520100428, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24345254156861665, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.26072779752294395, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34060543885400896, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3417357815894941, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.35522248348199953, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3717659421896827, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3875201148502456, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3915164989503768, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),MediaType.Name))", "score": -0.4321786996296965, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.4384540788193807, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.GenreId))", "score": -0.44044328186537646, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Track.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4466614442438918, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.19947167708916508, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.19981972035282328, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.Total,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.24598940547736495, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28646965400200697, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.2940867942312732, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2960400550360378, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,None), Invoice.Total),Invoice.Total)", "score": -0.3041489038809107, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,None), Invoice.Total),Invoice.Total)", "score": -0.3189438761383348, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.3415111334583342, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,>=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39065517217814594, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,>=,None), Invoice.Total),Invoice.Total)", "score": -0.39876402102301883, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4138674844029556, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCountry,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.42188457149519604, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.422008221479325, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the sum of all invoice totals?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42816107632308814, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2532156042862306, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2583402322776201, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.3018700175365503, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30599161076145187, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.3173832169815541, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3327889941891174, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33383704650269197, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34188078181471687, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.Title,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34201471098763164, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Bebel Gilberto),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35636900246506914, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36532043698196975, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3700224726132951, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,Bebel Gilberto), Invoice.InvoiceId),Invoice.Total)", "score": -0.3701592234567754, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,Bebel Gilberto), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37031507037475625, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Bebel Gilberto),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37950637862564096, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.14003654182775851, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.14235857144425648, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.HireDate,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18609669603570295, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18982545422181707, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.19177735591660736, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.HireDate,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.20603553363229332, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.HireDate,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2092627150289388, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.217306212432408, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.HireDate,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.22435923623771428, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2244856821663781, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.22610859148467952, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.25897637824266506, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.26054611311146797, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2748347179770335, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit rice of tracks sold be employees outside of Canada?", "inferred_code": "avg(distinct(merge(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2818932386300549, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1788537188486705, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17943498980780803, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19396937356942437, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1946358189472952, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22798399017131302, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22865043554918385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23380691647618396, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25557846631214465, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25697493746757216, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26073677860731287, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29098955406946087, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2945599301664649, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3125173811969926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3130986521561302, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31872296971085484, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.Fax))", "score": -0.14722369566516136, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,AB), Employee.Fax),Employee.Fax))", "score": -0.25823603525714134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Fax))", "score": -0.36010488823012565, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,AB), Employee.Fax),Employee.Fax))", "score": -0.3987766201789782, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.State),Employee.Fax))", "score": -0.4206296052034304, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.Fax),Employee.Fax))", "score": -0.44161346510009025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,AB), Employee.Fax),Employee.Fax))", "score": -0.48272070243911, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.Fax))", "score": -0.4916394199426577, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.HireDate),Employee.Fax))", "score": -0.5080888117845461, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,AB), Employee.State),Employee.Fax))", "score": -0.5316419447954104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.Title))", "score": -0.5441201920802996, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,AB), Employee.Fax),Employee.Fax))", "score": -0.5459216232593462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.5609554345901415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.City),Employee.Fax))", "score": -0.5714604626591608, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the faxes of our active employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.State))", "score": -0.5875775213535235, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.08565095529882932, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11570234234701628, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13916887798635133, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.163896396822781, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17550658414031797, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22171556202792939, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.Total),Invoice.Total)", "score": -0.222243692681859, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23366210333284007, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23974763220785933, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2399064056607777, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceDate),Invoice.Total)", "score": -0.25329482201182557, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.26361865431094983, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.2722457234845116, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2727636190755431, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2785740761185499, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.03396873381737684, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.17153266224755673, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.226074959699769, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.23686336819255283, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.23931119662169148, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2465916058196234, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.25500326669231366, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2583198979443448, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.27203415170269746, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2729217677920864, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.27318215005425767, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27684147280766236, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Invoice.Total)", "score": -0.27696997028815873, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceDate),Invoice.Total)", "score": -0.27784541997517315, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount of the invoices of sold tracks in the playlist named Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.27857327448058194, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State),Employee.Title))", "score": -0.32821456364056856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State),Employee.Title))", "score": -0.34707676686802863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State),Employee.BirthDate))", "score": -0.39639221204892905, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State),Employee.State))", "score": -0.40092910247239766, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State),Track.Bytes))", "score": -0.4054478824764806, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State),Employee.State))", "score": -0.4188635719999504, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State),Track.Bytes))", "score": -0.43648346837284074, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,!=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State,=,AB), Employee.Title),Track.Milliseconds)", "score": -0.438603973567411, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate),Employee.Title))", "score": -0.4422546051421199, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "sum(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),Employee.State,=,AB), Employee.Title),Track.Milliseconds)", "score": -0.4431459946153486, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State),Employee.HireDate))", "score": -0.44480550967935883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,!=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State,=,AB), Employee.Title),Track.Bytes)", "score": -0.452442302016099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(min(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),Employee.State),Employee.Title))", "score": -0.4545187934729937, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "sum(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),Employee.State,=,AB), Employee.Title),Track.Bytes)", "score": -0.4576289051621774, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.State,=,AB), Employee.Title),Track.Milliseconds)", "score": -0.46064156976268067, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.09851347589289933, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.15158755350887915, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21821366246501311, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Track.Composer,=,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.23220133440006227, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2524067380807618, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25384393138942063, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2702188588238862, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.27128774008099293, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Out Of Time),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2732323072746607, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Track.Composer,=,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28527541201604206, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2872388262476177, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2933902500180332, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Out Of Time),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.294712530112904, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Out Of Time), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.3049421612073664, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average unit price for the tracks on the album Out Of Time that were ordered once per invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30548084076077525, "correct_code": "avg(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Out Of Time),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.03232987139508447, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.16724045280108374, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19204316720938086, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.3662094506790067, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.38035825379972393, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.39467463479077886, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.41166862125782666, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.42007330360598394, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.42416346283034395, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4422912511739103, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Track.Name))", "score": -0.4431664645399237, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.45102024215437, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Genre.GenreId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4679835568780214, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.48813956315247004, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Genre.Name,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4919289336546633, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.1054688728844344, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.1509925812046589, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.17924780860274628, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.21100516290890223, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2176886346554637, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.23064433700927012, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23701641474419374, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2373918497800612, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.24645540404681346, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.256643678177307, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.2596587675755266, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,!=,683 10 Street SW),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2656763405395773, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2720617229938319, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.273813588460974, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Address,!=,683 10 Street SW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.27932323489903177, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.1128062386955603, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.2156631417381916, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.22106857135043365, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.2432199116166037, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.25735590996789065, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Genre.GenreId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.27363218311830295, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.2769313716854129, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.2810920134631306, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.29126851417810445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.30670522888960566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.GenreId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.3086012764839126, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31161542299074546, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.31284722731718867, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.31600713098238087, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.32780067329948953, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.013265472609418794, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38893262574369336, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.47699745527046244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4862394107117048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5698063724875029, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.PostalCode,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5790188056951842, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5843764639048459, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6077365083473076, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6161202503186322, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.6387278372619168, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6401147284326786, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6464424939589104, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.Total),Invoice.BillingCity))", "score": -0.6493755674509885, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.6506901963202836, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities were invoices with the postal code different than 89503 sent to ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Employee.City),Invoice.BillingCity))", "score": -0.6918680763392331, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.07670637831870408, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.18141012505475373, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3196975202936301, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3744573803323874, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4796500714201102, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,null,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5605700524229178, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6525159530046949, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7063241652849683, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.7560792724307248, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7572196997407445, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.793755343713201, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.7960347692187497, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.807256920992586, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<=,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.811027912021018, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices sent before 2010-06-30 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Employee.Address))", "score": -0.8482605973895261, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2010-06-30 00:00:00), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Fax),Customer.City))", "score": -0.3474912109959405, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Fax),Customer.Fax))", "score": -0.3487203183758538, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.LastName),Customer.City))", "score": -0.3793150249111932, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.LastName),Customer.Fax))", "score": -0.3805441322911065, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.City))", "score": -0.390050894318847, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.Fax))", "score": -0.3912800016987603, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.City))", "score": -0.42537463337066583, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.Fax))", "score": -0.42660374075057916, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Fax),Customer.State))", "score": -0.44743270307662897, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.LastName),Customer.State))", "score": -0.47925651699188165, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Fax),Customer.City))", "score": -0.4846102732408326, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Fax),Customer.Fax))", "score": -0.48583938062074594, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.State))", "score": -0.48999238639953546, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.LastName),Customer.City))", "score": -0.5164340871560853, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.LastName),Customer.Fax))", "score": -0.5176631945359986, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.1307316547308801, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Album.Title))", "score": -0.21434563901766523, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.2700274748776792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Album.Title))", "score": -0.3536414591644643, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.3818977469627498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Album.Title))", "score": -0.46551173124953493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5211935671095489, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Employee.LastName))", "score": -0.5258566936527131, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5670490855400203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.City))", "score": -0.5752250751529573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.State))", "score": -0.5801867445979951, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.Fax))", "score": -0.5821609696422456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+55 (61) 3363-7855), Customer.LastName),Album.Title))", "score": -0.604807551396334, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (61) 3363-7855), Customer.LastName),Album.Title))", "score": -0.6506630698268054, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.665143548888409, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.017748784249054766, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5082235899317311, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7546235285163148, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.755795850341046, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7582903036631954, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7594626254879266, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7645699764014755, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7657422982262067, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7682367515483561, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7694090733730874, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.7699510037504368, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.771123325575168, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7826055550586016, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8003038786846446, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.8340363608080917, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.05295257514080731, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.31301022203842876, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Album.Title))", "score": -0.48827230149618117, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes,>,2950224),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.4901473618789733, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Employee.Title),Track.Composer))", "score": -0.5248945882703993, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.5633138073529824, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,2950224), Track.Composer),Track.Composer))", "score": -0.5709908894423279, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5919532914227497, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,2950224),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Genre.GenreId), Track.Composer),Track.Composer))", "score": -0.6017112826876316, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,2950224),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Artist.ArtistId), Track.Composer),Track.Composer))", "score": -0.6136646041576193, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,2950224),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.6138531156009018, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,2950224),getData(Track),Track.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Genre.GenreId), Track.Composer),Track.Composer))", "score": -0.6194429410147424, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Bytes))", "score": -0.6264482956539723, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,2950224),getData(Track),Track.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Artist.ArtistId), Track.Composer),Track.Composer))", "score": -0.6313961821884112, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Employee.Title))", "score": -0.6539559584271046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.07258471153181745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Artist.Name))", "score": -0.4213831057350035, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.FirstName),Employee.Title))", "score": -0.44808457098406507, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Employee.Fax))", "score": -0.48509784839552594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Fax),Employee.Title))", "score": -0.4942558487455244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Album.ArtistId))", "score": -0.5052342643539305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.50850687786442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Bytes,>=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.524411891172349, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Employee.City))", "score": -0.5510625471870298, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5520407395015354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Employee.FirstName))", "score": -0.5530960788528319, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.Title),Track.Bytes))", "score": -0.5807294478217955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.BirthDate),Employee.Title))", "score": -0.5820047339002485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.PostalCode),Employee.Title))", "score": -0.5852465709249373, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.City),Employee.Title))", "score": -0.6015865286390181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.05832493700098939, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.12877557153998642, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14099577424198917, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1855880489986061, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2031627547945166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.21643492206387893, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21814269653717397, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.233979410050155, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2601024603026989, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2601724963529219, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.26144362700616963, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29170349815326774, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29842489149373375, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3055617241075071, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31868784547062917, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.LastName))", "score": -0.18004483010736294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Album.Title))", "score": -0.2586969735857565, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.State))", "score": -0.40175861146417446, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.Title))", "score": -0.41763699080911465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Album.Title))", "score": -0.472059974765344, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Album.Title))", "score": -0.48154203747396884, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Employee.State))", "score": -0.5060383466759523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Album.Title))", "score": -0.5089111606825558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Track.UnitPrice),Album.Title))", "score": -0.5131378082807858, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Employee.State))", "score": -0.5155204093845771, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Album.Title))", "score": -0.5183932233911807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Track.UnitPrice),Album.Title))", "score": -0.5226198709894107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Album.Title),Employee.State))", "score": -0.542889532593164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Track.UnitPrice),Employee.State))", "score": -0.5471161801913941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Callahan), Track.UnitPrice),Album.Title))", "score": -0.5499889941979976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.045357802534757796, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.23722884235084668, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2538849988083632, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29298462637983586, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3134082115778239, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3134920873950884, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31395893385488977, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32505294656452477, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33865454951976237, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3405354439835451, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3617833860189421, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Composer,!=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3630932599213091, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36992575229195723, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37843647223147797, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses to which tracks composed by A. F. Iommi, W. Ward, T. Butler, J. Osbourne have been sent to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.38692822659581755, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,A. F. Iommi, W. Ward, T. Butler, J. Osbourne),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.04123824874604532, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2017221357560445, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,R&B/Soul),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20201908553281725, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,R&B/Soul),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2060495072809855, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.2519673218617012, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2887810121295487, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,!=,R&B/Soul),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3116922513170336, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3211591382269543, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3245875868803121, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34400921636124027, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3449549912264929, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.3472381944472735, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,!=,R&B/Soul),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35582485143267684, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3592970494231201, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks that don't have the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,!=,R&B/Soul),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36203833707238375, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.0872937882441852, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11131380429880128, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.1622550287311078, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))", "score": -0.17951251172427674, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18741308683665436, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25809582568636036, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,>=,230 Elgin Street),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2584292434212289, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.26275926494101653, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))", "score": -0.30657252926287193, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31808190545681125, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,230 Elgin Street),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3184320816146492, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,=,230 Elgin Street), Genre.Name),Genre.Name))", "score": -0.3280014817294289, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Track.Name))", "score": -0.35328416434948456, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.35639950675061866, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}, {"orig_question": "Have tracks with genres been sold to the address of 230 Elgin Street? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))", "score": -0.35894139673945896, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,230 Elgin Street), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.0799089969113993, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.2663792074636149, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))", "score": -0.3336263597921061, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.3356104557410148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,ON), Customer.Company),Customer.Company))", "score": -0.3761685193494486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON), Customer.Company),Customer.Company))", "score": -0.43578950316298454, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,ON), Customer.Company),Customer.Company))", "score": -0.4380911887601542, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.4523863646271067, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,ON), Customer.Company),Customer.Company))", "score": -0.4812416137174296, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,ON), Customer.Company),Customer.Company))", "score": -0.5126636615486933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,ON), Customer.Company),Customer.Company))", "score": -0.5238911292160328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.5358186301587242, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,ON), Customer.Company),Customer.Company))", "score": -0.5464715958551096, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingState,=,ON), Customer.Company),Customer.Company))", "score": -0.5525654120490765, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,ON), Customer.Company),Customer.Company))", "score": -0.6013190747216868, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.304330770883098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.BillingAddress),Invoice.Total))", "score": -0.32927996388389147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.Total),Invoice.InvoiceDate))", "score": -0.38044828644706286, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3807124542327074, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.3945718007416872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.Total),Invoice.Total))", "score": -0.4053974794478563, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.Total),Invoice.BillingAddress))", "score": -0.45682996979667223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.46971361807300127, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.Total),Invoice.BillingCity))", "score": -0.47068931630565203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,VV), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.4899319568903593, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.506617267641559, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,VV), Invoice.BillingAddress),Invoice.Total))", "score": -0.5148811498911527, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,VV), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5458311336369661, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,VV), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.5832619981730706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When did we issue invoices to VV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,VV), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.5968669545606466, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,VV), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.020307196206886147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.Total),Invoice.InvoiceDate))", "score": -0.42994404481305537, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.43648280193610844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5266325621823853, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5390186583578902, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.5976940192240363, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6237402324522918, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6552627234677857, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6695940293329841, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6945721260869067, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7021700589325021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7139562582896959, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingAddress),Invoice.InvoiceDate))", "score": -0.7144349579657501, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7206717877606934, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.7700774271628525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1), Album.Title),Album.Title))", "score": -0.1352412099469715, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1), Album.Title),Album.Title))", "score": -0.19295815961834073, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1), Track.Composer),Album.Title))", "score": -0.23774716494599418, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,1), Album.Title),Album.Title))", "score": -0.24601218576421063, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1), Track.Composer),Album.Title))", "score": -0.29546411461736344, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,1), Album.Title),Album.Title))", "score": -0.3037291354355799, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,1), Album.Title),Album.Title))", "score": -0.3074844070936267, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,>,1), Album.Title),Album.Title))", "score": -0.337242749018901, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,1), Track.Composer),Album.Title))", "score": -0.34851814076323334, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1), Album.Title),Album.Title))", "score": -0.351444593264581, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,1), Album.Title),Album.Title))", "score": -0.35176576469569576, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,1), Album.Title),Album.Title))", "score": -0.3548400969892399, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,1), Album.Title),Album.Title))", "score": -0.36520135676499593, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1), Album.Title),Album.Title))", "score": -0.3688442229907362, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}, {"orig_question": "How many albums have been ordered more than once on an invoice?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,>,1), Track.Composer),Album.Title))", "score": -0.3790849913166312, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,1), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.048054882868841325, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.13214912368915793, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.14540130097564732, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2397348192164433, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26462926321017705, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.28320721159731194, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2878346676379868, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29103641708507677, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.30458714562086286, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3362453189589141, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3390594638165551, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Composer))", "score": -0.34208902300939187, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3540301293683633, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.35551212991071823, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.35609148612538905, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.12692902692809815, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.12790650754550328, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.15895150269741934, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.LastName,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.17300981374866525, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.19078659295855369, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.20777107613140852, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.22008384640299086, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22280906872787487, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22722484379702668, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23433129420032253, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2500272814732388, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2610178657469057, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,!=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.264905064582131, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,laura@chinookcorp.com),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.26937502362762983, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks not sold by the employee with the email laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2755479162482111, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.047542198926731984, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13924443020433241, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24420710181223484, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26145033407055707, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27863727165486424, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28910040713124857, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29136904388354157, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29156853283521794, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.303564845684941, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30616590884467093, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3091091863682172, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3286596027586736, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Artist.ArtistId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3527161615513715, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.3576947139264116, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.3815358191494022, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.030742582385654006, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.14036625329937555, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.18900336749525257, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2640544693659721, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.277765552819985, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2812599198851076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.29122369813291316, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.3059836189157916, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30723700053253516, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.33058051068812855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3313682007094834, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3365836929751687, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.33671661241657036, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.3424632464568348, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.343609460983023, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.08524281131756024, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.15516090945159786, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Album),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.24927430772430634, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.2553986823980657, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),Track.UnitPrice),Track.UnitPrice))", "score": -0.3068596572386744, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.3436724359507787, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Album.ArtistId),Track.Bytes),Track.UnitPrice))", "score": -0.36642276550267244, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3674201720442647, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3686511081213156, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Album),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.41943017880481176, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.UnitPrice)", "score": -0.44016824166575863, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),Track.Bytes),Track.UnitPrice))", "score": -0.44089002527588245, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.UnitPrice),Track.UnitPrice))", "score": -0.45742622973590363, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.4606668362238224, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Artist.ArtistId),Track.Bytes),Track.UnitPrice))", "score": -0.4674930527782943, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.035713933422098526, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3728204700295053, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.4806561844455272, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.48402723224335276, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.5255491321582481, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5374443528052808, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5488532147239493, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5547285959473811, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Artist),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5949853138721443, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5962462746063815, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6121602428404462, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.612432340577116, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.AlbumId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6159756392420479, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6184805051840252, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6545744555428427, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.035229624075773826, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.12041218542959524, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35036237426676037, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3628766659676998, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.42922833974492985, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.4390143543261181, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),getData(Album),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.44059011406256154, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),Customer.Company,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.44542139531337116, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),Genre.GenreId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.46280699976458206, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.47773426526807405, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4797499771371078, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),Customer.FirstName,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.48289305802077664, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.48758317091814524, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),Track.MediaTypeId,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4902179606778841, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.49084114992618244, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.15494485137605807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.FirstName))", "score": -0.2362382554783835, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.32033129347109934, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.FirstName),Employee.Email))", "score": -0.3239726604297175, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.Email),Employee.FirstName))", "score": -0.4016246975734248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.FirstName),Employee.FirstName))", "score": -0.40526606453204295, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Address))", "score": -0.4602714323773398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Address),Employee.Email))", "score": -0.47145456386351725, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.LastName))", "score": -0.48296888110780856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.FirstName),Employee.Email))", "score": -0.4893591025247588, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Address),Employee.FirstName))", "score": -0.5527479679658427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Track.Milliseconds))", "score": -0.56124342916155, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.FirstName),Employee.FirstName))", "score": -0.5706525066270842, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.PostalCode),Employee.Email))", "score": -0.607301893956901, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Title))", "score": -0.61484290597582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))", "score": -0.29121829489319084, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,>=,3.96),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.293340638774252, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,>=,3.96),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3041830030814267, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))", "score": -0.3527392212007687, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))", "score": -0.3530380586261276, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,3.96),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.35898689755380264, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Country))", "score": -0.36011777287420693, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))", "score": -0.3625646981441284, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,3.96),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3698292618609774, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Invoice.BillingAddress))", "score": -0.373673083601809, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,>=,3.96),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Invoice.BillingAddress))", "score": -0.37632520304308276, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,>=,3.96),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Track.Milliseconds))", "score": -0.38390216304396824, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Customer.Address))", "score": -0.38488272587059935, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,>=,3.96),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Invoice.BillingAddress))", "score": -0.3871675673502575, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,>=,3.96),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Track.Milliseconds))", "score": -0.39474452735114296, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.08028807981080811, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1405785568929097, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.15854836675125997, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.22428152940602544, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,382981), Playlist.Name),Playlist.Name))", "score": -0.29335520354495553, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3191003143233981, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.BillingAddress,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.341885327335369, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.35779523627363685, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3581210566593348, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36368535097387394, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.36380357293404775, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3723499389609016, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),Playlist.Name,=,382981), Playlist.Name),Playlist.Name))", "score": -0.3747025645954959, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,382981), Playlist.Name),Playlist.Name))", "score": -0.38748846756119515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3903885692031534, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2670566892611063, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.269253162004529, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.3286702318399718, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.UnitPrice),Album.Title))", "score": -0.33097013378896095, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.Bytes)", "score": -0.331319549851139, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.UnitPrice),Track.Bytes))", "score": -0.3517824434530238, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.3721079419331027, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))", "score": -0.38843787185259376, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3911020754401758, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music),Track.UnitPrice),Track.Bytes))", "score": -0.39137362875586174, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.40046694045043335, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Track.TrackId),Track.Bytes)", "score": -0.40793540843682496, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.43058517935157803, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.44002308929277717, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}, {"orig_question": "What is the size of the most expensive track we have in the database that is not contained on the playlist Brazilian Music?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))", "score": -0.44899685280487334, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31455662997764083, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Artist),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31844215942632853, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Artist.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3467146730590263, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Artist),Track.AlbumId,Artist.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35060020250771406, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.358804515706275, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3715606040178538, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.38872573106144653, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3901104799377659, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,InvoiceLine.InvoiceId),getData(Artist),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3926112867422398, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Artist),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.39399591570036246, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),MediaType.Name,!=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3987118487849007, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.40970039494731936, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),MediaType.Name,!=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.41146794464992054, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.41349511610738016, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Album),getData(Album),Track.AlbumId,Track.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.4154630257014616, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Knocking At Your Back Door), MediaType.Name),MediaType.Name))", "score": -0.2863410090064714, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.30411216624051385, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3090998034183482, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31993515924130866, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Knocking At Your Back Door), MediaType.Name),MediaType.Name))", "score": -0.3458552823923419, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Knocking At Your Back Door), MediaType.Name),MediaType.Name))", "score": -0.3524668967900461, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36195022246545255, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Knocking At Your Back Door),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36497111617439815, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.3668639359378066, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.372785578288413, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.37347555033551083, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,1),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3758064719973586, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3884402743814009, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4083888481729646, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,1),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4178217717495382, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.26677527067637863, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3248265011220046, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.33995365420745266, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.33997133933323237, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3436766832940003, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Track.TrackId),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))", "score": -0.34379153306782123, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Track.Composer),Track.Composer))", "score": -0.3571405928292283, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))", "score": -0.3624826864421932, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3690580727913301, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.37136282744467025, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.38320783028809574, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.39800488465307865, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3980225299075828, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4017277908031933, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}, {"orig_question": "How many track composer where involved in tracks with a size of less or equal than 5817216?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5817216),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.41589824149197224, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,5817216), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.020937071427397314, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Employee.State))", "score": -0.39894048335372645, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.Country))", "score": -0.4662747180682345, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.5831550448328926, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Country),Customer.State))", "score": -0.5932779240083619, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Invoice.BillingState))", "score": -0.6386127269488497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.6390389099378808, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),InvoiceLine.UnitPrice))", "score": -0.6683688557368441, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.Fax))", "score": -0.6897060668688937, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.State))", "score": -0.698556892819397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))", "score": -0.7119650929362251, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Employee.State),Customer.State))", "score": -0.7177520322275086, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Track.UnitPrice))", "score": -0.7427488363009616, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), InvoiceLine.UnitPrice),Customer.State))", "score": -0.7738438176584168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}, {"orig_question": "In which state does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Invoice.BillingState),Customer.State))", "score": -0.7915679740381165, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.08014307971618885, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.16261186656918913, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.20047431151765716, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.20119659534099493, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.24600964991907062, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3103908370575016, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.33688315555482423, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Genre.GenreId),Track.Bytes),Album.Title))", "score": -0.3461010403417318, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35736482755693794, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3913835036928883, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Artist.ArtistId),Track.Bytes),Album.Title))", "score": -0.40629410254849496, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.GenreId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4370405178613051, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4611068657844366, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.4680958411422743, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album on which the smallest song in the Comedy genre is on?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Genre.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.46840055425076327, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.22539963396600862, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.24859600225049128, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.2706398957451859, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Name))", "score": -0.28060735136242254, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.29383626402966856, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Name))", "score": -0.3038037196469052, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3158021272230303, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Bytes))", "score": -0.31968204534874683, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Name))", "score": -0.3258476131415998, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.33602859748880237, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.33899849550751293, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Bytes))", "score": -0.34287841363322946, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Name))", "score": -0.3490439814260825, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3497526512627339, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many tracks from the Sci Fi & Fantasy genre shorter than 284055 milliseconds have been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Sci Fi & Fantasy),merge(getData(Track),getData(Track),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3581051252937395, "correct_code": "sum(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds,<,284055), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.13224304936416914, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.13373902511990834, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total))", "score": -0.18198619659749785, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.18348217235323705, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),Invoice.Total))", "score": -0.193446186555044, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.1949421623107832, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.22180965813989925, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.22330563389563846, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.2412283633487723, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2530238341518673, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.Total))", "score": -0.27551073543314186, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.27700671118888104, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.Quantity),Invoice.Total))", "score": -0.27972344075823263, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.InvoiceLineId))", "score": -0.2834306877614302, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.29953327104183175, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.03799516487567404, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5221840712416234, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Album.Title))", "score": -0.7050698184935481, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Employee.Fax))", "score": -0.7251044453863935, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Fax),Customer.Fax))", "score": -0.7463631200225791, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Fax),Customer.Fax))", "score": -0.7629581185610732, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.Fax),Customer.Fax))", "score": -0.800399782276678, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Fax),Customer.Fax))", "score": -0.8605966254690429, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.Fax))", "score": -0.8710505011451488, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.9301492151922031, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.9354915139500426, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.9775472228594781, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.9904984941635611, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -1.012471777653712, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Artist.Name))", "score": -1.0396041704046892, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,+55 (11) 3033-4564), Customer.Email),Customer.Email))", "score": -0.0984734795310942, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,+55 (11) 3033-4564), Customer.Email),Customer.Email))", "score": -0.2579870231682088, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,1), Customer.Email),Customer.Email))", "score": -0.31346756862789427, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.Email),Customer.Email))", "score": -0.3338635953336478, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Email),Customer.Email))", "score": -0.3362331122745044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564), Customer.Email),Customer.Email))", "score": -0.34417396181015647, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,1), Customer.Email),Customer.Email))", "score": -0.3835715379078022, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Email),Customer.Email))", "score": -0.3835855856265627, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.City,!=,1), Customer.Email),Customer.Email))", "score": -0.3869223750215922, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,+55 (11) 3033-4564), Customer.Email),Customer.Email))", "score": -0.3911144212585129, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Email),Customer.Email))", "score": -0.39171365773418987, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.Email),Customer.Email))", "score": -0.41767724124507505, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,+55 (11) 3033-4564), Customer.Email),Customer.Email))", "score": -0.4224602592513946, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,1), Customer.Address),Customer.Email))", "score": -0.4522250299596635, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers, except the one with the fax +55 (11) 3033-4564, that have placed an order of one item per invoice", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,+55 (11) 3033-4564), Customer.Email),Customer.Address))", "score": -0.484263571936026, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Customer),Customer.Fax,!=,+55 (11) 3033-4564),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.12283650191199805, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.1425091138863115, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.18698144232349062, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,R3L 2B9),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.19351724354624295, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.1953584647320244, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.21576854742266652, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.2571538760224215, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.25950340514351694, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,R3L 2B9),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.26019901593338585, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.GenreId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.2639692468516113, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,R3L 2B9),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.28257130883344705, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.28706441437016866, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,R3L 2B9),merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.29911770071312077, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))", "score": -0.3237190291344005, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}, {"orig_question": "Which track names have been on invoices with the postal code R3L 2B9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,R3L 2B9),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.34939541465241025, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,R3L 2B9), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16449078000959833, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1666811281075906, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20142114782736892, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21183445315808486, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2123128151969403, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23155138328736474, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.2640984986333131, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2677261768225278, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2834861472479329, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.28381542876259297, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28744310695180764, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2966431441219658, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3032031039154685, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.3121302582217618, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31301081798613717, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.01857684289052486, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.33907996692641973, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.4536812809942603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.5475862530706763, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,null,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.6700072196958899, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.Bytes))", "score": -0.6926743322815128, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.7910981150757834, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.UnitPrice),Track.Milliseconds))", "score": -0.8576231874299083, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.8844643739698768, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.UnitPrice))", "score": -0.9106329614128299, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Track.Milliseconds))", "score": -0.9514737649501512, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Bytes),Track.Milliseconds))", "score": -0.9576812661957774, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Employee.Email))", "score": -1.0128638678993411, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8102839), Track.Milliseconds),Track.Bytes))", "score": -1.0131774563174076, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the lengths of tracks, which are smaller than 8102839 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8102839), Track.Milliseconds),Employee.Address))", "score": -1.031428926607532, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8102839), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.08634638654202502, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)", "score": -0.20389398796130948, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Bytes)", "score": -0.20984465347830752, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.23122065467741362, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Milliseconds)", "score": -0.2356562576769174, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Milliseconds)", "score": -0.24160692319391544, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.UnitPrice),Track.Name))", "score": -0.2938831445108505, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)", "score": -0.31653649293610187, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Milliseconds)", "score": -0.32999387498428456, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Bytes),Track.Name))", "score": -0.3311727461137864, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Name))", "score": -0.3341789727191074, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)", "score": -0.33509421274946855, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Milliseconds)", "score": -0.3485515947976513, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3526866998977813, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Employee.LastName),Track.Bytes)", "score": -0.3682843894335735, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.20059994469048717, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.201427016487779, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.20159994227478895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.216424106078765, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.21659703186577495, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.23340309648420474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.23503702935172283, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,UB40),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2468063173367394, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,UB40),merge(merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2569563320105075, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,UB40),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.26260553974510337, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.2640436016142608, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,UB40),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2667926183431098, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,UB40),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.26938289650595576, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.27800996219424173, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genre are the tracks from UB40 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,UB40), Genre.Name),Genre.Name))", "score": -0.28221603136639273, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,UB40),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.13466886262010183, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.13510114386973174, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.1425057418395016, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.16686981267403866, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.18741453398775473, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.24273083562024897, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.24825541195435505, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.2597666114288811, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.27034968322417696, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.2813529370533275, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.28228115084367106, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.3127835669589603, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.32029386934625237, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.34111801420116844, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.35755118628800586, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Invoice.CustomerId),Employee.State),Track.UnitPrice))", "score": -0.21752025580849138, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Invoice.CustomerId),Employee.State),Track.UnitPrice))", "score": -0.23912643800999667, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Invoice.CustomerId),Employee.State),Track.UnitPrice))", "score": -0.24313646053799232, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),Track.UnitPrice),Track.UnitPrice))", "score": -0.2439466191021603, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State),Track.UnitPrice))", "score": -0.25475902592047667, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State),Track.UnitPrice))", "score": -0.2609963339442506, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State),Track.UnitPrice))", "score": -0.27435995609527486, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.State),Track.UnitPrice))", "score": -0.2752657355925914, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId),Employee.State),Track.UnitPrice))", "score": -0.3079758775401906, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.TrackId),Employee.State),Track.UnitPrice))", "score": -0.3116152301097726, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.UnitPrice))", "score": -0.31647420394113596, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Employee.State),Track.UnitPrice))", "score": -0.32958205974169597, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State),Track.UnitPrice))", "score": -0.33322141231127794, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Employee.State),Track.UnitPrice))", "score": -0.3335920866998333, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Employee.EmployeeId),Employee.State),Track.UnitPrice))", "score": -0.33721248712310126, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Employee.BirthDate))", "score": -0.14137404951620153, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.BirthDate),Employee.BirthDate))", "score": -0.19374934577018751, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Employee.BirthDate))", "score": -0.20519768818178272, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Employee.Address))", "score": -0.2764296889444924, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Track.Bytes))", "score": -0.2782261645770518, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.BirthDate),Employee.Title))", "score": -0.2825469581641188, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Employee.Title))", "score": -0.2882391709115397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))", "score": -0.2963327882251381, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Employee.BirthDate))", "score": -0.30650761345261474, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Employee.State))", "score": -0.33096600950168664, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Employee.Address))", "score": -0.34025332761007354, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Track.Bytes))", "score": -0.342049803242633, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Netherlands),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Employee.Title))", "score": -0.3520628095771209, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Country,=,Netherlands), Employee.BirthDate),Employee.BirthDate))", "score": -0.3663960600280674, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.Title),Employee.BirthDate))", "score": -0.3680822906092147, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.11878836109826807, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.17796508232577365, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.21491749255133724, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.2514752037297524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.28842761395531596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.35543236693937375, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Address),Customer.Country))", "score": -0.3612252317887451, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Address))", "score": -0.39674455041832285, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Address),Customer.Country))", "score": -0.39817764201430866, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Address),Customer.Country))", "score": -0.4155644332204247, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(MediaType),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.4233998515354283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Phone))", "score": -0.4249567207375374, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Address))", "score": -0.43369696064388646, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Address),Customer.Country))", "score": -0.43473535319272383, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Find the country of the customers having the company name other than Rogers Canada.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.44020173414875446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.15815951310287346, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.2500281273628125, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Country))", "score": -0.2800061889756762, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.Country))", "score": -0.30212141953597893, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Phone),Customer.Country))", "score": -0.5699928021822416, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.5796742477286898, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.Country))", "score": -0.5819167113695585, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Phone))", "score": -0.5984280352313363, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Company))", "score": -0.6285790447909676, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.6416698972546242, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.643746260629996, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.6672665519903148, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Phone),Customer.Country))", "score": -0.6918394780550443, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Country))", "score": -0.7037633704785549, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "What countries do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.Country),Customer.Country))", "score": -0.712942604051932, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17405438510467902, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1860448039195746, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.19893649860588478, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))", "score": -0.26781743985222406, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.2782797294369133, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Album.Title),Album.Title))", "score": -0.299106462037653, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.3123455717682098, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.36234292651140665, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.37255436664665675, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.3739921949997148, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.Name),Album.Title))", "score": -0.3793060686555666, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Genre.GenreId),Track.Bytes),Album.Title))", "score": -0.39722724468490195, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.40090533873574086, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.Bytes),Album.Title))", "score": -0.408229852640611, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.41020692854570573, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.1342423980629898, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22136054765219584, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.23230553005293347, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2466616810488631, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.26418399655808444, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.26767638411160655, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2711378188667704, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.27228922488486657, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.27492133157080023, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.27601096923031293, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2778100669995157, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28847248116637686, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.31767159420437324, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.32902023967360633, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33129593900176985, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.2099015254120447, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(getData(Track),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.43309749402349496, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Customer),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.44058989964180173, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Customer),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.44370345135339, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Customer),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.45686568988435794, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.45756739467708746, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Customer),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.4576109642355237, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Customer),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.4607245483917711, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.47280848011203536, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Customer),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.4738866571441026, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.48065866689947634, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.48637836357284575, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.49589975233442424, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Artist.ArtistId,PlaylistTrack.PlaylistId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.49955487545717997, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of size that all tracks with the name The Living Legend, Pt. 1 have?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Playlist.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)", "score": -0.5016194490077936, "correct_code": "sum(distinct(filter(getData(Track),Track.Name,=,The Living Legend, Pt. 1), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.010430346352222841, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.5481240780718508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6158644258903223, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.LastName),Customer.Email))", "score": -0.6596601941782865, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Employee.Email))", "score": -0.6829185668539139, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Address))", "score": -0.6896591369222733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Address),Customer.Email))", "score": -0.7521187999445829, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7634732754595461, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.LastName))", "score": -0.7733321372579667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.PostalCode))", "score": -0.7814608398985001, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7964551480181399, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.FirstName),Customer.Email))", "score": -0.8157775738436612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.8344651144507225, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Track.Milliseconds))", "score": -0.8391298238348099, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.PostalCode),Customer.Email))", "score": -0.8533895352084073, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.033862152950860036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2942180681234402, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3528789464856514, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.3637297599334488, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.4401786874820947, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.44345621044108197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.45077055003308475, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4633386782791411, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.46795424801970575, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.46992598462293245, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5024010558500941, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5087818044869781, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Customer.City))", "score": -0.5104481796477113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5188588475566576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5238452515806044, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25120175540234174, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25521514636153586, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.26516831658753515, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.2691817075467293, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27550327436523786, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27914943569474837, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.279516665324432, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.28946983555043126, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.2931159968799418, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.29348322650962544, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30345101880205844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.31741752442266397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.32225928491540584, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.33713180231459, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were Science Fiction tracks sold?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Science Fiction),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.38131180087648975, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.0746158935540233, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.18732882999390726, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.20024619291681708, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2250313275536196, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.23214094980760416, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.23619879039427202, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24386559559010626, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24609948431574588, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2523213492008081, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2547568103627322, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.25667775007222754, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.26388406538040987, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2664311639706111, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27233981899111176, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2754160693679933, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.10421867482416478, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1682753530078712, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.16923075217008504, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1798658131980091, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.20760385315751148, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21880744488966336, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2597675418509963, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28381952223558365, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.29965585874046613, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30649448998636625, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Name,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.312312213559181, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32477961919691656, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))", "score": -0.3313731433217806, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3743563119164949, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks that sell for a price of 0.99 or cheaper?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,<=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3773242909051012, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.1826980433764992, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.20104456160255127, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Blackened),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2313574471078827, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Genre.GenreId,Track.GenreId),Genre.Name,=,Blackened),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23927181995025798, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Genre.GenreId,Track.GenreId),Genre.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24229128277752696, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Blackened),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24293683999451998, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.2677442296227817, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.Title,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.28381021350689506, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.2846631862691363, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Blackened),getData(InvoiceLine),Genre.GenreId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3144895010098276, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Blackened),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3260688938964648, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Blackened),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3311149386260028, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Blackened),getData(Track),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3426943218717358, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Blackened),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3433018369628755, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.3435374145688231, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.07807687730812406, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.09309815587993017, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.1636356106734237, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1680989824785941, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20295614361113437, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20411077907731004, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22329169748324923, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2251911347529416, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23040122496774731, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2452654813239737, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2606699378458481, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26578065288564373, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.276356451693562, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29043080154729184, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much is the sum of the total invoices where the playlist name is not Classical 101 - Deep Cuts?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3085961130759706, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.01880458465529955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.Phone))", "score": -0.36903336926116026, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5533208390952495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Country),Employee.Phone))", "score": -0.5923457471908478, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.FirstName))", "score": -0.6152559719303099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.6604908844710735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.6796107432128338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.7078755041839031, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Customer.Phone))", "score": -0.7158822021701781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.8027793905021099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Customer.Phone),Employee.Phone))", "score": -0.8174704639495758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.8247417351485637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.831884636569157, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Phone))", "score": -0.8324764101089386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Phone))", "score": -0.8652117578567413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.12506920315976328, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14233697414751492, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1426441778955278, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,301688),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19354375663347556, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2002392455076658, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,301688),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2119996819754406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))", "score": -0.24357298912664915, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25817355565279637, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,301688), Playlist.Name),Playlist.Name))", "score": -0.3332445510848343, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,301688),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3368365114172358, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3382233459528104, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Employee.Email,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35442685513286953, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,=,301688),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3600900736842558, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,301688), Playlist.Name),Playlist.Name))", "score": -0.36268420375409166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain a track 301688 milliseconds long?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,301688),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3731787425613062, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,301688), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2364312577215974, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.24023836066967735, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2579062079008926, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Invoice.CustomerId), MediaType.Name),MediaType.Name))", "score": -0.2752156730593683, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2864174191804331, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2902245221285131, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30827580826992507, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.312082911218005, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),Customer.Company))", "score": -0.3173608745545138, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Customer.Company))", "score": -0.32116797750259374, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(MediaType),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Invoice.CustomerId), MediaType.Name),MediaType.Name))", "score": -0.325201834518204, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Customer.CustomerId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3253444303700711, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Customer.CustomerId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3291515333181511, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32975963099846545, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.33356675362062455, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.1963619416274014, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.21210868100203123, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.3203286802090588, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3616473054207745, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.38511784678714645, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.4275760415828843, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.42922857158555416, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.43210867547168164, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.43558228238917485, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.45809989922418026, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.47583771265051755, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5371372451700154, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Customer.FirstName,=,None), Album.Title),Album.Title))", "score": -0.5408982610024395, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.556075414053339, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Employee.FirstName,=,None), Album.Title),Album.Title))", "score": -0.5906082665242138, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.050469537485420476, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13730547101325044, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13884358695994498, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17940510904757728, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18288805066144312, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.1957178231692351, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23987566641585611, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24271004062869087, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.2432929292936052, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2519421797165577, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.BillingAddress,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25354707133116905, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2589830126804078, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(Customer),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2664498463459689, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2785941752988503, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices of tracks belonging to the playlist \"Tv Show\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2840918726437596, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,=,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.0968553271169559, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.11976279565782898, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,!=,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.17685468828757103, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.20229800273004384, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,=,Audiobooks), Track.Name),Track.UnitPrice)", "score": -0.2547376475407336, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,<=,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.2636503198181567, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.27501916102784585, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,!=,Audiobooks), Track.Name),Track.UnitPrice)", "score": -0.3347370087113487, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.355018522198461, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,=,Audiobooks), Track.TrackId),Track.Bytes)", "score": -0.35630378006215246, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),InvoiceLine.UnitPrice,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.36355004261929935, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,<,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.36605452536790756, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.4144181454447058, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,<=,Audiobooks), Track.Name),Track.UnitPrice)", "score": -0.42153260295431955, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of tracks unit prices that are on all the playlists except Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Employee.State,=,Audiobooks), Track.TrackId),Track.UnitPrice)", "score": -0.43191321178407094, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13336650189425978, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.14125331122104665, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.1464162207967245, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15377337888901912, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.15411598223098552, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16168240127061154, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16764037073475827, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17540909295387108, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1873054197345766, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19398674643476962, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), None),None)", "score": -0.20133957496595517, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20297467958360152, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), None),None)", "score": -0.2082753581601351, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.2087023471565483, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices order tracks from the playlist Audiobooks?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Audiobooks), Invoice.InvoiceId),Invoice.Total)", "score": -0.20961458781949757, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.0725664422952832, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,358948), Track.Name),Track.Name))", "score": -0.27036529417273414, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.3712650494161428, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.39781254524935894, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,358948), Track.UnitPrice),Track.Name))", "score": -0.40400747033891093, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,358948), Track.Milliseconds),Track.Name))", "score": -0.44074673029717815, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.49681911678885154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.50034862842442, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.5156083890860024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.5199410542621556, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.5234706445327398, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.5240919300725617, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.5274780655265264, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948),InvoiceLine.UnitPrice,<=,358948), Track.Name),Track.Name))", "score": -0.5299671608868152, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}, {"orig_question": "Find the name of the tracks having length of at most 358948.", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,358948),InvoiceLine.UnitPrice,<=,358948), Track.Milliseconds),Track.Name))", "score": -0.5583386625509306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,358948), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,>=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.1521910823437489, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.15356685484730923, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,<=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.2215491037948383, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.3757952688882855, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.4363059936082698, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.46204978935774743, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.4632677236530775, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.46805006569750157, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.5225605140777317, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),Track.UnitPrice,>=,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.5278919193986529, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,>=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.546643859291149, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.5480196317947094, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.5495222532317762, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,null,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.6060520719724518, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<=,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.6160018807422385, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.318725772614016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.34089284431411215, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3781132329650063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Invoice.BillingAddress,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.40028030466510245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4361507375188012, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Invoice.InvoiceDate,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4583178092188973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5070739392585892, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5168093372531075, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5292410109586854, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5378597308344979, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5413653482146401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.5539575223274369, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Employee.BirthDate,=,1962-02-18 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5635324199147362, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1962-02-18 00:00:00), Invoice.BillingState),Track.UnitPrice))", "score": -0.5650163297004838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5664613996095795, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.3488584724145551, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.State),Customer.Fax))", "score": -0.40273359874893017, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.State),Customer.Fax))", "score": -0.42477831604232336, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.42531931343950397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.4664924820328676, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.4797311687003018, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.48837954565230873, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.6631812915194186, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.UnitPrice,<=,1.99),Customer.State),Customer.Fax))", "score": -0.666450639105585, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Bytes,<=,1.99),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.6714519377117906, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.UnitPrice,>,1.99),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.6731451590141216, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Bytes,<=,1.99),Customer.State),Customer.Fax))", "score": -0.674721285297957, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.UnitPrice,>,1.99),Customer.State),Customer.Fax))", "score": -0.676414506600288, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Bytes,>,1.99),InvoiceLine.UnitPrice),Customer.Fax))", "score": -0.6814158052064937, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Customer),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Album.AlbumId),Track.Bytes,>,1.99),Customer.State),Customer.Fax))", "score": -0.6846851527926601, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01957042619565391, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5742713067156728, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6874183233303484, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.7048560226509252, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.8166765183570066, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.8484778168934662, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -0.9427033861310667, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.9519889157672878, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.9970836768334266, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.1966401581260417, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.Fax))", "score": -1.2104149126904593, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Artist.Name)", "score": -1.23778975571946, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.LastName))", "score": -1.2467045874049034, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.2677481343520085, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.2824263305494892, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.14431274226009203, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.15421337399494248, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.1684491577823401, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.18703268568131476, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.19192949986853297, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.22396223114100172, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.25235876178903155, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.2541802905322583, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.2543269766744271, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.31404314760518415, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.3328375387350896, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.33582036554927647, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.33643590231052917, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,!=,Sci Fi & Fantasy),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.3427381623995934, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the album title having the track with the lowest length in miliseconds not in the genre name  Sci Fi & Fantasy?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer),Album.Title))", "score": -0.35771735488604517, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.20510755303598233, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.2294377142025845, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.2819867462777653, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3021240788357318, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3038466936426849, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3063169074443675, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Invoice.BillingCountry,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3260129130152069, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3281768548092871, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3355691894580656, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3419632432212074, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Artist.Name))", "score": -0.3478977536496104, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.35756558881393774, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Artist.Name))", "score": -0.37222791481621254, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.38072587027143645, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist's albums do we have in our store?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3818957198001994, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.08658054254672977, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.11163984459250745, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1495327389227593, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.1956090451386564, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20794957270627923, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.21936841485999495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2236159420568666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Classical), Genre.Name),Genre.Name))", "score": -0.2564313108946465, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25685967784565716, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2594979729970572, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2700816767410093, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2748564172324779, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2922256392402074, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2998539519236565, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3119145312916318, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.Address))", "score": -0.39499036176130176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Johnson), Employee.Address),Employee.Address))", "score": -0.42513910634443164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.Address),Employee.Address))", "score": -0.4520140062086284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.Country))", "score": -0.49409965379163623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Johnson), Employee.Address),Employee.Country))", "score": -0.5242483983747661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.State))", "score": -0.5342803369276226, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.Address),Employee.Country))", "score": -0.5511232982389629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Johnson), Employee.Address),Employee.State))", "score": -0.5644290815107524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.Address))", "score": -0.5741811260922987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.Address),Employee.State))", "score": -0.5913039813749492, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Johnson), Employee.Address),Employee.Address))", "score": -0.5994766126386821, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.Country))", "score": -0.6021874413236219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.HireDate))", "score": -0.6026882301084697, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Address),Employee.Email))", "score": -0.6033791373483837, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Johnson), Employee.Country),Employee.Address))", "score": -0.6201646695844829, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.1232291663362013, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Customer.LastName),Track.Name))", "score": -0.20275800297994978, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2647181918517341, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.26883815277686124, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.2781150687448254, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.28772359538676406, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2928720199699524, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), InvoiceLine.UnitPrice),Track.Name))", "score": -0.300594936363384, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.30671175781314103, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Customer.Email),Track.Name))", "score": -0.30990144141559656, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.3108317187382682, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.BillingAddress),Track.Name))", "score": -0.31278861794168356, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.3212121577218402, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,Chile), Track.Name),Track.Name))", "score": -0.3279372267659425, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Chile),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.3402114656466551, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.1652775884158353, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22150921781604008, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.38082280257048307, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3851363750354837, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4832251577488524, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5192424993145253, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.529049335852753, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), Track.TrackId),Track.UnitPrice)", "score": -0.5444499597899267, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5865114949547485, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6263815121837006, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6703996708235719, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.678398689150711, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,!=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.6785560840689683, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,!=,None), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.6828696565339689, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,!=,None), Track.UnitPrice),Track.UnitPrice)", "score": -0.6883629206071961, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.18614267541488516, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.2539703769834887, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.26186385039939986, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.27136002753957134, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.2991577129528848, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.Company,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.30567101364535276, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Company,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.3084158970268618, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.31797496213039267, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.City,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.3230984203601449, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.36924096109065185, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.State,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.3846742892854382, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.4267572430622923, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.LastName,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.45101305563707966, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.LastName,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.4558011350965475, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that have made purchases totaling to a number other than 6.94?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,!=,6.94), Employee.PostalCode),Employee.PostalCode))", "score": -0.5097847951801668, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,6.94), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.03953215584314529, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.13312667325054536, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17232478287791686, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3180237966373125, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35473994211775034, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.35713688372875824, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.State))", "score": -0.3585763645582099, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4111230962238931, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.4120821987082488, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4231602205282908, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.42410844033055395, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.42608526058667345, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.46342151257489744, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.AlbumId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4644253177266735, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4645266337874137, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.20577208883191248, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.21457442160472656, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2870266583900308, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29582899116284483, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,1.99),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30033505666016735, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30184556221401804, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,1.99),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3091373894329814, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.31064789498683215, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Bytes,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3274182430161085, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),InvoiceLine.UnitPrice,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3280958774948817, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Bytes,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3362205757889226, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),InvoiceLine.UnitPrice,=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33689821026769584, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3709827265229961, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3749961513998391, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.37813311703713914, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)", "score": -0.07945421358562295, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.10204422980296671, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.1515926666303552, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.29964253359482024, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3351946344200299, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3403181116765239, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.34458335169399995, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)", "score": -0.3612896789852097, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.36531790799325153, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.36988061407033135, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.374128569359019, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.37782263961818563, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3783380960977078, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.40650887471250235, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks from playlists other than TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.41250861926848714, "correct_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.14924855976278195, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.15949174462730298, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,AB), Customer.Company),Customer.Company))", "score": -0.3648199632661999, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.37722333966667065, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.3874665245311917, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,AB), Customer.Company),Customer.Company))", "score": -0.42991944103414426, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Playlist.Name,=,AB), Customer.Company),Customer.Company))", "score": -0.5385384157198132, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Invoice.BillingCountry),Customer.Company))", "score": -0.5839963711696328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,AB), Customer.Company),Customer.Company))", "score": -0.5927947431700886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Invoice.BillingCountry),Customer.Company))", "score": -0.5942395560341538, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,AB), Customer.Company),Customer.Company))", "score": -0.6071213975446881, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Country))", "score": -0.6436201206306578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.6442681521075428, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.6484962075846852, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Country))", "score": -0.6538633054951788, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.014526519424180151, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.42620353350685036, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.4780074501995841, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.584894909954528, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Senhora E Senhor),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5956207892429892, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6012601232049449, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Senhora E Senhor),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6465193520816237, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6538893984372519, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Senhora E Senhor),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6712319521550248, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Senhora E Senhor),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.675475759630356, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.6850007155255035, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Senhora E Senhor),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.703791947462282, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Senhora E Senhor),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7263742427091341, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7307279894300943, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,=,Senhora E Senhor), Track.TrackId),Track.UnitPrice)", "score": -0.7424948958354155, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2116772445474371, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23196013898453313, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2877519284814878, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Customer.Country))", "score": -0.30451976019026245, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3080348229185838, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3207490328595429, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Customer.Country))", "score": -0.32480265462735847, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33251777997029086, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33536531196869296, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3398458723294428, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34103192729663895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3417634998584907, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34306945609781614, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35039746206920436, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35564829168601725, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2607345619455418, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Album),Track.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27362907422470434, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Track),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29821359197864156, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Track),Track.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3111081042578041, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Lost, Season 1),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33107670007490925, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Lost, Season 1),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34348425339035893, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Lost, Season 1),getData(Album),Track.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3439712123540718, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Album),Album.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3529035542811178, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,<,Lost, Season 1), Artist.Name),Artist.Name))", "score": -0.3551724380828319, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Album),Track.AlbumId,Album.AlbumId),getData(Genre),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3562564981879599, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Lost, Season 1),getData(Album),Track.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3563787656695215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Album),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3657980997863433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Lost, Season 1),getData(Track),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3685557541969046, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Lost, Season 1),getData(Album),Track.AlbumId,Track.AlbumId),getData(Genre),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36915099025460085, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there artists that created an album with the title Lost, Season 1 that contains tracks with a unit price lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,<=,Lost, Season 1), Artist.Name),Artist.Name))", "score": -0.40778866433267796, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Lost, Season 1),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.UnitPrice))", "score": -0.3603488268758509, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.Bytes))", "score": -0.37151784028326273, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.UnitPrice))", "score": -0.41479847153351773, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.4157442327430851, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.4203595898368468, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.UnitPrice))", "score": -0.4216100648124321, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.Bytes))", "score": -0.4259674849409296, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.42711924957851394, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.Bytes))", "score": -0.43277907821984396, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.4461991534520093, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Canada),Invoice.Total),Track.Bytes))", "score": -0.44889702791891495, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.450814510545771, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.452337553400713, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.4569529104944747, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.Total),Track.UnitPrice))", "score": -0.46051234330727664, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2537055968124387, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2564055269827716, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.25767186867281155, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2644231375603518, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2875889163004347, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.28897732739375676, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2902888464707676, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.29114428507869183, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.295728596281297, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2978955539662321, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.32244974379963703, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3292010126871773, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33227531422543616, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Margaret),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33548254135436856, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.37482985780446093, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.1073822199323331, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.18322912295843707, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,United Kingdom), Invoice.Total),InvoiceLine.UnitPrice))", "score": -0.4551112006374751, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.CustomerId,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.46137360175634967, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.46493450244452106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,United Kingdom), Invoice.Total),InvoiceLine.Quantity))", "score": -0.49609118205989944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5004862888672506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5234150632240926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),InvoiceLine.UnitPrice))", "score": -0.5309581036635791, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.5497222586491262, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,United Kingdom), Invoice.Total),Customer.State))", "score": -0.5604463170238887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,United Kingdom), Invoice.Total),Track.UnitPrice))", "score": -0.56095945341076, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5719380850860034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,United Kingdom), Invoice.Total),InvoiceLine.InvoiceLineId))", "score": -0.6003267119594966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the different total amounts of invoices sent to the United Kingdom?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Playlist.Name,=,United Kingdom), Invoice.Total),Invoice.Total))", "score": -0.628893916211382, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.05063566739593221, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.22737862330194733, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.23345873962853542, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.23591168304468332, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2643951879941887, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2682581533734991, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.28379581776971624, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2890620043263311, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2982223215912769, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),PlaylistTrack.PlaylistId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3158636823672225, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.3238614105727479, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.33244111766017687, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3860032788066517, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.3885539634662008, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.4618070424402007, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.009242330420623553, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5745736968270705, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6548115732243047, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7219760227460694, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7237716998455823, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7600802199819178, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.8022138991433037, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.EmployeeId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8223749945863258, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8308183017513754, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.8352015612435935, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.838500944643839, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8649555508422216, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.9070255083752272, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -0.9110444310695319, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Employee.Title))", "score": -0.9526434155255054, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.06543577414587122, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13755500382266556, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.UnitPrice,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20090447998891636, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2975533778349088, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,240325),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3160577211288868, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,>,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3292025725514799, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3316135451135513, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,<=,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33763680041794103, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.3377883238310903, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3473188809798799, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3632181922630888, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36967260751170317, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,240325),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3717476683127185, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,240325),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3776300175139644, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<,240325),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.384278911554313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.1818830152294302, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.19934623867965542, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Invoice.BillingCountry))", "score": -0.21333659620733306, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Invoice.BillingCountry))", "score": -0.2164013983055786, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.23661284437732016, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.25052134868554243, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Country),Customer.Address))", "score": -0.3345032451412743, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Address),Customer.Address))", "score": -0.33587988303454214, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Phone))", "score": -0.337109874082128, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3393560801294804, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Phone))", "score": -0.3443543819968497, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3492435993769056, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Address),Invoice.BillingCountry))", "score": -0.35293504266046527, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Invoice.BillingCountry))", "score": -0.3535849118630051, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are customer addresses of customers that bought tracks that do not cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Invoice.BillingCountry))", "score": -0.35641123975540356, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.4734204477495041, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Composer))", "score": -0.4787871307557907, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Bytes))", "score": -0.5124508953517761, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.5227833456224289, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5501522487825241, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Employee.Title))", "score": -0.596719837827095, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.5973590082353439, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.6016011304086533, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Composer))", "score": -0.6027256912416306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Composer))", "score": -0.6069678134149399, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.6278403839892235, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.6279622382348862, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Genre.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Milliseconds))", "score": -0.6293895310586777, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingPostalCode,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Composer))", "score": -0.6332070669955101, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.InvoiceDate),Track.Composer))", "score": -0.6333289212411728, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.009566843335552177, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.592810304022499, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6785683496600995, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7121367473948799, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.7143688831650084, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.7239850078622112, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId), Artist.Name),Artist.Name))", "score": -0.7424489643784494, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.GenreId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7899085056564594, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.Name), Artist.Name),Artist.Name))", "score": -0.7978947930324805, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.8001269288026089, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8378798155872348, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.8394317987303886, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.8663161163131008, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.8716371682385216, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists that we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -0.886183717256905, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.08806371371683751, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.09847556790178517, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.11555704236651813, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1513451474662119, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,None), None),None))", "score": -0.17455440370206327, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19440205993352153, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,None), None),None))", "score": -0.20404574430343417, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(None),None,None),None,None), None),None))", "score": -0.2113478228302495, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21201281010385262, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,None), None),None))", "score": -0.2192575947954884, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,None), None),None))", "score": -0.22258781012587198, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.229380086363699, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24200522689114376, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24517879253257396, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2460707974290957, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.027242604621278588, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Album.Title))", "score": -0.44444533435307676, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.47708470185898477, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.48465604146622354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Employee.Fax))", "score": -0.4987991973539465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Employee.Fax),Customer.Fax))", "score": -0.59592467823677, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Company),Customer.Fax))", "score": -0.596865954787063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.FirstName),Customer.Fax))", "score": -0.6201739934986108, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.6293021198143833, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Album.Title),Customer.Fax))", "score": -0.638782503992843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<=,WA), Customer.Fax),Customer.Fax))", "score": -0.6896677549011656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Company))", "score": -0.7133773788591498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.7213383074631565, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.State),Customer.Fax))", "score": -0.7311862138813012, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,WA), Customer.Fax),Customer.Fax))", "score": -0.7463468248970457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.02251565809274325, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.PostalCode),Employee.Address))", "score": -0.45648373084986815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.PostalCode))", "score": -0.5190471432069899, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Email),Employee.Address))", "score": -0.5475869269939722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.5884959621253074, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Country),Employee.Address))", "score": -0.593313703117019, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Email))", "score": -0.608288469062245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Country))", "score": -0.6658583900789381, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6746222896399559, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Invoice.BillingAddress))", "score": -0.6971917769769789, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.7100148124518455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Invoice.BillingAddress),Employee.Address))", "score": -0.7232792468639673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Track.Milliseconds))", "score": -0.7279949209550978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.741291753751284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that have the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Customer.Address))", "score": -0.7465180179933668, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,Sweden), Customer.Company),Customer.Company))", "score": -0.3024479438891487, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,Sweden), Customer.Company),Customer.Company))", "score": -0.3088219609256764, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingState,=,Sweden), Customer.Company),Customer.Company))", "score": -0.3119205039437662, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingState,=,Sweden), Customer.Company),Customer.Company))", "score": -0.3182945209802938, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.3218934672513569, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Sweden), Customer.Company),Customer.Company))", "score": -0.3359313147702778, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.33850438768058666, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sweden), Customer.Company),Customer.Company))", "score": -0.35254223519950756, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.3827652128562972, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.3891392298928249, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingState,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.3922377729109147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingState,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.3986117999152613, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Sweden), Invoice.BillingCountry),Customer.Company))", "score": -0.39965732270866283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,Sweden), Invoice.BillingCity),Customer.Company))", "score": -0.3999881962187104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}, {"orig_question": "Which are some companies based on Sweden", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Sweden), Customer.Company),Customer.Company))", "score": -0.41369517022758373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Sweden), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.21926520804845495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.22618745307408972, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.2345105264612357, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))", "score": -0.24143277148687048, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.Address))", "score": -0.4868354056306998, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.Address))", "score": -0.4937576506563346, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.State),Employee.BirthDate))", "score": -0.4990993742176215, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Address),Employee.BirthDate))", "score": -0.5060215596386115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.Title))", "score": -0.5109889362283866, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.State),Employee.HireDate))", "score": -0.5143446926304023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.Title))", "score": -0.5179111812540214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Address),Employee.HireDate))", "score": -0.5212668780513923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.State))", "score": -0.5786022994943778, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.State))", "score": -0.5855245445200126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Title),Employee.BirthDate))", "score": -0.6030935053058784, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Employee.State))", "score": -0.3303527974539975, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Track.Bytes))", "score": -0.353128328269122, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Employee.LastName))", "score": -0.41174735063850676, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Employee.Title))", "score": -0.4557318233901242, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Track.Milliseconds))", "score": -0.4738575958663205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Employee.BirthDate))", "score": -0.49224837059318816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.Title),Employee.State))", "score": -0.49323119158088957, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.State),Employee.State))", "score": -0.49537695879280363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.LastName),Employee.State))", "score": -0.5131523155623654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.Title),Track.Bytes))", "score": -0.5160067223960141, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.State),Track.Bytes))", "score": -0.5181524896079281, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.BirthDate),Employee.State))", "score": -0.5203878873044232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.LastName),Track.Bytes))", "score": -0.5359278463774899, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Callahan), Employee.BirthDate),Track.UnitPrice))", "score": -0.5374763154441098, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}, {"orig_question": "where do the employee live whose name is not Callahan", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.BirthDate),Track.Bytes))", "score": -0.5431634181195477, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Callahan), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.04575717149418779, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.39139102285844274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.4076492626045365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4155731636856217, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.4861862173129339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Customer.PostalCode))", "score": -0.49131165331345983, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5288427013729233, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.PostalCode))", "score": -0.5462663283396978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.City))", "score": -0.5799339849327225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.5871323456813116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.658941878733458, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.Address),Employee.PostalCode))", "score": -0.6681925168086309, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.Address))", "score": -0.6719789344642777, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.Name))", "score": -0.6800495225761551, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.Title))", "score": -0.6959249812935013, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))", "score": -0.03315336299419869, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Customer.State))", "score": -0.44154738445284986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Employee.State))", "score": -0.4568398589763092, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Customer.State))", "score": -0.4761210212170755, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Sullivan), Customer.State),Customer.State))", "score": -0.47942035827145446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.Country))", "score": -0.4808467025432037, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(Customer),Invoice.InvoiceId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Customer.State))", "score": -0.5206656710023457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Sullivan), Customer.State),Customer.State))", "score": -0.5317016187618719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.State),Customer.State))", "score": -0.5536210220973746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5541424489760415, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Customer.State))", "score": -0.5552392651264573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.Country),Customer.State))", "score": -0.5562540613609599, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Customer.State),Customer.State))", "score": -0.5594755654497457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Invoice.BillingState),Customer.State))", "score": -0.5848493300873088, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}, {"orig_question": "In which state lives the customer with the last name Sullivan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Sullivan),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5887160857402671, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Sullivan), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.1588596005279946, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.17097537285972483, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.19365004692302035, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.20826170041005662, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.2455203740472141, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.2462019763081139, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.25294680602484026, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.26864729529528425, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.2715429115556794, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Composer),Track.Composer))", "score": -0.281799181925423, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.28263124101211573, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.2894392933665714, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.2948719476150377, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.AlbumId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.29492251561958666, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}, {"orig_question": "How many different composers are in the tracks of the playlist Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.3445369540903366, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Name))", "score": -0.030606103497120785, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))", "score": -0.2197740910523862, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,232202), Track.Name),Track.Name))", "score": -0.5279903499358625, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,232202), Track.Name),Track.Name))", "score": -0.6606881705993146, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,null,232202), Track.Name),Track.Name))", "score": -0.6767978755706281, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,232202), Track.Name),Track.Name))", "score": -0.6837679831260175, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Bytes))", "score": -0.8959814750305668, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Employee.LastName))", "score": -0.9153231226555363, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,232202), Track.Name),Track.Name))", "score": -0.9218103514176619, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Name))", "score": -1.0385668253393305, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Album.Title))", "score": -1.0625715099922672, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,232202), Track.Name),Track.Name))", "score": -1.0739646641486615, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Bytes))", "score": -1.0851494625858322, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Employee.LastName))", "score": -1.1044911102108017, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,232202), Track.Name),Track.Name))", "score": -1.1109783389729273, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2699673910046408, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.313277428183877, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3314600182602646, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3393409734998049, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Genre.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34770883224587446, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3640925087935087, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Genre.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36542632343814896, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36617643089894775, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Genre.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37032856217195925, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3747700554395008, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38265101067904117, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38508991970609063, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.Composer,=,R.E.M.), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3852303512950642, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Genre.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38804605336423376, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4007993953912754, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.17748864065470116, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Out Of Time), Track.UnitPrice),Album.Title))", "score": -0.1943572319632949, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.3706766121301779, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Out Of Time), Track.Composer),Album.Title))", "score": -0.3861256546861114, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.3884332536877982, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Track.UnitPrice),Album.Title))", "score": -0.410267264787969, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.41486826379238895, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Track.UnitPrice),Album.Title))", "score": -0.42802390634558923, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.43262490535000925, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4462811937897922, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Track.UnitPrice),Album.Title))", "score": -0.45445891645018005, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4640378353474125, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4684155380419229, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Track.UnitPrice),Album.Title))", "score": -0.4722155674218515, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Track.UnitPrice),Album.Title))", "score": -0.48587185586163445, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.042814603909996043, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.07875707705167573, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.1834292252861053, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.35740893431263204, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Invoice),Customer.CustomerId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35884638159512283, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.3619349153653756, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36617397659292705, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.3828523914721941, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.390857704078886, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3937164905508156, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4030186724465584, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Invoice),Album.AlbumId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.417687396412675, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.41797574569290225, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Customer.Address),Invoice.Total)", "score": -0.4263431157136764, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43399361722145413, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.18516323033016902, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.19000860038246828, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds),Customer.Address))", "score": -0.2257589138007442, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress),Customer.Address))", "score": -0.25133798508227784, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.28194059896367824, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.2867859690159775, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.Address))", "score": -0.29250500621099546, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,1),Track.Milliseconds),Customer.Address))", "score": -0.31274236104175146, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds),Customer.Address))", "score": -0.3225362824342534, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),MediaType.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3360928494912659, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),MediaType.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.3409382195435652, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3470295514514757, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress),Customer.Address))", "score": -0.3481154323508027, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.35187500013879064, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Milliseconds,=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.35696034875344546, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.14411038507359886, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.14766931731371594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.1624384515909503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.17290446649801558, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.19668189217159276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.20714790707865807, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.21575790585287524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2602202805283373, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2637792127684544, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2808334536239327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.29868848270252774, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.309154497609593, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.31109657688833237, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.33293192328317023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3433979381902355, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01567405728241446, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.4988054990045806, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.5101711826637039, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.530507588782737, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5438465192128206, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.5613670340202537, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5621003254551378, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5674646954712005, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5943084530122782, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5952860705287808, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.6006504887572451, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.6156466516954417, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -0.6597227735213845, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.706344295846556, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any missing album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.7184633328724885, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.13662826107913814, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.16477028153679946, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.16814379723918774, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2127123807360636, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.BillingCity),MediaType.Name))", "score": -0.2258413038130994, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2294742080856471, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.25036477511584065, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2509339125417306, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.BillingCity),MediaType.Name))", "score": -0.2529136532092659, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.25889787101748896, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Invoice.BillingCity),MediaType.Name))", "score": -0.2628344103678807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2664673146404284, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),MediaType.Name))", "score": -0.2710315037765662, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),MediaType.Name))", "score": -0.27203181674036203, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type of files appear on the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),MediaType.Name))", "score": -0.27440501947895446, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.098126390674943, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Address))", "score": -0.38060919547576094, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4155675557171597, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4525831264733448, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5075545932716676, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Invoice.InvoiceId))", "score": -0.5162954876040514, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5445701640278527, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.Total),Invoice.BillingAddress))", "score": -0.5473761427012711, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5477777284037363, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Address),Customer.Address))", "score": -0.5726347597046697, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5774737159954942, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5810592833218874, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.Total),Invoice.BillingAddress))", "score": -0.5843917034896373, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,None), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6029646727542755, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Address))", "score": -0.6047395133124699, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.17178758234961233, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.19533022831295627, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.21921049656997868, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Jerry Cantrell), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27684569291131483, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.281192048979332, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Jerry Cantrell),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3434392793332347, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.3607175081386334, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.373535019461383, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.4008280420709846, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.4013958797415611, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(getData(Invoice),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.4162104673961553, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Jerry Cantrell), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4193210854451047, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)", "score": -0.4366863085958058, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.BillingAddress)", "score": -0.46243268620366507, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of purchases of a Jerry Cantrell composed track?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4628095944803379, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Jerry Cantrell), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.22477589210457832, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.23344394285146342, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Track.UnitPrice))", "score": -0.2397927217961653, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.26446436229173204, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.2731324130386172, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Track.UnitPrice))", "score": -0.27757179953019095, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Track.UnitPrice))", "score": -0.28514128282003454, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Track.UnitPrice))", "score": -0.2858460948501158, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.28610620048893826, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.AlbumId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.29477425123582335, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.UnitPrice),Track.UnitPrice))", "score": -0.3255187380628374, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.32579467067609197, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.UnitPrice))", "score": -0.33361561630252634, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.AlbumId,MediaType.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3344627324983314, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the media type Purchased AAC audio file with the highest quantity in a single invoice?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3720706772549269, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.09673307629985463, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.0992033868911028, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.1542030039929432, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.19151693443842957, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.UnitPrice))", "score": -0.24385083914412653, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.25104571164546957, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3150545073969298, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.35550377597377325, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3651807295620067, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Album.Title))", "score": -0.36571163658368594, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Bytes))", "score": -0.37607470124552766, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes))", "score": -0.38191860127429317, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3867238532440808, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.40796002611571164, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.UnitPrice))", "score": -0.42534329786205943, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.09143338335070439, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.30964455363664456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Track.UnitPrice))", "score": -0.322636697267626, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Invoice.BillingState))", "score": -0.36287460272524186, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Customer.State))", "score": -0.41192612407121487, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.4542900238311631, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Employee.State),Invoice.BillingState))", "score": -0.5017358416816933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Playlist.Name))", "score": -0.5159696078053457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Customer.Country))", "score": -0.5427445804825766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.5506216639778359, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Track.UnitPrice),Invoice.BillingState))", "score": -0.5601529831192238, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Employee.State))", "score": -0.581085773011182, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.5833654914176805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Track.UnitPrice))", "score": -0.5940779166421635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.6431841764724595, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.08078297743221025, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.09731771525249601, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.22622604442241903, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.25138241769059466, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.2631035768997494, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.26616976516511437, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.MediaTypeId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33012930839603255, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.3474415351941031, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file), Track.Bytes),Album.Title))", "score": -0.367280990164755, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file), Track.Bytes),Album.Title))", "score": -0.39084040682362026, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4338927968933451, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.4537642775662144, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.46634485085425453, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.4699165034256258, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.47328787529437555, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24984447351792663, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2974367313931388, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3071912667084747, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3225840568752628, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3328054297256456, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3425955479171051, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3651015968375759, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.370176314750475, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3705390486675781, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37535180529796003, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),InvoiceLine.Quantity)", "score": -0.3753928333510249, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3799308500658109, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3803977119866743, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3901522473020102, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of albums ordered on an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39018774794689204, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1380900847304167, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),MediaType.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2652283786482636, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.26934241425882904, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),PlaylistTrack.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2706838080124822, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.288734498012253, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2947063755785994, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.29603183189738475, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2972865144869883, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.29945631373285675, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.3025588786843443, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),InvoiceLine.Quantity,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3041399082996607, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3053677597358863, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Composer,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.308573983993897, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),MediaType.MediaTypeId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31377583204558307, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "On which album is the most expensive R&B/Soul track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3245977314514855, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.029259215631100233, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.3874815835597474, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.43199423355501726, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.43666090941056057, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4535383671914749, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.45820504304701815, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.4896976757242567, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.49436435157979997, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5112418093607143, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5159084852162575, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Track.Bytes),Track.Bytes))", "score": -0.5471432058862369, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Track.Bytes),Track.Bytes))", "score": -0.5755101775403307, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.Bytes), Track.Bytes),Track.Bytes))", "score": -0.582957213344632, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.585595170092347, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many tracks of different sizes cost at least 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Composer),Track.Bytes))", "score": -0.5981328390171257, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99), Customer.Company),Customer.Company))", "score": -0.3229244422288007, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99), Customer.Company),Customer.Company))", "score": -0.33417059180380876, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.3406090819415909, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.34461719064835983, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.3612437695031959, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.3652518782099649, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.37929509965844643, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.3833032083652154, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.3999297971878704, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.40533358048600704, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.40933594772909604, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.4170107247055765, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Company))", "score": -0.41822366262344124, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCity),Customer.Company))", "score": -0.42101308087331113, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies purchased tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Company))", "score": -0.4222259855651129, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Employee),Invoice.InvoiceDate,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24873842972105112, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.2794237378239421, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.27949544890553757, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Employee),Invoice.InvoiceDate,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28919061862103396, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Invoice.InvoiceDate,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2934044803447, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30008068235923624, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.3046937396489692, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.3047654507305646, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.3156439498576777, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.3258722562700094, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Employee.EmployeeId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.3259439673516048, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Invoice.InvoiceDate,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3338566692446828, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Employee),Invoice.InvoiceDate,=,Gerald Moore),getData(Album),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3382613760940095, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3405328665749145, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Employee),Artist.Name,=,Gerald Moore),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.34064540605502497, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.21871366394299066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2438570600716048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.2718846502606316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27313003360904986, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,>,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2875153836575919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2891838398135209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31678835719503695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.3423548261311618, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36662794479286936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.379107920620307, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99), Invoice.BillingAddress),Track.Milliseconds))", "score": -0.41979893111051025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.UnitPrice,!=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.42494943409838015, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingAddress),Customer.Address))", "score": -0.43056942079828375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4542224076358252, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4557954978331322, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.022101708284026245, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.TrackId),Track.Bytes)", "score": -0.36734343096797584, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,291866),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.5260208694417662, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,291866),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.6185130324091326, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes)", "score": -0.6673073936463308, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds,!=,291866),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.6715380790607437, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.6983951134643576, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.7064931614477246, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.7218668808527582, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,>,291866),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.7325104348476689, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,!=,291866),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes)", "score": -0.7590316829218219, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.7640295846540539, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.UnitPrice),Track.Bytes))", "score": -0.7859530086025188, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.UnitPrice))", "score": -0.8029417325778923, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,291866), Track.Bytes),Track.Bytes))", "score": -0.8275933967997844, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.07384671077034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.17658422320982936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.37693217202922824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.4796696844687176, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4903749482882631, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5185732214361872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5688468794514847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5931124607277525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6013507917629011, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6371699514975262, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.6715843918909741, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6794761376631868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.6880629064226014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.692241647231028, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.BillingCity))", "score": -0.7111495734834534, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),Track.Name,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1844470589408021, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.2084210233692903, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Track.Name,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.2155725998586564, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.22722020131956713, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.23258937673664487, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.240731216551793, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.2595303945020698, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.2822120888561869, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.2925965537143162, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.3010112668064638, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Genre.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.31139573166459306, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.31452228203868965, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.32490673775965156, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Track.Name,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3253618299649197, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.3333214508517992, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.16370444776585444, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1731171370837871, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.17752799416457396, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18207969922263328, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2063000832785736, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2820670821004018, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.291029644239248, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.300025521910776, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3015132534371527, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3096463856305438, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.31478837983870517, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.315591561608123, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.UnitPrice,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31860894776938997, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3240684342451816, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Invoice.InvoiceDate,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3271726877159593, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.04648825279071547, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.10630306730202538, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.13149667359565956, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.24746862845765447, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Genre.Name),Genre.Name))", "score": -0.29073406275824154, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Brazilian Music), Genre.Name),Genre.Name)", "score": -0.3136941376355775, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.32440253616625625, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.GenreId))", "score": -0.3462896262575419, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Genre.Name))", "score": -0.3604986745317784, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3659800448632853, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3819567778072963, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.GenreId))", "score": -0.39740960340303766, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.4041444654713285, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.40791169328418997, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre appear on playlists other than Brazilian Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40839755840187547, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23043845918576086, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24142194669403919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rome),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2814859809787396, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3024866847971737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30499298859592394, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30976564580706656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31400680581742163, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31413561186746, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3201649571830287, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32128576682731447, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rome),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3219725226946184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3274439181929215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rome),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3405777255996108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rome),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.343177758059431, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rome),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35140665590546943, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.10624842632756161, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.19916883849510492, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.20631559049443024, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22527481071002406, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22564837572237578, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.22812131654387222, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.248355273893479, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.2515671815671555, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2546008537711431, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.25487614711511797, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.26075940519968294, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2734110764009651, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2753576708961563, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2774125709443627, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.2788823840302265, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.City),Customer.City))", "score": -0.09661157028858725, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.City),Customer.City))", "score": -0.12753673242514196, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,None), Customer.City),Customer.City))", "score": -0.41266325460856024, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,None), Customer.City),Customer.City))", "score": -0.5258959566253907, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.City))", "score": -0.539156864351753, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,None), Customer.City),Customer.City))", "score": -0.5700820264883077, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,None), Customer.City),Customer.City))", "score": -0.5732504163879639, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,None), Customer.City),Customer.City))", "score": -0.6454888020653016, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Fax),Customer.City))", "score": -0.7243798530671484, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,None), Customer.City),Customer.City))", "score": -0.7265953456062562, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.Fax),Customer.City))", "score": -0.7553050152037031, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.City))", "score": -0.7770862613815552, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.LastName),Customer.City))", "score": -0.7783556736085302, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.LastName),Customer.City))", "score": -0.8092808357450849, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Employee.City),Customer.City))", "score": -0.8240310705277807, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.11183773652901963, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12613299693614002, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.1280327588128673, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.1337946121740204, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17818716919452207, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18701585418470168, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2628068014506873, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Track.TrackId),Invoice.Total)", "score": -0.27045954513537324, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.280260294192483, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2815809598266501, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29106064473186294, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.Total),Invoice.Total))", "score": -0.30472322241613625, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3092830638141441, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33443445715854503, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Track.TrackId),Invoice.Total)", "score": -0.3464267100508346, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.17665679053425265, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,None), Customer.Email),Customer.Email))", "score": -0.18472570971607638, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.22559537349365208, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.444478236595387, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,None), Customer.Email),Customer.Email))", "score": -0.4525471557772107, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Email),Customer.Email))", "score": -0.4652740289366193, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Email),Customer.Email))", "score": -0.473342948118443, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,None), Customer.Email),Customer.Email))", "score": -0.5509579707777448, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,None), Customer.Email),Customer.Email))", "score": -0.5590268899595685, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Address))", "score": -0.6112085194235988, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,None), Customer.Email),Customer.Address))", "score": -0.6192774386054225, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,None), Customer.Email),Customer.Email))", "score": -0.7425562669432111, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,None), Customer.Email),Customer.Email))", "score": -0.7506251861250348, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Address),Customer.Email))", "score": -0.7775826961642451, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Customer.Email))", "score": -0.7810026933348126, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.05355563726796847, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.1985992263407396, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.2726854116833835, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2894732422532323, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Playlist.Name),Track.Name))", "score": -0.2946896049520726, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.3021676151145418, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.31527705062735895, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.32386648306022514, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.327000633075686, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.35076787620910554, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.3522294958612024, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))", "score": -0.36162877622927186, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.37961216788277446, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.393091516523035, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}, {"orig_question": "Find the track names of the playlist named Brazilian Music.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Album.Title))", "score": -0.39629023030856, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingPostalCode,!=,T3B 0C5), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23024159251959495, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,T3B 0C5), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24576896063544035, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25071314580629656, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,T3B 0C5), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3059597071471817, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3126861393438859, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31747815263305534, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3176105917315465, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.PostalCode,!=,T3B 0C5), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3214870752630271, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32321002483514377, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingPostalCode,!=,T3B 0C5), Track.TrackId),Invoice.Total)", "score": -0.32427925352591064, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCity,!=,T3B 0C5), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3258549765215932, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,T3B 0C5), Track.TrackId),Invoice.Total)", "score": -0.33980662164175607, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3413823446374386, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34206821730277304, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Invoice),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36126278615038276, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.11228961846851993, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13034221197937915, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13893761283206052, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.22608064008574927, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2770398423509564, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2824677545452652, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,0.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3061395770577114, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingCity),Customer.City))", "score": -0.31525021003861614, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.3500469727637433, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.3586423736164247, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3662638853376016, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,0.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3738475241194619, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.37856749956390706, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.3809611328281374, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}, {"orig_question": "To which cities were the invoices with the lowest quantity off all invoices that include tracks with a unit price higher than 0.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38259745511226273, "correct_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10787363322631602, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.11007850215241569, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18608924337275692, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19500818317526106, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27315416289646577, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28037130749707934, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3030120677203545, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3451960349951517, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3573030319494338, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3753303655984143, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3824976230986987, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38254751019902794, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39238879323627157, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.3979167387316635, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39960593783688514, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),MediaType.Name))", "score": -0.18861919415340586, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.20896842553274267, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.22361731380761987, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,Album.AlbumId),Track.Milliseconds),MediaType.Name))", "score": -0.2348891493443691, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Track.Name))", "score": -0.24396654518695665, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,Album.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.2552383807237059, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.2698872689985831, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.2701628548250805, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,MediaType.MediaTypeId),Track.Milliseconds),Track.Name))", "score": -0.2902365003779199, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.2905120862044173, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),Track.Name))", "score": -0.31230130496140823, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),MediaType.Name))", "score": -0.3161538459030959, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.3164328100160438, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))", "score": -0.31951818304261087, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "Which format is the longest track from the genre Easy Listening?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.3211501951854985, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Easy Listening),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.008624584785138723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Employee.Country))", "score": -0.5202782008782378, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5245773863654047, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5306258411465972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5798932302309833, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5859416850121757, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6198993947417627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6200176662354854, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6259478495229551, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6271397197428387, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6275637994899297, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6422105143855132, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Employee.Phone))", "score": -0.7144651267662994, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.7171713230418391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Employee.Country))", "score": -0.7177713938045125, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.23779469994492447, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.25511818206796577, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),MediaType.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2664733447524018, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.28354949167486115, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.2984522413223479, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Artist.ArtistId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.30617191959293594, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.3072021441850061, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),MediaType.MediaTypeId,Album.ArtistId),MediaType.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3079381463264025, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),MediaType.MediaTypeId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.32411837943319216, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(Track),Artist.ArtistId,Track.MediaTypeId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.32515691447252154, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.32981365115021344, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.33506250415417727, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(Track),MediaType.MediaTypeId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))", "score": -0.33671219349021814, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),MediaType.Name,!=,Audiobooks),merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3385153521008651, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),MediaType.Name,!=,Audiobooks),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35243137961750054, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.06900037006443026, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.08622044021063646, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.3002558306250779, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.33388547401371993, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.34893721632282826, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.39959513724670975, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Genre.Name),MediaType.Name))", "score": -0.40008640813019203, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.40200074852359213, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.Quantity),MediaType.Name))", "score": -0.4032459552901118, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.41705249083270046, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,InvoiceLine.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.4496307502282326, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.4719675428325196, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.47403598021175614, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.4748807090976321, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Name),MediaType.Name))", "score": -0.4859828159542534, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.07819075433555532, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1462056063865917, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.17755902427685244, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.17887963060761738, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1828095593843677, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19042965431322584, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2416862859380313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2796900709653768, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.30414307533670637, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3166708946601086, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3395097039551852, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3543809622791039, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),Album.AlbumId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.36456687519142655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3750142065295201, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.37611365695296123, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24274001656697802, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.26153769577753533, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2831868974264942, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.29311855770252676, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.30425546462712105, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3147677593514857, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.31689926119338796, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3327732096077672, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)", "score": -0.3344020866613537, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3385484628423469, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.Country,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.34636672802881807, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.34848012311837945, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.35442237155888523, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingAddress,=,Norway),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.36120302819092265, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks ordered by customers from Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3643540318349178, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,296829), Track.Bytes),Track.Bytes))", "score": -0.27216908729315037, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,296829), Track.Bytes),Track.Bytes))", "score": -0.34084412849188084, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,296829), Track.Bytes),Track.Name))", "score": -0.35689494407415623, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,296829), Track.Name),Track.Bytes))", "score": -0.3801948840045952, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,296829), Track.Name),Track.Name))", "score": -0.40880262975925574, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,296829),Track.Name,=,296829), Track.Name),Track.Bytes))", "score": -0.42004681995222437, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,296829),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Bytes))", "score": -0.42200602867029663, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,296829), Track.Bytes),Track.Name))", "score": -0.4255699852728867, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,296829), Track.Name),Track.Bytes))", "score": -0.43195746103489313, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,296829), Track.Name),Track.Name))", "score": -0.43435600177131783, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,296829),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4347829827085548, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,296829), Track.Bytes),Track.Bytes))", "score": -0.4371988663697266, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Genre.Name,=,296829), Track.Bytes),Track.Bytes))", "score": -0.4431077132248902, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,296829),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4453608143928445, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,296829),Track.Name,=,296829), Track.Name),Track.Name))", "score": -0.4515012626947262, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1426189619901781, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Fax,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20425574432254204, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2284903293400075, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.2488160224265071, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.28001917865775977, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.281422314435496, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.28333837854613775, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.28755284478833065, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.28765370745664753, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.2907398257572744, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29298873428323635, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.29624483451324857, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Fax,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.2998609696134789, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Fax,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.30845209667008, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,=,Lethbridge), Invoice.InvoiceId),Invoice.Total)", "score": -0.31523098661579374, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.Title))", "score": -0.27421428020170424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Jane), Employee.Title),Employee.Title))", "score": -0.33055723215511534, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Artist.Name))", "score": -0.35073709989956114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Jane), Employee.Title),Artist.Name))", "score": -0.40708005185297225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.Fax))", "score": -0.4276143511669943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))", "score": -0.4305349042551825, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Fax),Employee.Title))", "score": -0.4551247557537863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Jane), Employee.Title),Employee.Fax))", "score": -0.4839573031204054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))", "score": -0.49976942709219807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Artist.Name))", "score": -0.5070577239530394, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.Title))", "score": -0.5102553093565803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Jane), Employee.Fax),Employee.Title))", "score": -0.5114677077071974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.HireDate,!=,Jane), Employee.Title),Employee.Title))", "score": -0.5173093771274581, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))", "score": -0.5324284363439683, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.FirstName,!=,Jane), Employee.Title),Artist.Name))", "score": -0.5333695446417536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
