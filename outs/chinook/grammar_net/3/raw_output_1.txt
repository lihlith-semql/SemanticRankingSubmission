{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14618552898624015, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.1942935180596609, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.194539502722997, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21079747231477722, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.21394349478788827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.23006541828848723, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.23568270538182656, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24136627379362446, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.24781770635924635, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25599327118134696, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2591404716047226, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2826428777995661, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32026526565990215, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.32794380507052423, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3998764807712439, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3151557282338952, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.3206921851117984, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.33751900119294526, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.33824029838485636, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3398139353281726, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.3430968711964455, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.35180470098125644, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3533279034559395, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Track.TrackId),Track.Bytes)", "score": -0.3549075528625667, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.35720248699779406, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Bytes)", "score": -0.35734115785915965, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3599340009159724, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.Bytes)", "score": -0.3600312465130993, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.361401327122005, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB), Track.TrackId),Track.UnitPrice)", "score": -0.3625153144127499, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23908020698549037, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2463309049126939, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27990786241491106, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2892267854885028, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29939079890857767, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3004557986493109, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32269031314613095, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.324347759741116, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3254263666039404, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33814796195455077, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.3711506723440254, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3797291200911943, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.38327284599083833, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3897116419272703, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3916456173316848, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.1928527985000983, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.36955696327589366, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3701911748644475, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3865373775505756, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,!=,Rock And Roll), Track.Name),Track.Milliseconds))", "score": -0.3950437937164679, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Track.Name))", "score": -0.3971264032371641, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.41571751083066416, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.4222475281329712, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.4226050721114167, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.4256091469008561, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Album.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.4347402226572008, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,InvoiceLine.TrackId),Track.Milliseconds),Track.Name))", "score": -0.4359335744782823, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.TrackId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.4681313922952534, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.TrackId,Album.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.48026654284103754, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,PlaylistTrack.TrackId),Track.Milliseconds),Track.Name))", "score": -0.4821031976440025, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.18253983711474575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.25588765149586834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.34845320289605297, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.4324696975296171, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.44157424350851215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Country),Customer.Address))", "score": -0.46729448964470066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.49840498497360386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.49920500224106945, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5149220578896347, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Address))", "score": -0.5292317899269114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Country),Customer.Address))", "score": -0.5406423040258233, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.555076965742046, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5587341875361744, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.5717527993547264, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Employee.Address),Customer.Address))", "score": -0.5748756282555405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22571221130833427, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22734141992799298, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCity,=,Amsterdam),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2436622400869685, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,>,Amsterdam), Genre.Name),Genre.Name))", "score": -0.281016191810927, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Amsterdam),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2900390455777185, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCity,=,Amsterdam),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29050462422876044, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Amsterdam),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2999220381741934, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30024376127695707, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,>,Amsterdam), Genre.Name),Genre.Name))", "score": -0.3012811079033614, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Amsterdam),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30187296486098836, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam), Genre.Name),Genre.Name))", "score": -0.3087576404966724, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Amsterdam), Genre.Name),Genre.Name))", "score": -0.31637434713481266, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Amsterdam), Genre.Name),Genre.Name))", "score": -0.3439866762640043, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3457554779714535, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "From how many different genres are the tracks, which were bought by customers from Amsterdam?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,>,Amsterdam), Genre.Name),Genre.Name))", "score": -0.3532203605773821, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Amsterdam),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.020840959545772576, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.733307758146722, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7555292452587293, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.7941449605311818, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.8615069211955415, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8716719658102855, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.8790811241163862, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.9159804134516878, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.PostalCode),Artist.Name))", "score": -0.9279181175561644, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Fax),Artist.Name))", "score": -0.9577844183226603, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9583614285873386, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9853226690527132, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.0886059633758167, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -1.1259774139187742, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.1292218335348325, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.038530353966052644, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.48811453352391254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Email),Customer.FirstName))", "score": -0.5146235195425106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.LastName),Customer.FirstName))", "score": -0.5484689739969326, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.FirstName))", "score": -0.5543067367252661, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.LastName))", "score": -0.5585328252491308, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Email))", "score": -0.5605502040561987, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.5630527637404157, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.5861210544098867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Phone),Customer.FirstName))", "score": -0.6128545073297573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Employee.FirstName),Customer.FirstName))", "score": -0.6410154370096279, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6460038400691701, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca),getData(Customer),Employee.EmployeeId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.659191170411169, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.LastName))", "score": -0.7149851234134985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Phone))", "score": -0.7251335294422461, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Bytes))", "score": -0.25101520483048495, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.25524250527542597, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.26934123509970787, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.2787846627034746, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.28473222496916245, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.2931527152684248, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Bytes))", "score": -0.30277421674760435, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Bytes))", "score": -0.3045002109482349, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Album.Title))", "score": -0.3084561458758687, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Album.Title))", "score": -0.3094818806769734, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Album.Title))", "score": -0.313910317931038, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.31782334346254615, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Album.Title))", "score": -0.31792730608141045, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Bytes))", "score": -0.32099886874736355, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.3291791948660909, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.2769374445514907, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.30708426021921126, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.32530911006833707, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.33203223005284865, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.33928591247364676, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35474261736634183, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.36801900786249087, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3799409445471715, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.38216741617181493, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.39057026470466083, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.39118275523315077, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3932173350433205, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3972302017536715, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3994482397701795, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),InvoiceLine.UnitPrice),Album.Title))", "score": -0.40368273616647116, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.23231884165378508, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.25318796795689846, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.2568795473959322, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.Quantity),Album.Title))", "score": -0.2702071857715952, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.Quantity),Album.Title))", "score": -0.29476789151374233, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.29954797899753216, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.30237572524371703, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31153867598336304, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3241086847396793, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3271219391440268, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.Quantity),Album.Title))", "score": -0.3374363231153423, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.340758765971197, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.34578891461648775, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3596296984890095, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album has the most expensive track, which has been sold for at most 1.99 dollars?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3607264332701816, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.31979143258909054, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,Erzs\u00e9bet krt. 58.),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.36076311002170214, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), MediaType.Name),Track.UnitPrice))", "score": -0.3909164011276425, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.40734953341376706, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,BC), Track.UnitPrice),Track.UnitPrice))", "score": -0.4267405464875962, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,Erzs\u00e9bet krt. 58.),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,BC), MediaType.Name),Track.UnitPrice))", "score": -0.4277914262279602, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.45117171249423743, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.47558128778401293, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.47724311415315984, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.4772483605742632, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.47891018694341014, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.4956451535248797, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.4970456856384181, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.49730690681887557, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}, {"orig_question": "Are there unit prices associated with tracks sold to a customer living at the address Erzs\u00e9bet krt. 58. but not in the state BC?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,BC),merge(getData(InvoiceLine),getData(Track),Track.MediaTypeId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),Track.UnitPrice))", "score": -0.4973122928322547, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,Erzs\u00e9bet krt. 58.),filter(getData(Invoice),Invoice.BillingState,!=,BC),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.34510355792735936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.HireDate))", "score": -0.4090884213874233, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.HireDate),Employee.BirthDate))", "score": -0.4118664821216953, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.BirthDate))", "score": -0.45356255374645116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.City))", "score": -0.45361268870328786, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.HireDate),Employee.HireDate))", "score": -0.47585134558175923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.HireDate))", "score": -0.5175474172065151, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.HireDate),Employee.City))", "score": -0.5203756128976238, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.5237838555329272, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.Bytes)", "score": -0.5336463701269497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Track.TrackId),Track.Bytes)", "score": -0.5336507319538005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.5529273187348736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(min(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,590 Columbia Boulevard West),Employee.BirthDate),Employee.BirthDate))", "score": -0.5655608764673294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.BirthDate))", "score": -0.5684425194457191, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.City))", "score": -0.5755084227269602, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3159929601272462, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3568259687146757, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3830547450467099, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41742807899860745, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4238877137945205, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42842416987575255, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4343391890000815, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44853024159062177, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4506181428098381, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4544452607149507, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4573282741551429, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4584005675682588, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46431564794068514, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4668602291527969, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "Whats the sum of all invoice line quantities?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4864860051974463, "correct_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "How many times has a rock song been purchased?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.486460422741325, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5076716103232816, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5163320916801458, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5321687269437928, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5355982286825292, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5439009566520667, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5443103986582011, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5511747044994102, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.5584028085597526, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5601298018126705, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Rock),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.5602571013825494, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.560273759854681, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.5640168436062862, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Rock), Invoice.Total),InvoiceLine.Quantity))", "score": -0.568432529782208, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times has a rock song been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,Rock), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.5723195715758238, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.30912163234392354, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Genre.Name))", "score": -0.35090984586614077, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Album.Title))", "score": -0.3527792239109825, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Genre.Name),Genre.Name))", "score": -0.3891255242959775, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Genre.Name),Album.Title))", "score": -0.39099490234081924, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Album.Title),Genre.Name))", "score": -0.440800044178905, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Album.Title),Album.Title))", "score": -0.4426694222237467, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,None), Album.Title),Genre.Name))", "score": -0.44392680276966284, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,None), Album.Title),Album.Title))", "score": -0.44579618081450456, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Genre.Name))", "score": -0.4607423504274585, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Album.Title))", "score": -0.4626117284723002, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Genre.Name))", "score": -0.4763156054945294, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,None), Album.Title),Album.Title))", "score": -0.4781849835393711, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Genre.Name),Genre.Name))", "score": -0.47901572260874176, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums in our database for which we do not have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,None), Genre.Name),Album.Title))", "score": -0.4808851006535835, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2875862234618709, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3078084876373726, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30804379404390153, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34169144614033303, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.34314925898600673, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.3472833620024464, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3480907592972271, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3510321361632961, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.35721417401239075, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3613407476062007, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36797900891901525, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36940189420624836, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3774364381878924, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.37907753211186335, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Invoice),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3839853874493022, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.2654038036162092, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.34068543854300515, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Name))", "score": -0.3612182700926496, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.4085687959486677, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Name))", "score": -0.4364999050194456, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.47155885788743035, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Name))", "score": -0.5043832624251081, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5144434119088527, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.5322533065373136, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5323497026297169, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)", "score": -0.5364693074864966, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.Name),Track.Milliseconds))", "score": -0.538229901195105, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.5423167689615211, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Milliseconds))", "score": -0.5468404928142263, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks composed by Beto Guedes, M\u00e1rcio Borges that we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Beto Guedes, M\u00e1rcio Borges), Track.Milliseconds),Track.Name))", "score": -0.5673733243638708, "correct_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Beto Guedes, M\u00e1rcio Borges), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.02501409529612191, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.45333649574349966, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5588217241806182, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.565505283645197, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.5959710943498067, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5987982509047928, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.626821660918402, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.6624391469158581, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6881292428687332, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,None), Album.Title),Album.Title))", "score": -0.702786716619838, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7314083624330082, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Track.Bytes),Album.Title))", "score": -0.7530242365526818, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,None), Album.Title),Album.Title))", "score": -0.7699763718046597, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.79090307084698, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are in the database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.8228162884042831, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.32562304686659255, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.391708988111515, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Artist.ArtistId))", "score": -0.40496106025853, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.ArtistId))", "score": -0.4710470015034525, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Artist.Name))", "score": -0.5013537472546143, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5330240833632726, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.5674396884995369, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Album.Title),Album.Title))", "score": -0.6042137047334109, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -0.61236209675521, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,None), Album.Title),Album.Title))", "score": -0.6158279752417002, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Album.Title))", "score": -0.6571935478371571, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Employee.PostalCode))", "score": -0.6673080255214815, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -0.7087547837512944, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.AlbumId))", "score": -0.7155111583043454, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7232794890820796, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.16704436394639727, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19511897249195245, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21042381364295085, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2313545674437839, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24594187621165348, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(filter(getData(Track),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25890070769502543, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2782546219696032, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28960476105718796, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2999012793178886, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3156289373650213, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3357008716260786, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3392126635703698, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3431576711085462, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.35628880140476255, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3634820247997778, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.26206222738921864, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.2986239883882924, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2986565271081685, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.30832891939792045, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,0.99), Customer.Address),Customer.Address))", "score": -0.318854859671072, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3311936764514162, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Invoice.BillingAddress),Customer.Address))", "score": -0.3349528483463212, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Customer.Address),Customer.Address))", "score": -0.3584300566053912, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3584700857815377, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))", "score": -0.38203985353523146, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.39047665583049007, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,0.99), Customer.Address),Customer.Address))", "score": -0.3928357932450886, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99),Invoice.Total),Customer.Address))", "score": -0.39988713230128203, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.BillingAddress),Customer.Address))", "score": -0.4045722775199, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that ordered tracks that are cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4062847222241555, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,1.99), Customer.Address),Customer.Address))", "score": -0.2321981907894535, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.257343766598982, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.28205984627182695, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3000981828213881, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.32470050974507336, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.32481426249423306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,1.99), Customer.Address),Customer.Address))", "score": -0.333863849795862, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,1.99), Customer.Address),Customer.Address))", "score": -0.34934965829535636, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3494165960631309, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Customer.Address))", "score": -0.36373686204771855, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.36443422966807204, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<,1.99), Customer.Address),Customer.Address))", "score": -0.37765552721966156, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3796233857268285, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingAddress),Customer.Address))", "score": -0.3823395072087959, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks cheaper than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,1.99), Customer.Address),Customer.Address))", "score": -0.3828126906468043, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4067222398586763, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4155294519341881, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4250085656655182, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.426774233698075, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4333377603529023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4499637822243445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4587709942998563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.GenreId,Track.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.46760651453538743, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.46825010803118644, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.GenreId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.4693566006972672, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4700157760637432, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.47635454603850313, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.GenreId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4772201764833565, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Track.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.478046536523901, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.4797966226857808, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.41988874063737847, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.45626953410587073, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.4688961645750015, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.4783914268909061, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Album.Title))", "score": -0.4893819954981589, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.4987400009782481, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.49928666669147687, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Album.Title),Album.Title))", "score": -0.4995690615473872, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.506155714311523, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5061656600781267, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5147605049480212, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.521639578077222, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Invoice.InvoiceId), Track.Bytes),Album.Title))", "score": -0.5223897233863629, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5237949687727473, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}, {"orig_question": "how many bytes result from the tracks which are available starting at 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5321077952503547, "correct_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.05146461741242092, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.37994371650285824, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.3877119877441422, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.4802755141040872, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,>=,AB), Employee.Fax),Employee.Fax))", "score": -0.48768642979848664, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.48804378534537113, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Employee.State),Employee.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.5311297157012194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Fax),Employee.Fax))", "score": -0.5711029005280801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.Fax),Employee.Fax))", "score": -0.5733373931336081, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Fax),Employee.Fax))", "score": -0.5890097959636478, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Customer.Fax))", "score": -0.6148000263347058, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.PostalCode))", "score": -0.6158736251964001, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.Fax),Employee.Fax))", "score": -0.6197831175959436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,AB), Employee.Fax),Employee.Fax))", "score": -0.6243258259928552, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees from AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Fax))", "score": -0.6244185708201258, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17689204888102694, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19742362949183875, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2010448343099066, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.20115606450885523, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21374805968719746, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22018670181770736, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2284350631443664, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23844511109455616, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2440551714463527, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.255724165739662, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2559558492842142, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2631255225766815, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.28479687371415546, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2897204410806623, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2982306919993238, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.08734074432686612, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.2895560619635944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.41065874443241207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.Total),Invoice.BillingState))", "score": -0.42427626449898526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.4303901550574665, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5275497707752947, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.Country))", "score": -0.5528153238101368, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5546333632278293, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.555742058375472, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5643287151099671, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Invoice.BillingState))", "score": -0.5673547108872299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.5707627828625543, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.57112759159853, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5808229434806678, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5856095521330817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23261501968317486, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.23825900176647663, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2656253655720553, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2790297919278773, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2919332759535909, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.33040325730363473, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33231507358088647, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.35139715377023745, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.35411822251330677, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.36394421896407125, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.37220692396790933, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.37316034845531476, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3776830904518609, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3833160229405112, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3878860470835152, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Title),Employee.City))", "score": -0.34466202090334264, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Title),Employee.Title))", "score": -0.3864990053589281, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.City))", "score": -0.40438922027897206, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.City))", "score": -0.435610848468059, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.Title))", "score": -0.44622620473455754, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Title),Employee.PostalCode))", "score": -0.4539361027891573, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.Title))", "score": -0.47744783292364446, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.Title),Employee.City))", "score": -0.48995985369037953, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.City),Employee.City))", "score": -0.4953380478436884, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.PostalCode))", "score": -0.5136633021647867, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.Address),Employee.City))", "score": -0.526025134127849, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.Title),Employee.Title))", "score": -0.531796838145965, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.City),Employee.Title))", "score": -0.5371750322992739, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.PostalCode))", "score": -0.5448849303538736, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.City),Employee.City))", "score": -0.549687053066009, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.20695712460928917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.344931077275445, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3505597342436886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3555900160854435, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3901316339093816, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3953242628361309, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4272858503810982, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.44052481947006755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4460544888561344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Customer.State),Invoice.BillingState))", "score": -0.4474132269078902, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4543177266305065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4574763957371686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4702988141049143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4724863892944679, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.5018703121652015, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.19808896694071326, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.20686468529017807, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21196841517016976, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.24216207647172458, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.2596110451346227, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.26246510386258, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.26431264017953376, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2806522806792899, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.30089713052097466, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.3091565761179044, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.3102746201225226, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32178936315356205, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.32430211753341887, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.3352612536361623, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.34090462624716195, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18516783715313068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3113064125282108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3671966038746177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38187186346476665, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.415082386597763, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42588967070361244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4335964571950282, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4426358308992504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.45034261739066617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4682422888240993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47950626085928066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4819538277396741, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48760377912628244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.49333517924969783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5063488885862171, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.23567941590219188, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2553617928382695, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.2648763890070587, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.2731815951260624, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.2799401571253459, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29085126687117285, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.30008382399765526, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.30140626711244317, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.306639159375531, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31669115095722866, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.32019907914184753, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.33513232916119484, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(MediaType),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.3409216826732611, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.3409400812446503, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35118916531679806, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2897162138688145, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.36934468887920957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3729294165241299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3969191610085545, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4429312794673024, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.47654763601894956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4801323636638699, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4992135047762881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5058680029459232, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5206050425040303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5223044650373243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5225597544776974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5256273504325393, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.526144490504521, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5289589632069592, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.15154549195755515, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.168366244075153, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.18634043866672997, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.19484830759184518, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.2058069903018711, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.28999189366597045, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.Bytes),Track.Bytes)", "score": -0.295275238340853, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2956421450581766, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), Track.TrackId),Track.Bytes)", "score": -0.30211374909027877, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3571097204577337, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Album.AlbumId),Track.Bytes)", "score": -0.36061516924644815, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Movies), Track.Bytes),Track.Bytes)", "score": -0.3669841064711273, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.36949077563252086, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Movies),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.378572323447051, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks in the Movies playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3792720331684683, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Movies),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.2671811645640485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.32193112070854113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3224883049279015, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.333792139866655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.35439315392098264, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.37020145237252366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.3815427168756287, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38209990109498904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.3827483580111105, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.39049270648706114, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.4210041292235891, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.43598382227276944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.43681246754640574, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.47433097293800464, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Customer.City),Customer.City))", "score": -0.4872106983156188, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.16078967720386572, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.22858579948660918, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Artist.Name),Album.Title))", "score": -0.3733235535037238, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.PostalCode),Album.Title))", "score": -0.4007759031665046, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4239361451717644, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Artist.Name),Album.Title))", "score": -0.44111967578646727, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Employee.PostalCode),Album.Title))", "score": -0.46857202544924803, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.47415381982866417, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.536643498839112, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5453722134989221, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.AlbumId),Album.Title))", "score": -0.5635749039065558, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5749632714141626, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Composer),Album.Title))", "score": -0.5796849963080604, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.LastName),Album.Title))", "score": -0.5849830147635657, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Track.Bytes),Album.Title))", "score": -0.6044396211218555, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.4434117285153837, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.4989869983274525, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.PostalCode))", "score": -0.5105167828582698, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5348803682767188, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Email))", "score": -0.5540416688745609, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Email))", "score": -0.5904556380887876, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.6019854226196049, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Address))", "score": -0.6034521908586612, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.City))", "score": -0.6145685763185611, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.PostalCode))", "score": -0.6191163511102786, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.6328422279184451, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.634931631131136, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.6610073746269336, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.LastName))", "score": -0.6780152172868839, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.6805192314089982, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.18216204744818643, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18381508601682656, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.20283793228247526, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2073368775489027, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2080664584952845, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21139773488509725, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21454076810219755, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2174937310453177, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.22860373937159142, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22929180413856373, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2453116964203167, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2622169213158339, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.276358129505936, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.277685988333878, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2993673192887557, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.2367907815205399, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Fax))", "score": -0.2452284150349442, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Company))", "score": -0.25935376217239536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Fax))", "score": -0.26779139568679966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Company))", "score": -0.38716604342334904, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Fax))", "score": -0.39560367693775333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Country))", "score": -0.4611498915182892, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Country))", "score": -0.4837128721701447, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.PostalCode))", "score": -0.548624863527948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.PostalCode))", "score": -0.5711878441798035, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.City),Customer.Company))", "score": -0.6092165612208191, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Country))", "score": -0.6115251534210984, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.City),Customer.Fax))", "score": -0.6176541947352234, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.FirstName))", "score": -0.6398146056162659, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.City))", "score": -0.6408690117823426, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.State))", "score": -0.2002980453107739, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Invoice.BillingState))", "score": -0.2737065297696972, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Employee.State))", "score": -0.3834652644727612, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.State))", "score": -0.3902831939194584, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Customer.State))", "score": -0.3982200403843308, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.Country))", "score": -0.4614749890897656, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Invoice.BillingState))", "score": -0.46369167837838177, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Invoice.BillingState))", "score": -0.4716285248432541, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Customer.State))", "score": -0.47804806429485325, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Invoice.BillingState),Customer.State))", "score": -0.5381897506449604, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Invoice.BillingState))", "score": -0.5514565487537766, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))", "score": -0.5616039967830948, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Employee.State))", "score": -0.5734504130814457, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.State),Customer.State))", "score": -0.5759635944996262, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "From which states do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.State),Employee.State))", "score": -0.5813872595463181, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.32989829839494594, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.35688275239725753, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.3608465798681521, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4063353823203388, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.40999680377535697, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4205284676700103, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4213945406052225, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.43283405621095483, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4380335875026296, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.43808544752994694, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4384377383598047, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4389722060561382, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.44389750659822386, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.4444831120085656, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.44561039889446946, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2713627345508513, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Artist.ArtistId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.27255799319762763, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2736163912012422, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.2861283161674458, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Artist.ArtistId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28709285809963425, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2881512561032488, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.29381421681009573, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2948726222207669, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.29765797018446744, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Album),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30834894899989884, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3146634914047439, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.32273277420137886, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32346529079063263, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.32727662632975024, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34013741246628104, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24121147132660076, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25222894440129784, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25910844696483337, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2699353895262956, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2786049861455034, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-08-02 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2916295895365199, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.2985303722378487, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2993073000677327, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3123604179390571, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-08-02 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3168720730247786, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.318401019051529, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3369724694395442, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.33984692279396544, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.35798781406037894, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3586475148429734, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.19389725406195302, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.1996496023638374, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.2022141487021523, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.21166988819488805, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,>,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.28961007355911, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2902816318886838, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.29188627771847864, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29784601028706065, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,11043559),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.30733886126189586, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3084032059504458, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.3216861884055526, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3224017979835111, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3299661853113924, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId),Track.Bytes,>,11043559), Artist.Name),Artist.Name))", "score": -0.33392341114728274, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have produced a track with more than 11043559 bytes?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,11043559),Artist.Name,!=,11043559), Artist.Name),Artist.Name))", "score": -0.4012470165260635, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2355595786908205, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.27785762377655115, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Jamiroquai),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2781424169068833, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.281656935560046, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.2995255931647422, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3095283407603103, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31709403943826425, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3371593115386902, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.33880692997903433, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3477245782589198, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3609395049687293, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36507035674888993, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36782008362849117, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3682644257363124, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3693925565766153, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.19761276349949877, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.21583355751551603, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.23062813629994575, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2324973083411391, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.23375689370395333, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2397077963266144, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2497677042850814, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.2538050286839809, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.27078691832116053, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.27331018099678245, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27749771688035557, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,IT Staff),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2875745687907734, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Customer.SupportRepId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.303521164192077, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3261026993146813, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.Milliseconds)", "score": -0.3352536598686227, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32932273222530745, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3435586747900636, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3840180231811306, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3889346617488082, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.39825396574588673, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3997846222188409, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40317060431356433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4120016463832163, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.41402056478359706, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4262375889479724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.4363991805579487, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,<,V6C 1G8), Genre.Name),Genre.Name))", "score": -0.4376933962936396, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,V6C 1G8),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.4436299527046314, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4438856866907313, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}, {"orig_question": "Are there any purchases made of tracks costing less than 0.99 made by customers with the postal code V6C 1G8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,<,V6C 1G8),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4439535594531731, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,V6C 1G8),filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,0.99),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.Quantity),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20037119388975483, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21356175051842077, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2214026632722231, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27485798774004994, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27501996188016714, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2838285651829634, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.2842495826631266, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29317191100796425, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30012649327152924, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3022851569701993, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden), Track.TrackId),Invoice.Total)", "score": -0.3051415769472374, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Track.TrackId),Invoice.Total)", "score": -0.30604093752564615, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3100234324489705, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3111341724257836, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3180816628621924, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.2091409324761957, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4082869187714039, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41261902026087166, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4271770895984347, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43551459346992455, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4500726628074876, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4507371110162239, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4622353993678488, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.48353844032761123, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4856324143717225, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.49471062910167063, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5001904837092855, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5073841060631712, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5085280220328301, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingState,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5371608213464906, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.26233357805366236, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.29874632857742267, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.299810345881778, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.32259289380848155, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),getData(Artist),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3274523079957807, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.32991352408318164, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3478322542376826, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.3528770689500104, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3671158335327813, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.37034304529325773, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Bytes)", "score": -0.3826627990303064, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3837832170529223, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3861916385036362, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.38919659588992717, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.UnitPrice)", "score": -0.39024623982561346, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.03840019550261786, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.44830893400787075, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.44988379623060964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.48591760076669743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.50029235968066, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.5020349351325422, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 2T3),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.5174942018356724, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Country),Employee.Phone))", "score": -0.5584247605511337, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.5590866467230331, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.FirstName),Employee.Phone))", "score": -0.5683756367870956, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.5719071654239087, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Country))", "score": -0.5771617898353725, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.FirstName))", "score": -0.5947662600883632, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6143408660645946, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6246804622569471, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.09970958806177117, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.38641862328222487, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.39085406029329584, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.39687157146575375, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4213949133925637, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.43820404901399357, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.GenreId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.453916031336729, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.45780554989971783, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4595759392538011, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4599186478589467, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4722076200845022, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.AlbumId,Album.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4817834757150266, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.48409928228814647, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.4860813465255267, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums that don't have an album title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4967309132624479, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.2600497747612155, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27720684255481587, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.28272985141706575, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,<=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2954872779584135, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2970044913838902, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,>=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3056496819624076, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.31144062532752614, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))", "score": -0.3185382690557162, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3239461824756974, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),Track.UnitPrice),Playlist.Name))", "score": -0.3239836710764244, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3252047816739989, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3389241037845478, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,15563967), Playlist.Name),Playlist.Name))", "score": -0.34779930153137734, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,15563967),Track.UnitPrice),Playlist.Name))", "score": -0.3506893709848984, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,>=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.3728448293514525, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.19695136912469025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.22884582199458237, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.26305529691580887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.294949749785701, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.41164612986449356, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.43721020966829055, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4372649263487778, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.43893543102149124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.44200206360851096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4420567802889982, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4777500576556122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5050393588126099, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5191093958588804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5191641125393677, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5230225223269929, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.25533654913061105, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.26325381854245056, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.2684322303642168, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2857285830749003, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.30713324030137495, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3273151617672353, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.33699427667521864, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)", "score": -0.33724761107433965, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33854596932957426, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.UnitPrice))", "score": -0.34853158174077153, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3502547667245959, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.35665810752727833, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3586717536628957, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3672885937776856, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the price of all tracks on the playlist On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3731065155161487, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.2591913565180199, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.4249789169552969, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.4938449314358877, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Address))", "score": -0.5058139236715905, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.5664712100082734, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.5734439939842559, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.5743572563515045, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Country))", "score": -0.6011379411938833, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.6081347122087628, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.6115821393355092, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Phone))", "score": -0.6252527734759497, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Address))", "score": -0.6335605830536224, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Address))", "score": -0.6344738454208709, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.6347431529436086, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From how many different countries are the customers?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Address))", "score": -0.6484998366358923, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.2393279339515447, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.29257090376667455, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.2957606431276986, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3049998678532661, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.30972969980928916, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Grunge),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.315559816920038, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.3168438983844137, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.3259425589072975, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),Genre.Name,=,Grunge),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.35021555352503664, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Grunge),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Name),Track.Name))", "score": -0.3547617423617305, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3564210567266687, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.36064747340700587, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Grunge),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3611509041881878, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Playlist.Name,=,Grunge),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.368225773725856, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks belong to the genre grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Playlist.Name,=,Grunge),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.36945433876533107, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1508797610806399, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.19999905206883511, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.20604057443586768, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.21282107461217822, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.24350424781962332, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.UnitPrice),Album.Title))", "score": -0.2556029969112938, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2722692196470314, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.314445861565254, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.31758217605878697, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.3203424733257731, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Milliseconds),Album.Title))", "score": -0.33665524854188944, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.34064327177290965, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),InvoiceLine.Quantity),Album.Title))", "score": -0.34431562797307846, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3465286926541851, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Whats the album title of the most expensive track in the R&B/Soul genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,R&B/Soul),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),Track.Bytes),Album.Title))", "score": -0.37112380755548013, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.1832380868800101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.2279552422769484, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3113395177133498, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3619770502151059, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3654856693022833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4415111985987867, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4490910049657327, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4525996240529101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.46883090661562654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.46998279662670644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4870388001509127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Bytes,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4894534143396905, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Track.Bytes,!=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4929620334268679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.511436452747148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the first names of employees who were born on December 8th 1958?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5139318339747472, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1958-12-08 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17042221272932456, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.19971073328312192, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.23165240238879656, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25852010840183465, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.272832293254208, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3057679183296748, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3333912130923221, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.34916140945589763, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.35889044805242204, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3644256399033893, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),filter(getData(Track),Track.Composer,!=,K2P 1L7),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36808558860202706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3689026124607039, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3821629907441424, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.39525700625216853, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3973445982761879, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2294141785678221, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2309917763088219, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2396678685773719, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2504066730770761, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2507196359455228, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27850118633705157, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30544959670626104, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.3088669542443557, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3178170009386301, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3471152039371152, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.3984479467084374, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.4178628274520384, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4397402301456889, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.44342264025181066, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.44866861453920137, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.19618532147433143, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.22632725622679573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.3152151116373716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.38551363434817176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.41565556910063606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.4620063574257074, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.4921482921781717, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5045434245112119, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5500455954315839, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.5611333529668627, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2004-01-02 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.5638403444754658, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5638749459030805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,<,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5782868423702894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,>=,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5801875711622415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of employees that were hired after 2004-01-02?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))", "score": -0.5810361634212313, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2004-01-02 00:00:00), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.16517602776002605, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.24167929713439662, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Milliseconds))", "score": -0.3756403749139281, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.UnitPrice))", "score": -0.39384279896330554, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.4450722349138232, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Milliseconds))", "score": -0.4521436442882987, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.UnitPrice))", "score": -0.4703460683376761, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Composer))", "score": -0.5065874879510375, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.5416061387114446, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.5541316733463336, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Composer))", "score": -0.583090757325408, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),InvoiceLine.InvoiceLineId))", "score": -0.5925763969571562, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.6017248144084465, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Composer),Track.Name))", "score": -0.6100945242942544, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.6333854989009267, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.21003624587881797, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.24297710568366793, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.24362356173997143, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Milliseconds))", "score": -0.24596951086005084, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))", "score": -0.2912756479025119, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.2924568973756773, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.29401558336744443, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Milliseconds))", "score": -0.29436559295972414, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.29694194628064036, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Milliseconds))", "score": -0.30817455199953336, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3086574636729383, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Milliseconds))", "score": -0.3540896382454086, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.Milliseconds),Track.Milliseconds))", "score": -0.3612032262310579, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Name))", "score": -0.36495075758895623, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the different lengths of the tracks in miliseconds of the playlist called Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.36654896987634467, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Fax))", "score": -0.4016099097279948, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.City))", "score": -0.41240846832079114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Title))", "score": -0.42360163946432294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Fax))", "score": -0.439402830794279, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.City))", "score": -0.4502013893870753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Country))", "score": -0.46081222315115156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Title))", "score": -0.4613945605306071, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Fax))", "score": -0.49463346321863355, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Fax),Employee.Country))", "score": -0.49860514421743574, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.City),Employee.Email))", "score": -0.5004935385732097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.City))", "score": -0.5054320218114299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Country),Employee.Fax))", "score": -0.509161558940832, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Title),Employee.Title))", "score": -0.5166251929549617, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Country),Employee.City))", "score": -0.5199601175336284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the employee birth date except from the employe with the postal code T2P 5G3", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.Country),Employee.Title))", "score": -0.5311532886771602, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T2P 5G3), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.2241541816677294, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.274511913635372, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.27759950735100525, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.33089308179925586, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.34577371197316764, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.34775599365744686, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.35922686398933745, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.38125081376689846, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.38248442644093106, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.38433840748253173, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.384409394594495, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.386454635111648, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.4147017689528828, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.UnitPrice,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.424386554311111, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,8557447),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4340463930355031, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.04692892061855194, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.34247912990314155, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3642658505155418, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4178751947637461, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Genre.Name))", "score": -0.42565124643711416, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.43163427859505843, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Genre.GenreId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4413455674774474, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.44448246538744157, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4498865949856255, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.45417100920060727, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.45457964134393214, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Genre.Name))", "score": -0.45973214196278056, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4697715596947177, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4738317655973588, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many names are there for artists?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Genre),Album.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.5036639012154017, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.29278505669668786, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3016820895051019, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3026887271333193, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32887155514389355, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.33539236632723407, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33810887286109154, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.34842313710717776, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.34929788699124437, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.36270373622679974, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.3766459169841905, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.37778528543329587, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3803407761103593, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.3941303092436761, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.42051049191423645, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.4326428951405077, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.04148451378569007, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.PostalCode),Customer.Fax))", "score": -0.4437787909992039, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.4772317199380095, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,!=,Vancouver),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.4810321015304292, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.PostalCode))", "score": -0.48867170000448823, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Company),Customer.Fax))", "score": -0.5254099746234715, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5283133089542389, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.City,!=,Vancouver),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.5427352663028113, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5428626597243679, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.5544281899929047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,!=,Vancouver),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.563275514163456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Company))", "score": -0.6034128763712943, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Employee.Fax))", "score": -0.6257800557650626, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6535111367702484, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}, {"orig_question": "Find the Fax of the customers who do not belong to the city of Vancouver.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Vancouver), Customer.Fax),Customer.Fax))", "score": -0.6589228212833405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Vancouver), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.10717179025232326, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.LastName))", "score": -0.20058800051629078, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.2852775003266288, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.LastName))", "score": -0.3786937105905963, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.43973458048598335, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.46585575757025893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.4674025140004532, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.LastName))", "score": -0.47471497957328385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.47587540703534614, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.4959812840853684, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.5051623114494274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.5069772652031358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.5116190331081316, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.LastName))", "score": -0.5208904491362584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the names of the employees that have the last name Mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.521536480764218, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3669325177608414, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.3719328098807091, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.37402499134202877, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.378097757966111, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39017336757454923, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39075309946993186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3919741995716241, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.39482586609401404, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4009197909308839, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40623745917311, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4073801510309853, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.407939943045121, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.4088953949975257, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.41296816162160793, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes were invoices issued to customers that were sevices by employees that were born before March 3rd 1965?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1965-03-03 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.41371653441193446, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1965-03-03 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.15912536571259775, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.17499155776915545, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2055238310227726, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2273516484267509, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.23312592177101482, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.24033429707464277, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.24980123536156948, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.25915429824086494, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2739518726092279, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.27596540842254214, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2774119083794138, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2844435789663013, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.28932698329844686, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.29139528001856313, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.2982723781142058, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,1600 Amphitheatre Parkway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4504403851287774, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.45635673529163323, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Composer,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.46061711934878813, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4608498627287204, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.46149149931584665, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.467165790296512, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.47018137261013604, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.47184993908884143, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.473821331034027, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4753161366343495, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,1600 Amphitheatre Parkway),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4754341898493015, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4789560869422677, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.48099042737630976, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Genre.Name,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.48712649363090477, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the distinct tracks sold to the address \"1600 Amphitheatre Parkway\" ? ", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)", "score": -0.4895849468903579, "correct_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,1600 Amphitheatre Parkway), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.26402500432048653, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Playlist.Name))", "score": -0.3194235262171164, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,!=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.340396670801943, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.34793503540809084, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3568568699842559, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,>=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.38196546148400756, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),MediaType.Name))", "score": -0.38374292602697935, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3852144667803034, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.38720796580997463, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,<=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))", "score": -0.3985095245190108, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),Invoice.CustomerId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.40774014542966214, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),InvoiceLine.Quantity),Playlist.Name))", "score": -0.4087036403411364, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,!=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),Playlist.Name))", "score": -0.4132650341126662, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds),MediaType.Name))", "score": -0.4195082913628228, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.Milliseconds),Playlist.Name))", "score": -0.419677441415715, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.22908503438926164, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.2494215993324027, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.2553054817387874, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ton Koopman),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.25711309184210357, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.26857823207421805, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.271703848873646, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.2797684000564645, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.29566639116025323, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.31244179801612953, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3137888062101544, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.31660216305968564, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.3185356365549303, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.Name,!=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.31895239034379125, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.3236146048265171, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.324986140811914, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.36263212398189343, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.38249092538147317, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.400100917011997, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Genre.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),Track.Milliseconds),Track.Milliseconds))", "score": -0.41830421750961, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.4193785546990808, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.42356666659700243, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.4281726108963845, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits),Track.Milliseconds),Track.Milliseconds))", "score": -0.42904692134846306, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.4315493191542194, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Album.Title,!=,The Police Greatest Hits),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.4376313965490566, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.45082695684130314, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Track.Milliseconds))", "score": -0.4515079941556337, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.453878834849013, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Album.Title,!=,The Police Greatest Hits),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.4574901979486364, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits),Artist.ArtistId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.502443822136658, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.30387594998070594, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.30584199382497407, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3419734646587624, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3481250687312899, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3523958953458074, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.35609811306119993, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3651788464420868, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>,NSW), MediaType.Name),MediaType.Name))", "score": -0.3707762882710143, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,NSW),Invoice.Total),MediaType.Name))", "score": -0.37736628750275486, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.38320861244141824, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3837677117281448, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,NSW), MediaType.Name),MediaType.Name))", "score": -0.3851746094426408, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38664879499259647, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.4008260684136449, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,>,NSW), MediaType.Name),MediaType.Name))", "score": -0.4019306274280816, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12859529291199578, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.20262159068988694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3066000327180518, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38062633049594297, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.508932446506612, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5108504820327653, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5304805587899754, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Company))", "score": -0.5338057804565324, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.540041749795851, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.542483852133196, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5448858070831193, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.573842941195835, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Company),Customer.Country))", "score": -0.5831368176359162, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5848767798106564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5859037156860722, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))", "score": -0.24482085020281374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.PostalCode))", "score": -0.32982053817249835, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Title))", "score": -0.35360946715809405, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Title))", "score": -0.36228367150761187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.LastName))", "score": -0.42816583276726305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.PostalCode))", "score": -0.43860915512777865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.PostalCode))", "score": -0.44728335947729647, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Title))", "score": -0.5000512844417244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Track.Bytes))", "score": -0.5308953619096428, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.5369544497225434, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.LastName))", "score": -0.5456286540720612, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.Title))", "score": -0.5463596826884896, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.Title),Album.Title))", "score": -0.5569146654333532, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.Title),Track.Bytes))", "score": -0.5582486697106035, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the different titles of the employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.LastName),Album.Title))", "score": -0.5627446610656356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22885581479775433, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.25186400714223517, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25247003390282036, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2640953910595853, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Invoice.Total))", "score": -0.2765491637352368, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2841025900335048, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.Total),Invoice.Total))", "score": -0.28578463563267986, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Invoice.Total),Invoice.Total))", "score": -0.2871627615785405, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2895290115466397, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2907561257569637, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.Total),Invoice.Total))", "score": -0.3032857724410463, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.Total),Invoice.Total))", "score": -0.30367650192044304, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Invoice.Total))", "score": -0.3043688422533, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Invoice.Total))", "score": -0.31114865819329, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Invoice.Total),Invoice.Total))", "score": -0.31639177704651783, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.2679175379453227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.Address))", "score": -0.39532727922778577, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.Address))", "score": -0.39804265822749585, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.HireDate))", "score": -0.40726962860208005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Country))", "score": -0.4182609039125964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.State),Employee.Address))", "score": -0.4300106557784602, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.State))", "score": -0.4431692677317187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Country),Employee.Address))", "score": -0.46172125067096204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.HireDate))", "score": -0.5346793698845431, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.HireDate))", "score": -0.5373947488842532, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.Email),Employee.Address))", "score": -0.5413662287173793, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.HireDate),Employee.Country))", "score": -0.5456706451950595, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.Country))", "score": -0.5483860241947696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.5548887586919591, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.State),Employee.HireDate))", "score": -0.5693627464352176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.2632563745640494, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.2949135082668771, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Stevie Ray Vaughan),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3576972646805634, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.36016969687971323, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Stevie Ray Vaughan),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.36549546430313384, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.36847572395967976, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Composer,=,Stevie Ray Vaughan),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37160476665407177, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.38078241790116757, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.385962840124687, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.3859915817818715, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.38761783032086716, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.3969480833743586, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.4051049741742602, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Stevie Ray Vaughan), Artist.Name),Artist.Name))", "score": -0.4094543353047537, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}, {"orig_question": "Which artist has Stevie Ray Vaughan composed for?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,Stevie Ray Vaughan),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.4116968312765939, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Stevie Ray Vaughan), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.254262255557602, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2808618114189011, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31571962893699745, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,James Levine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3217813176638396, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,James Levine),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34484196624472435, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3507344757739283, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35386657181647085, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35499822452661517, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3654444715664063, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.39700406510730846, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,James Levine),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41196534860255746, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4282803603704514, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,James Levine),getData(Track),Genre.GenreId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4306542584378177, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4353396618249057, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4388830776591052, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.16880314573063515, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.2893399424792733, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.3502875227422919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.358209601341262, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.37362883367086225, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.39848083033575676, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.4051950346833668, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.BillingAddress))", "score": -0.4257245544285979, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.47082431949093007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.485178825998446, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))", "score": -0.5035641330100566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.5056004650166371, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.InvoiceId),Invoice.Total)", "score": -0.5089591572725843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Delhi),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.Total),Invoice.Total))", "score": -0.5094126984293504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total invoices of invoices out of Delhi?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Delhi), Invoice.Total),Invoice.BillingAddress))", "score": -0.5258470193605722, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Delhi), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.018529032730894256, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5848474652122607, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7790387104452867, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9327308329590979, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.9481623925530585, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.9941451110207709, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.9952902099248135, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -1.0096847571694525, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.0335724192104059, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -1.0371805548929842, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.0580116108321818, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.0919788616395496, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.249704643746377, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2667638830258405, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.3194759916655032, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2680487787894, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.27040516823918065, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29806532854390483, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.29970037816614686, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.30254111105429793, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30264887100765386, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.3256933751788892, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Track.Name))", "score": -0.3263023200940981, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.BillingState),Track.Name))", "score": -0.32776215361040534, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.BillingState),Invoice.BillingState))", "score": -0.32961034946887413, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.BillingState))", "score": -0.3302769176426382, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Track.Name))", "score": -0.3314978475307796, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3429457183735533, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.34801467621609605, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3500691522754565, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.026294213122118177, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5894060515293571, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5929145111314323, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.6107459570814502, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6203488468006706, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7515485134208575, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7629576759453195, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.7944758970476339, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7950790297880457, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8045543786617964, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8069611544096285, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8118659296552955, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Employee.PostalCode),Artist.Name))", "score": -0.890056026182482, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9141724307738134, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.9319293808177641, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.16425332618548952, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.17516295125701664, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.20119236347143446, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.21468740585763466, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.21680226102368144, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.23284930210033988, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.24216565467038106, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2469797439907268, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.25178940695816343, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.25318196173804414, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Sabotage E Instituto), MediaType.Name),MediaType.Name))", "score": -0.25895867815391244, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26147652365132873, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.26467101777507074, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26513266057278484, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What kind of media type do tracks in album created by artists except Sabotage E Instituto have ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sabotage E Instituto),Track.Bytes),MediaType.Name))", "score": -0.3253401830063733, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Sabotage E Instituto),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.290582536627858, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30117622629048857, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3164522493543213, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.32704593901695195, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3288881041573469, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics), Track.Name),Genre.Name))", "score": -0.32997185983136945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3414255724491949, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.3528022728359283, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3538868510215564, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.36339596249855893, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.3695070624477056, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3701803382213589, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3732530504224056, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Genre.Name))", "score": -0.3757139053203008, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.38013706242915446, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11282947734523054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.15190849663947775, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17362164127524146, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1738879315200657, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.21435953188124482, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2248059955058078, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2522709576887035, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2747686790879386, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2800111450819891, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28437593107929765, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2859762410515825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3114473426694453, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32875890725912665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),MediaType.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32916557972230287, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3464619766772328, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1567529832476009, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1670144046441775, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.20060704654047404, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.21412358004311405, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.21858587334771057, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.26790108519122907, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.2964771361803981, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.31443611462235105, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.33375901126468954, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.34564789812294033, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(filter(getData(Track),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3469397902886669, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3537103238338984, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.397080723105371, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3977674664952083, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.42674284800679846, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2333790968204252, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23591996893182354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2491431699827399, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26286513973431364, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2680076582820656, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2717228448381547, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27792970977816084, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28167172826481357, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28479699714916346, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.287063144961378, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2959340430646656, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30110055443085654, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3020689948896589, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.31558162509131765, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3462294493888491, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.20673770858047646, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.3349790538668458, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.34621423138378304, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.37810775293110055, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.4260717595934693, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.45286923302410287, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.4768743564382021, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.49307953966854257, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5104954804301087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.520454224479181, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5343263710856263, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5432665145963256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1 Infinite Loop), Customer.Country),Customer.Country))", "score": -0.5739144424915139, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Company),Customer.Country))", "score": -0.5764869454324071, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}, {"orig_question": "In which country is the customer address 1 Infinite Loop located?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Company))", "score": -0.5862545373856847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,1 Infinite Loop), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.23710600185559955, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.26363850979577313, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28147329385217557, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28414206363611216, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2982563556678817, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.31076905022171347, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.31152989758289945, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3190032269848992, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.32094307530305, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3249572613842698, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingCity,!=,Warsaw),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3309088626072512, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3318187813423178, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3485902421089122, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3490907096936082, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.35086772592862575, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4015787140526016, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.40405156742028076, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4128409764006975, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.41486048632666717, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4354154344530955, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.43687852695168605, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.43743494437906516, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4471444674723874, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4579260925485459, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Album.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.4596434105514403, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.46039894591622504, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.4658968507813536, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.4688470419297526, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.47086655185572224, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,120 S Orange Ave),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.47202841160693465, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Country))", "score": -0.5727665871745558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.State))", "score": -0.5811155943796948, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.5828773940546518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Country))", "score": -0.5859411180393561, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.Country))", "score": -0.5903676003581495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.State))", "score": -0.5928572677530893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.5946190674280463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.Country))", "score": -0.5976827914127505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,Nancy), Employee.Country),Employee.Country))", "score": -0.6273472756511183, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.FirstName))", "score": -0.6428360194331617, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,Nancy), Employee.State),Employee.Country))", "score": -0.644948288834712, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.6471279883284303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.State))", "score": -0.6487356871730299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.Phone))", "score": -0.6588696617018248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.FirstName))", "score": -0.6604370326167555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Company))", "score": -0.3650267889461247, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Company))", "score": -0.3939338540076278, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Company))", "score": -0.39718575977894943, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Country))", "score": -0.42635495417925995, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,None), Customer.Company),Customer.Company))", "score": -0.4408930905673037, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Country),Customer.Company))", "score": -0.452893452878925, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Country))", "score": -0.45851392501208466, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,None), Customer.Company),Customer.Company))", "score": -0.4728258356745483, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Company))", "score": -0.47972472658148035, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Country),Customer.Company))", "score": -0.4850524237117497, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Company),Customer.Country))", "score": -0.4877795790671371, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,!=,None), Customer.Company),Customer.Company))", "score": -0.5015275233643237, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Address,!=,None), Customer.Company),Customer.Country))", "score": -0.5026348062783406, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Country),Customer.Company))", "score": -0.5141282965778373, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "Are their any customers on which we do not have an information what country they are from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.Country),Customer.Country))", "score": -0.5142216181120602, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.24819911614425616, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28746368860084504, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30358994236825054, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.30435055562207514, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3060789769775788, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30986428964408286, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3188514165948804, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33797762836356915, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.35735283438995125, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3699185182863814, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(PlaylistTrack),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3707390255113401, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3734233812888183, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3798163571168726, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3817047309686109, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.39917495829661154, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1512581279512233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33284072410424415, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3684207333262748, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.39165625290621703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.4096105851083246, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.42791756988243657, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.4297667762275523, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44587190208454414, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.48428034262619535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.48651030864675704, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.4874014682917456, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.4905691949661559, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.49791670096587776, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Invoice.BillingCountry))", "score": -0.5022346274811632, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Customer.Country),Customer.Country))", "score": -0.5037363223137677, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.020994064282687127, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.4567978936309289, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5154580780681131, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5519539454641329, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5638433117468264, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5879309652538954, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6088400681100803, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Invoice.BillingCountry,=,None), Album.Title),Album.Title))", "score": -0.6284257020051655, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6337495555878966, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Playlist.Name,=,None), Album.Title),Album.Title))", "score": -0.6375900260714421, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6423736793737133, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.6807964281906607, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6930802302231314, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -0.7187174992432119, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.7310013012756826, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23960824495844885, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.24754946893280874, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.282465277220502, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.30318884744566843, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.30558114169956135, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99), Album.Title),Album.Title))", "score": -0.30631730721085, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3087096014647429, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3172595520965754, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.31761551465124344, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.32212881013986666, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32420893379007665, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,>=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32520077607093534, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33215017610799213, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.354930368722875, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "How many different albums exist with tracks that were sold at 1.99 for unit price ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.35805882848805654, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.25247495662682634, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.3105779521759549, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.46780259396109614, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.48175898307278625, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.ArtistId))", "score": -0.5398619786219149, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Employee.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.5696373083737853, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,None), Artist.Name),Artist.Name))", "score": -0.5797387980965141, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.6043785786539139, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.649106377191607, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.ArtistId))", "score": -0.6624815742030424, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.7044870471538425, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.722978723958176, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.7505001224380644, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,None), Artist.Name),Employee.LastName))", "score": -0.7511268281486991, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Artist.ArtistId))", "score": -0.7810817195073045, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4121895101736316, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4164242742970768, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43118808925496827, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),Track.UnitPrice))", "score": -0.44579621291632066, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,213831),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.46673370276532, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.49024698907490455, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.49742980786807584, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.49805830736805573, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5066734543072066, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5075417889996473, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5092456271358906, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,213831),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5100073143582549, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,213831), Track.UnitPrice),Track.UnitPrice))", "score": -0.5102741334485472, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,213831),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5139219287588764, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,213831),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5194844520071525, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.14433425085735507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.24217420237255283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.342144124006154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.3857897015113849, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.4288699755845811, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.43998407552135177, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4576092453498859, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4691565723915119, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.507796720187775, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5176604130254495, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5226528981167294, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5253208125307182, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Country),Customer.Address))", "score": -0.5540509790007491, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.5646487444464583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5835995746601839, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2362323732821961, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2546390276989873, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2818003095297236, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2832967496144826, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28433910299638665, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30093605116630534, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3037935746924773, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3039536005374459, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3183193592653952, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3250158053715105, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3343078457581496, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.33700629055983455, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3386674603909307, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3388161843433899, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3496841193050372, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.24163400764497395, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.26114088435045957, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.26783923006200355, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.29976927573225587, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3068887343489864, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.30870918247132634, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.3151934589420847, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.3174385283141421, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3403208764534925, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.3424298061760832, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Bytes),Album.Title))", "score": -0.36009905875796944, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy), Album.Title),Album.Title))", "score": -0.36292746924528496, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3678012512544549, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.37281785967881276, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3741992084372674, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.26513619144821793, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.3383120505993542, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.4380450755958974, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.4387112149601546, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.5112209347470337, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.5118870741112909, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.5338282762570296, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.5975913446189841, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.6192648042127107, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6592717603892736, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.FirstName))", "score": -0.6924406633638469, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.7067371604047089, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.7074032997689662, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.Fax))", "score": -0.744360682882968, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Fax),Customer.LastName))", "score": -0.7544597539235016, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Track.Composer))", "score": -0.16736878344090655, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),Track.Composer))", "score": -0.2181114170816727, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,496692), Track.Composer),Track.Composer))", "score": -0.3238387767341919, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),InvoiceLine.Quantity))", "score": -0.42016256862552837, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),InvoiceLine.Quantity))", "score": -0.4709052022662945, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Album.Title))", "score": -0.5683859687414952, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,496692), Track.Composer),InvoiceLine.Quantity))", "score": -0.5766325619188137, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.TrackId),InvoiceLine.Quantity)", "score": -0.6093575049482913, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,496692), Track.Composer),Album.Title))", "score": -0.6191286023822613, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,496692),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6254283271691226, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))", "score": -0.626610672858078, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,496692), Track.Composer),Track.Composer))", "score": -0.6372841086995322, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,496692),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6466478554608582, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,496692),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),InvoiceLine.Quantity))", "score": -0.6527369213512747, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers composed tracks that are shorter than 496692 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,496692),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6541539021830975, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,496692), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.City),Customer.City))", "score": -0.29149996911154175, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.334773035576634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.3508912495074725, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.35297740887157075, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,0.99), Customer.City),Customer.City))", "score": -0.3557000590704921, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.3558219263688935, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,0.99), Customer.City),Customer.City))", "score": -0.35902865491839503, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<,0.99), Customer.City),Customer.City))", "score": -0.370728083304626, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.City),Customer.City))", "score": -0.375627492225728, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.38077333274761627, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99), Customer.City),Customer.City))", "score": -0.4097212406168024, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.City),Customer.City))", "score": -0.41026087831144437, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.City),Customer.City))", "score": -0.413163462401058, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99), Customer.City),Customer.City))", "score": -0.42288328029465844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99),Invoice.Total,!=,0.99), Invoice.BillingCity),Customer.City))", "score": -0.5626187514699436, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19368663633203304, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20547587701693473, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2060309339217089, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.21758860460424806, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.222460783709902, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22427036539413372, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2275111381538345, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2370198036476714, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2532289431271002, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25406445840306574, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2548155475741289, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2595367683178215, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2595663753042937, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.26095567219953536, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2611090095877115, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.08499887071277677, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.41831358878819486, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.42182793428368787, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.6354074301577751, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.6451201466279161, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6797862362674122, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.7551426523591059, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7624665637561537, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -0.7802664674520656, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.7995995085982703, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.8051547446892572, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(MediaType), Customer.FirstName),Customer.FirstName))", "score": -0.850230578570071, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), MediaType.Name),Customer.FirstName))", "score": -0.9055040058329883, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.9191567049933671, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.9652198344753731, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.05290428875014186, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.32272688252851367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.3977018860168755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.FirstName))", "score": -0.42748729372397065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.43408797431496887, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.4472367014169311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5159764794338516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5164819975720855, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.5381345035636037, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5399675879815575, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5402987474117448, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5558506600547236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5603382657282054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.584903604821859, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.6157991359941661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18454543641089471, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18761318437303198, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1922093630302534, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.19299479375364373, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.20877147651831585, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2236095810866247, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.22972547054375927, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.23226105781930076, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23645220463645195, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.24233659566125812, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.24303318383068187, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24690617227884795, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2528515873307831, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25647697752333043, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks from the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28858555156166693, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42023339830240636, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44104130969658534, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4664673026795006, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4762195600033539, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Walking Into Clarksdale),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4776233477461321, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4846136888750859, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.487275211273564, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4924651006244743, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.492473988403937, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5008592294962063, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(InvoiceLine),InvoiceLine.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.500868117275669, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5024690318565945, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5046665427986852, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Walking Into Clarksdale),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5077941054336498, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5087195290250575, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.017700664603104505, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6827261339640245, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7604719460658617, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.7904425334050269, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.8781291467947727, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.9541438743434782, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9714514981479688, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.0213043203660943, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.PostalCode),Artist.Name))", "score": -1.0219489221150464, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Employee.PostalCode),Artist.Name))", "score": -1.064051621942781, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0754380657478668, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Fax),Artist.Name))", "score": -1.075637639143558, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.1371149289854008, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.143354913297989, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the distinct artists names ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,None), Artist.Name),Employee.PostalCode))", "score": -1.1710375299444422, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.23157976589942308, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.311145126308541, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.32980316516657115, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.3392658258904808, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.3418192075306202, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.34528020675445825, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.35386375039200696, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.354160799773772, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.35738364773454295, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.36130049470868314, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.37154659392637485, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Lyon), Track.TrackId),Track.UnitPrice)", "score": -0.3758937728722588, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Lyon), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3781554107981177, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.Country,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.38352634977517924, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track price on invoices for customers in Lyon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.39982856742906897, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Lyon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21039933581026538, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22920607186162564, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23784154267760646, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24318551206117425, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.248887352919164, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2515854019882424, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25207183112908893, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.262528962559847, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.26691203559403465, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27305736339890313, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Fretwork), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2767177371107273, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Fretwork),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27950244299263144, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.28372374907819936, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Fretwork), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2838142153264672, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of sold tracks that are in an album of the artist Fretwork?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Fretwork), Track.TrackId),Invoice.Total)", "score": -0.2839267357253689, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Fretwork),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.3363698160183409, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.FirstName))", "score": -0.33872017168943186, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Phone))", "score": -0.4584237200988753, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.4607740757699662, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.FirstName),Customer.FirstName))", "score": -0.5330736955656903, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -0.6456016974444662, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.647952053115557, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Phone),Customer.FirstName))", "score": -0.6630423313035863, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.FirstName),Customer.FirstName))", "score": -0.6687721928610699, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.FirstName),Customer.Phone))", "score": -0.6697739681258099, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6865771628635188, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.6889275185346098, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,<=,None), Customer.FirstName),Customer.FirstName))", "score": -0.6897853931441205, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.Country),Customer.FirstName))", "score": -0.6997282749071019, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there any customers we don't have a phone number on?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.FirstName),Customer.Company))", "score": -0.700670676495065, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.05681230885966215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Company))", "score": -0.40604450380487833, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Company),Customer.Country))", "score": -0.45134891210182104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Phone))", "score": -0.45566286718531046, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.4688544470263878, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.State),Customer.Country))", "score": -0.5091692918358603, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.State))", "score": -0.5114551988808671, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5616755637539202, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.590846677441732, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5953512999453237, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Fax))", "score": -0.607830932494835, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Invoice.BillingCountry))", "score": -0.6181766298977891, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Peeters), Customer.Country),Customer.Country))", "score": -0.621469874997274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Address))", "score": -0.6281747726170579, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Phone),Customer.Country))", "score": -0.6347146147309104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.24212507299986166, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.27538106715243593, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2754714990507841, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.28774391576030095, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.29654576762240953, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.30669167589505214, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.3142592853642724, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.35196581682430444, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.36803597640035324, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.3707193189467556, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "done(extractValues(max(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes),Track.Name))", "score": -0.37137669546022917, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan), Track.TrackId),Track.Bytes)", "score": -0.37961530669342247, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.38205063784441484, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Callahan),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3979172675498896, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.City,!=,Callahan), Track.TrackId),Track.Bytes)", "score": -0.40313423499325934, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.2592114066546627, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Karol Szymanowski),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.2652095629608061, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.28094152342515455, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.30902618055643055, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.3093995407513969, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.3240116355938476, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.3256515914156483, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.33342924413531494, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.3481472256631002, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Milliseconds,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.3535913586829055, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.35794185248523464, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.36001706256477506, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.36117342524007595, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Karol Szymanowski),Track.Bytes),Artist.Name))", "score": -0.3624108145440411, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}, {"orig_question": "What is the name of the artist that made the cheapest track composed by Karol Szymanowski?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Karol Szymanowski),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3760769060200438, "correct_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Karol Szymanowski),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.Title))", "score": -0.34752087143351673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.Title))", "score": -0.3747499495475495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.FirstName),Employee.Title))", "score": -0.48734899458577274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Fax),Employee.Title))", "score": -0.5020117073981964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.PostalCode))", "score": -0.5123648926346505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.FirstName),Employee.Title))", "score": -0.5145780726998055, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.Title),Employee.LastName))", "score": -0.5205139204590523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,AB), Employee.LastName),Employee.Title))", "score": -0.5218065291373932, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.5289716779916489, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Fax),Employee.Title))", "score": -0.5292407855122292, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.PostalCode))", "score": -0.5395939707486832, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Title),Employee.LastName))", "score": -0.5477429985730851, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.Title),Employee.Title))", "score": -0.5537016591929399, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.Title),Employee.LastName))", "score": -0.579660553105698, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "What positions can our active employees hold?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB), Employee.LastName),Employee.Title))", "score": -0.5797544366692059, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.14544817611022154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.266483692372276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.3417920711581246, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Employee.LastName),Customer.LastName))", "score": -0.42660436957521597, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Employee.LastName))", "score": -0.45841894477052847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.46282758742017904, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.49238602250261465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Artist.ArtistId))", "score": -0.5190760883633629, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Employee.LastName),Customer.LastName))", "score": -0.5476398858372704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.PostalCode),Customer.LastName))", "score": -0.5729671510998742, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.FirstName))", "score": -0.5777434202973382, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Employee.LastName))", "score": -0.5794544610325829, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5922526958529488, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))", "score": -0.5938301923815743, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the unique last names of the customers whose fax is +55 (61) 3363-7855?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (61) 3363-7855), Customer.LastName),Customer.PostalCode))", "score": -0.6134215387646691, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (61) 3363-7855), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.40609119995965975, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Artist.Name))", "score": -0.41584631291546237, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4230883451934382, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.4288434592869653, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.4332393680754739, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Album.Title))", "score": -0.43887174589473193, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Artist.Name))", "score": -0.44299448103127653, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.4437438385997985, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.44862685885053455, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.45023651330925235, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Artist.Name))", "score": -0.45349895155560105, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Album.Title))", "score": -0.4550211563981338, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.45586889112851037, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.4559916274027795, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Customer.PostalCode))", "score": -0.45794029060342095, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.09219903596476797, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2955249647101001, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.37314990364465933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3937511241786346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40192614710027, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4054561274201734, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.43932707551713823, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4433932412312577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Customer.Country),Invoice.BillingCountry))", "score": -0.4712324961396803, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.4889691925697613, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.49238796909139637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Country))", "score": -0.4924886433534646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4952104120029617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5062368173628359, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5114377069183159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.2762194935858133, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.45142282440065173, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.PostalCode))", "score": -0.4646048460781458, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5447370720034297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5447539508434148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.556123832498783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Album.Title))", "score": -0.5662658445604014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5680860453800299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5681029242200151, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5684605164000465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5688468424793283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5688637213193134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Track.Composer))", "score": -0.5906008168609206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.5918097201440167, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.592570565974874, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2326649061675519, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2365969992380225, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.238413470342939, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2386651175496572, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24930378608751377, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25215029291484287, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2654048254896681, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27864884768383297, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2817146891478192, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28811561088128723, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.300370955178901, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Van Halen), Invoice.InvoiceId),Invoice.Total)", "score": -0.30905561230334305, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33102848091553916, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Van Halen), Invoice.InvoiceId),Invoice.Total)", "score": -0.33414270535543195, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks produced by Van Halen?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Van Halen),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3401267386654086, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Van Halen),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.25564260602048294, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.UnitPrice)", "score": -0.26692565221546294, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.UnitPrice)", "score": -0.28012569648638774, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.28312839017545083, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.29692240489834953, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.31101905286760095, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.UnitPrice)", "score": -0.31486185387383175, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.3182650467476861, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.33230567148557877, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Bytes)", "score": -0.3382656688458107, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Bytes)", "score": -0.33957326588347864, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.Name))", "score": -0.3470215864352002, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.UnitPrice),Track.UnitPrice))", "score": -0.35588702489400037, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice),Track.Name))", "score": -0.36111752149656906, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.UnitPrice),Track.Name))", "score": -0.36182870558682745, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17257568732976655, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20472699730850624, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.21509256373146363, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.22077249330688153, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2567973863335425, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Genre.Name))", "score": -0.2850134632276598, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Genre.Name))", "score": -0.2984830659070898, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name),Genre.Name))", "score": -0.3238319997740364, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Genre.Name))", "score": -0.32473709303995685, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name),Genre.Name))", "score": -0.33568039369627106, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name),Genre.Name))", "score": -0.3404981800778636, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),MediaType.Name),Genre.Name))", "score": -0.3491614622559114, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.35974025851525987, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Protected AAC audio file),MediaType.Name),Genre.Name))", "score": -0.36812298895686324, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),MediaType.Name),Genre.Name))", "score": -0.3870428738985877, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.34273227098832504, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3762477301240923, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.37649329478234345, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.38098682777420706, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.38256215419077866, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.39175999979187104, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.39419890877598324, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.39815579747290863, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.Total),InvoiceLine.Quantity))", "score": -0.4002888423957836, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.40377990845618766, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4043784274134569, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.4106498609054545, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4118632451289179, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.Total),InvoiceLine.Quantity))", "score": -0.4186209471022823, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.421271978675578, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.3475984011311084, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Country),Customer.Company))", "score": -0.3489137489814311, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.38958941764079613, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.4014938375450827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Company))", "score": -0.4228230650062965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Company),Customer.Country))", "score": -0.42772922408767045, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,ON), Customer.Country),Customer.Country))", "score": -0.42904457193799317, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Email,=,ON), Customer.Company),Customer.Company))", "score": -0.4361389014843951, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.4406199012398184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Country),Customer.Company))", "score": -0.44270930227360017, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Email,=,ON), Customer.Company),Customer.Company))", "score": -0.44804332138868164, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,ON), Customer.Company),Customer.Company))", "score": -0.45252435215509706, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,ON), Customer.Company),Customer.Company))", "score": -0.45455472155034815, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Country),Customer.Company))", "score": -0.45461377533958747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}, {"orig_question": "At what companies do the customers living in ON work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,ON), Customer.Company),Customer.Country))", "score": -0.45491317317787494, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,ON), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.2812112980911134, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.28129258957822695, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Genre.Name))", "score": -0.28593288334588013, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.2969879653382848, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.29797692819604926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Genre.Name))", "score": -0.2989111546544786, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),MediaType.Name))", "score": -0.30654079832261427, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),MediaType.Name))", "score": -0.30968198712338774, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.31144819035911087, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3155954932723009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32277721044480645, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3272233012511685, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.3348083001671594, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Genre.Name))", "score": -0.34039577552105804, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.3439076398689908, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.26979200878486154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Name),Track.Milliseconds))", "score": -0.36256806888923165, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.3862227644895029, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.40459077396735665, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Name),Track.Milliseconds))", "score": -0.478998824593873, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.521021529671998, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.UnitPrice),Track.Milliseconds))", "score": -0.5365629676853132, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Name))", "score": -0.5467138882850122, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.5729388265456914, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.5935633558615342, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.5970465945975288, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.6176711859353559, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Respectable),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6358072135162117, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Respectable),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6386643846923724, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6390093033806873, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4645984877133524, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4730340656678672, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4907754345443236, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4926627061952926, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.4992110124988384, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5010982841498075, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5031012058192985, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5115367837738134, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5188396530262639, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5224201305974625, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5272752309807788, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.528106604714905, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5292782456211954, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)", "score": -0.5311655172721644, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}, {"orig_question": "What are the average track bytes without the tracks composed by Herbert Vianna/Paulo S\u00e9rgio Valle?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Herbert Vianna/Paulo S\u00e9rgio Valle),getData(Track),Genre.GenreId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.5728670617926185, "correct_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Herbert Vianna/Paulo S\u00e9rgio Valle), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.2136491418794881, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -0.4839301166995254, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.Email))", "score": -0.48749381526291796, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), MediaType.Name),Customer.Email))", "score": -0.520495423549143, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.5598293602781146, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.5924601897453896, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Employee.Email))", "score": -0.6139738939147271, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.6188869119730901, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.6450090569029808, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.6520637553941816, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Email))", "score": -0.6544824331778649, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Employee.Email),Customer.Email))", "score": -0.6861114612250928, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),MediaType.Name))", "score": -0.7063787839475019, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.7096401619733946, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "Is there any customer email?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -0.7472307347103456, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Bytes),Track.Bytes))", "score": -0.06929256522562355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,184946), Track.Bytes),Track.Bytes))", "score": -0.2758389295777306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,184946), Track.Bytes),Track.Bytes))", "score": -0.38805413560476154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.48802229921855683, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,184946), Track.Bytes),Album.Title))", "score": -0.5397928095189855, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.5405943303745205, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.5586240383837615, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5679151163067091, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,184946), Track.Bytes),Track.Bytes))", "score": -0.5696245342260227, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5746632499519152, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5754309049106091, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.5994727599856344, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,184946),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.6204871912103224, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Track.Milliseconds),Track.Bytes))", "score": -0.6268122832022631, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of tracks that are shorter than 184946 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,184946),getData(Track),InvoiceLine.TrackId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.6272352811078789, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,184946), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.17508269057285436, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1947831524236369, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,11043559), Artist.Name),Artist.Name))", "score": -0.20850661917080132, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Track.Bytes,!=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.22370223299664557, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559), Artist.Name),Artist.Name))", "score": -0.22471193774739504, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Track.Bytes,<=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.22623494502276129, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24450399892339483, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.2563527187941724, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.26700651258175684, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Track.Bytes,=,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.27374498545929365, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2872261578853968, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,11043559),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2926726419498353, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,11043559), Artist.Name),Artist.Name))", "score": -0.3082866025408219, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3149580469321839, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3174907590188679, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7045314),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17051255426597314, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.17166226677262264, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.2109831502756334, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.219299942103232, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,7045314),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.26053141450047923, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7045314),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2626754130703262, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2835804169838439, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7045314), Playlist.Name),Playlist.Name))", "score": -0.2913584630640794, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3146745717030397, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7045314),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3179189587685638, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7045314), Playlist.Name),Playlist.Name))", "score": -0.32588528198614736, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,7045314),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3266756307189892, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.33430375613018043, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,7045314), Playlist.Name),Playlist.Name))", "score": -0.3429621183999197, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.35442105629961124, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.13922919808949422, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16072504565381235, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.19844177792598902, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20129734174474878, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.20612148712062117, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2210975901507165, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.22473368259217363, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.230231801362061, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2375952361237915, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2422005660818013, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2450814996713541, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2635684638915043, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.27622711099490604, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2811017744119223, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are in the 90\u00e2\u0080\u0099s Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Genre.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.30307521678390337, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31726912410404057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33291185708383764, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.36715148676103126, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,Gay Witch Hunt),Invoice.Total),Invoice.BillingCountry))", "score": -0.36873813229932195, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,Gay Witch Hunt),Invoice.Total),Invoice.BillingCountry))", "score": -0.3852426430289742, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3912479633631655, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,Gay Witch Hunt),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Invoice.BillingCountry))", "score": -0.3999911278390413, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40281711805528175, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,Gay Witch Hunt),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.40578199645957863, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Invoice.BillingCountry))", "score": -0.4134047740083099, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44756837287664664, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Gay Witch Hunt), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.45473043534821045, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Country))", "score": -0.46496928042180663, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,!=,Gay Witch Hunt),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.47340747583061665, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were orders sent to that did not include the track Gay Witch Hunt?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Country))", "score": -0.47728301417069335, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Gay Witch Hunt),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41355862954850053, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4319014405734073, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4708068657520665, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4766240944595958, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48676126116875323, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.49496690548450256, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.50510407219366, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5104428865200803, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.5211867624816815, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5217445781013035, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5287856975449869, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5336044266525453, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Headspace),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.539243163148087, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Headspace),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.5395295735065881, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes did we sell a track named Headspace?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Headspace), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.545499084460103, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Headspace),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.27098588074035174, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.27990894472328115, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2982384052596016, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.32199600052430266, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.32553622967303, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.33380906009059363, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3353298576288018, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.3400728138878119, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34827529178400096, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37516743236440053, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37610181504850815, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.38070041529008514, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3825364735041374, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,!=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38518598959808853, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4030885501751338, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.12469499338715047, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.14288467626552614, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.1932230442784565, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2020470874614496, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.20638564161167702, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21115119795819026, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.21275657657867686, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.23592917240822223, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.2546587493603652, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.25778440484722387, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2684472066538573, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.27233566574803647, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27797911365763717, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.27980001296796136, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are used by tracks from the artist with the name Santana Feat. Lauryn Hill & Cee-Lo?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))", "score": -0.2959909260142674, "correct_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Lauryn Hill & Cee-Lo), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.26943186909132605, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2820916120097363, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.2929413808798074, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.29369166968292615, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.3160268312350662, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.Bytes))", "score": -0.3178268049114959, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.32340188558985944, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.3313627200756823, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.33565613764929897, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.34248558496249987, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.3453094329430016, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Album.Title))", "score": -0.3495320267998543, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.Bytes))", "score": -0.3531598709373956, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.35879364650186857, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.Bytes),Track.Bytes))", "score": -0.3645928068540628, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4061726675556034, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4391219299351295, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4537246377934347, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.47618759073783784, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.47866366530174903, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4805464352175614, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4866738945018407, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Customer.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.4929001233240336, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.4975898495805894, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.49888435885496923, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4996500508100108, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.5059664899644999, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-05-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5226232175390417, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Customer.CustomerId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.5303970909599703, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data was sold on May 3rd 2013 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-05-03 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5340071877592701, "correct_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-05-03 00:00:00), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.23904567571464963, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2568032844278567, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2663247177354526, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2721696675109366, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2867979149059851, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2868127607407223, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,<,2003-05-03 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.29054161601853984, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,<,2003-05-03 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29244932412240426, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.29278469436154647, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2929060132355597, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2937443803115893, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.3091213280482066, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.32578678015631574, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,>,2003-05-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.32632245933078463, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.33040690414118806, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1491980811172015, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14957942458817555, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17918229584835063, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.18209297406187266, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.1846458225393855, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1971838014991509, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19898514855107546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20946022393028504, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2119294343095911, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.24235646300456304, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.24729994074487238, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.259929587362787, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),PlaylistTrack.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2718711983548336, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.30652607538903703, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31980725010729, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.14916747951792786, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.21505563849495957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.FirstName))", "score": -0.35828942203806946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Employee.Phone))", "score": -0.405514301302901, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Customer.FirstName))", "score": -0.42417758101510117, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.4311718284516246, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.FirstName),Customer.Phone))", "score": -0.4705259367256076, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Employee.Phone))", "score": -0.4714024602799327, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.FirstName),Customer.Phone))", "score": -0.5364140957026393, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Telus),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.5523259484517601, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Country),Customer.Phone))", "score": -0.5629699989585788, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.577228450718394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Telus),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Employee.Phone))", "score": -0.5870773978145377, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Employee.Phone),Customer.Phone))", "score": -0.598779128435126, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Country))", "score": -0.606113494875899, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23210523249072793, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23991381907519918, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.25040409953630605, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25879332413720896, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26105989314484024, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.2653266732945609, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.2667965466264235, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.2817191203846784, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28339419603255545, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28696523409773694, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32399383248171876, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.32458113867826, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett), Invoice.InvoiceId),Invoice.Total)", "score": -0.33950372556529446, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3411423873803652, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks in albums created by \"Britten Sinfonia, Ivor Bolton & Lesley Garrett\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3445212950801913, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Britten Sinfonia, Ivor Bolton & Lesley Garrett),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.39233195417861955, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.41547197097591826, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.41735298374771346, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.46453701955578214, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4865591390830104, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48767703635308085, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48955804912487605, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.49750798222369735, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5206479990209961, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5225290117927913, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5372711233837699, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5549343092951656, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.557495228636626, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5655980941662091, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5681591167220558, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.02631196131132956, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5735739030485744, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5754291046398853, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.605823176863297, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.628043270209739, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Customer.SupportRepId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6564091522241833, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.6704621475801105, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Customer.SupportRepId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.7066792527669432, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7090838482090817, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.7185872267524314, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7294320368850449, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.7312872528050954, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7591961737514358, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.8375176651752554, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8852828345335003, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.19508675864455877, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.25961286273330075, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.28982930583373484, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.293820139773907, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.2989680080065993, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Bytes),Track.Name))", "score": -0.3064058703601734, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3068532497416404, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.3102617005647433, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3316264737295569, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.34669133908028016, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.35234322297736254, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.35439988595396993, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.35740165438450927, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3605047355221868, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.3662425123439119, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3829839402867344, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39214310258126656, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40543450655885543, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4129298350333387, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4141873900423227, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,United Kingdom),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41662520181792617, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42236565410865307, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42557042606568923, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4268279810746733, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42898583959135816, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.Company,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4293096299464879, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43045983143350813, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4324320172115607, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4965294070518304, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5098746806511408, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.13430514427315063, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.1770185583362838, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18758166102123883, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.20356138047894543, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.2621613700298652, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2691571168200981, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.28224138648204916, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2868027442476094, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.29908229324965535, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.30921278663674284, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31294467821748856, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.31550995677595894, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33170158865516386, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.34308071642894106, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "What are the distinct genre names of tracks with media types different than \"Purchased AAC audio file\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.3669794973354318, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.20911963945235176, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.22581857594401075, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.22599540224907014, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.23608160372831183, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.24392676282573014, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24438467177793669, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24517610832460268, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2505612221976364, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2509647925034314, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.252433917340325, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.27007842106537366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.275882516323166, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.27942782097188723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29298398737536613, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32272524135159397, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.19194904166164647, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24765529583558205, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25314491692584107, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2556780163361621, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.257726843851167, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27156820551975913, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27443086356454643, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27859289864853615, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2835617198236009, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2900452163545775, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29472958580574904, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3018622032426777, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3085841695266114, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3110018537391786, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32437992758878603, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24572447855943974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.26223232075567177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28636518556040047, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30287302775663244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38124129951575014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38220412400494774, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3826079148111603, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39236869434824706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4162101525125763, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42308500670957094, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4332495000791577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,H2G 1A7),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4389051814160528, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4537006098089478, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.45491895855047915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.45506722510435793, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,>=,1), Album.Title),Album.Title))", "score": -0.26534462809649995, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,<=,1), Album.Title),Album.Title))", "score": -0.34084052682010224, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,>=,1), Album.Title),Album.Title))", "score": -0.3417871081837802, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,>=,1), Album.Title),Album.Title))", "score": -0.37132514357654145, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,>,1), Album.Title),Album.Title))", "score": -0.3993011796483188, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.InvoiceDate,<,1), Album.Title),Album.Title))", "score": -0.3998960042008548, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,<=,1), Album.Title),Album.Title))", "score": -0.4172830069073825, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.Total,>=,1), Album.Title),Album.Title))", "score": -0.42303956389514497, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))", "score": -0.44217837924962666, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,1), Album.Title),Album.Title))", "score": -0.44543144118106065, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))", "score": -0.44682104230014374, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,>,1), Album.Title),Album.Title))", "score": -0.47574365973559907, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.UnitPrice,<,1), Album.Title),Album.Title))", "score": -0.4763384842881351, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1), Album.Title),Album.Title))", "score": -0.4782364457534898, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}, {"orig_question": "What are the names of albums, copies of which were purchased one or zero times?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Invoice.Total,<=,1), Album.Title),Album.Title))", "score": -0.49853546261874726, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.3529160719294039, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.37034921124759257, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4137484301684229, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4311815694866115, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4403970617071562, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4490681476490863, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.FirstName),Employee.Address))", "score": -0.45137530289128214, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4574117485067924, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4578302010253449, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Title))", "score": -0.46180960241371394, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.4663042125130704, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.FirstName),Employee.Address))", "score": -0.4688084422094708, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Netherlands), Employee.Address),Employee.Address))", "score": -0.47100095922212243, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Title))", "score": -0.4792427417319026, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the birthdays of employees that supported customers that have their billing address in the Netherlands?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Netherlands), Employee.Address),Employee.Email))", "score": -0.4845951326447317, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Netherlands),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))", "score": -0.256673415063925, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.25981888527382807, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.266766910010916, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2696766098247824, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))", "score": -0.2762126287939974, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3113609120222728, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3115479787396631, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.31217472085184744, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Album.Title),Album.Title))", "score": -0.3198433533688452, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3399532733720928, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3404609367913677, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.35670846385098737, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Album.Title),Album.Title))", "score": -0.35763028032869637, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3611381877832587, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}, {"orig_question": "In which album from the genre Alternative occure the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.36801688331858773, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Alternative),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.1816957551491214, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2643474608350218, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.26665074494521307, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.26703868359608396, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27275109542924325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.299896514080518, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.32479334041877433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.3251812790696452, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.340224674793449, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.3431905660046055, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Playlist.Name))", "score": -0.3589748023858321, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Playlist.Name),Employee.FirstName))", "score": -0.39168721208989155, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3997536629743618, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Classical), Playlist.Name),Employee.FirstName))", "score": -0.41333620415782757, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Classical), Playlist.Name),Employee.FirstName))", "score": -0.4137241428086985, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.027754637076785743, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.41654102912331387, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7343176481607645, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.9358006885304349, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9440647947223119, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.980271579886903, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -1.0024421384587185, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Employee.LastName,=,None), Album.Title),Album.Title))", "score": -1.0357774665608304, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.0456166511430638, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.059844356572148, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.084749216823808, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.1612220799212367, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2529966746253751, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.2683511879660276, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.3137314061761296, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2419988269553982, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3255930689162392, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.32653660475710095, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3570604448913468, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3602424984925693, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.363553150413695, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.38080258119619254, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3817288461443535, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.39160707164023, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.40154032615448726, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4046877195699248, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Invoice.BillingState))", "score": -0.40613913598101015, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total),Invoice.BillingState))", "score": -0.41442168383627553, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),Track.UnitPrice),Invoice.BillingState))", "score": -0.42825693608246773, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),getData(Invoice),PlaylistTrack.PlaylistId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.43397854044457135, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.18817215766604906, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.23037858473765493, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2417379125135451, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2431725445088208, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2638434569583026, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2640497771153932, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.29767764600214186, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2979255890779443, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3041959876523241, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3149591803010498, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31506541841493885, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3279455118099577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.33027219521915613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.34038316359075754, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the billing cities of invoices associated to customers supported by employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3551755166343942, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.13934641332889441, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Invoice.BillingState))", "score": -0.33905917035008315, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Employee.State))", "score": -0.34852295742894057, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.Country),Customer.State))", "score": -0.43253497408295516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.State),Customer.State))", "score": -0.4507142870422359, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.Country))", "score": -0.47487455235386733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.48961524294281844, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5189977102127159, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5230123214569176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5386783126887167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5434753149398602, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5448551180222986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5489662541051028, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Banco do Brasil S.A.), Customer.State),Customer.State))", "score": -0.5503460660478244, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}, {"orig_question": "Find the distinct states of the customer who belongs to the company of Banco do Brasil S.A.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Invoice.BillingState),Customer.State))", "score": -0.5544928722229088, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Banco do Brasil S.A.), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.09769554240015076, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.29141148926282767, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.3720427565422142, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.5007175128266681, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Employee.Email,=,None), Customer.Email),Customer.Email))", "score": -0.5692996513243997, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.5980623807117809, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Employee.Email,=,None), Customer.Email),Customer.Email))", "score": -0.6499309186037863, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.6716831755038584, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Email),Customer.Email))", "score": -0.7021736535389209, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Employee.Email),Customer.Email))", "score": -0.7531346567120636, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Employee.Email))", "score": -0.7703598607477034, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.776987929422825, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Employee.Email))", "score": -0.7808152805191407, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.8249086855200065, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Employee),Customer.Email,=,None), Customer.Email),Employee.Email))", "score": -0.8509911280270899, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.24907178502657232, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2620579426363594, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.26984116541016206, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.27049054277465673, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2838539694770833, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.2838843124440423, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.29125912135409016, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.2958594607965272, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2983114276139588, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.300842361411304, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Margaret), Track.TrackId),Track.Milliseconds)", "score": -0.3082171632652369, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.31257260109872914, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.32010741782514496, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.32652872135245414, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks that have been sold to customers that have been supported by an employee with the first name Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.33040124019920564, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3193880607827204, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3232445022075965, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3616564344745718, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3760946402094366, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37969513571145314, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3900574158622503, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3945024379408776, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.397984327061092, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40094743331005345, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com), Invoice.InvoiceId),Invoice.Total)", "score": -0.4043448563168534, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,robert@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4065289313864135, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41346096961926715, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41672398800998006, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41981138220288533, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total sold by employees with another email than robert@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4230744828600873, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,robert@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22140043532663783, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.24417759420425508, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2497506228171283, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.26204339387832803, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.26484383303599185, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.265817336255019, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.26727386880540477, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2865496360697142, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2870376969452414, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.29349901297555053, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Email,!=,laura@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29620891667750177, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,<,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3006248839576084, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,laura@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.30300463740691813, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.3058201459463479, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with other email addresses than laura@chinookcorp.com?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.314047234658184, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,!=,laura@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.37419239053301073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3995189095718448, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.40810345402465026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4217746376507421, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4228575331375729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4235699597151859, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.43074245061522193, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.431882870148911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.44382718400252125, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.4487148305832396, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.45248515611938506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.45535201046709783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4567685966292125, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4646534672638159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.4649924055626317, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.1157389295003668, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.3002359301499382, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.37885061822767496, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.PostalCode),Album.Title))", "score": -0.43552088483193074, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.45052472422714046, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,None),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4631500700936119, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Artist.Name),Album.Title))", "score": -0.4665326450667635, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.47018331034996663, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.47244298987772654, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.LastName),Album.Title))", "score": -0.478805360635306, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.AlbumId),Album.Title))", "score": -0.4874163244567171, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.49682176231362973, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6167222869298712, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.Title),Album.Title))", "score": -0.6174804840884462, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct album titles ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Employee.PostalCode),Album.Title))", "score": -0.6200179087645665, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1305202747362585, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14619427413088504, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1678692529735038, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17353616772881653, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19635128255007137, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2001488546149389, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20925721121420784, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21718771282965793, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22213404746098583, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.23254942466175232, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2415102058408504, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.24828030746183125, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.30215429843082353, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3573688815952083, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.4318723551573458, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3659679594694354, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3925080623592988, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4002921972089469, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45828390491087173, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.4666778263768954, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.47746227965828736, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.InvoiceLineId))", "score": -0.47915828271347893, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.UnitPrice))", "score": -0.48848300176662485, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.InvoiceLineId))", "score": -0.48994273599487087, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity))", "score": -0.4968916357360281, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.4987395751463726, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.4992674550480168, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.InvoiceLineId))", "score": -0.5093720920726117, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.5095240284277646, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),InvoiceLine.InvoiceLineId))", "score": -0.5112200314829561, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.12728275727194083, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.17828157892624072, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19240199055269808, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.19442393350011497, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.21615963008934047, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21828544911814063, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.21847824974264834, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22374139017011727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2522323098250393, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.26656948059575075, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.28106648940347406, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29384031723038784, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3230514647296929, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3258752644482191, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Does there any media type name of the playlist named Heavy Metal Classic exist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.34709782110631776, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.38579727031174116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.38778508521500044, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.3986203751701396, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.4006081900733989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Customer.Country),Employee.Country))", "score": -0.45708132602158, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Customer.Country),Customer.Country))", "score": -0.4590691409248393, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Customer.Country),Employee.Country))", "score": -0.46990443087997846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Customer.Country),Customer.Country))", "score": -0.47189224578323774, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.5088293708104175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.5108171857136767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,3 Chatham Street), Employee.Country),Employee.Country))", "score": -0.5216524756688159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,=,3 Chatham Street), Employee.Country),Customer.Country))", "score": -0.5236402905720752, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.5520199767488521, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,3 Chatham Street), Invoice.BillingCountry),Customer.Country))", "score": -0.5540077916521113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.5648430816072505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Name),Track.Milliseconds))", "score": -0.20205076580714376, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.20493681525658758, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Composer),Track.Milliseconds))", "score": -0.4127111042089382, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Name),Track.Name))", "score": -0.4463424178011337, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Name))", "score": -0.4492284672505775, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.TrackId),Track.Milliseconds))", "score": -0.5281545723028103, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,10547154), Track.Name),Track.Milliseconds))", "score": -0.5344827452845493, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.5373687947339931, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Name),Track.Composer))", "score": -0.5386839600450912, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Composer))", "score": -0.541570009494535, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,10547154), Track.Name),Track.Milliseconds))", "score": -0.5837551037020603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5854472603024543, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,10547154), Track.Milliseconds),Track.Milliseconds))", "score": -0.5866411531515041, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Genre.Name))", "score": -0.6589576386546534, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "What are the distinct lengths of the tracks that are bigger than 10547154 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,>,10547154),getData(Track),Track.AlbumId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.6598856536685603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,10547154), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.024724093096566715, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.5364938125108436, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7850423841799754, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.879048334077153, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.88292602970099, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.8991718409374244, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9838806307078477, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9932307120469733, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.PostalCode),Artist.Name))", "score": -1.0239165696308083, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.060954735242691, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.157434013374415, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -1.2075228422623643, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.217306189972115, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2461526097754942, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "how many artists are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.270898278109675, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.23851958399430714, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.26607166762613454, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.27019837710264244, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.27667602844462214, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28811863357337547, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.29515842027790784, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.30722897382177816, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.32485211938564246, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3250749841125726, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.33128826758405217, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3351985990264283, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.UnitPrice),Track.Name))", "score": -0.3489055365595059, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.34925026203642595, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.UnitPrice),Track.Name))", "score": -0.370670862744483, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3812742732105029, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.30677625263342634, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.4846553176867769, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),Track.Composer))", "score": -0.5018780745581942, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),InvoiceLine.Quantity))", "score": -0.573097745682706, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5833255500244057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167), Track.Composer),InvoiceLine.Quantity))", "score": -0.5903205778665327, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.5920095687585618, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,Invoice.InvoiceId), Track.Composer),Track.Composer))", "score": -0.592300327820479, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6127250532450091, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6201919242239443, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7859167),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.AlbumId,Invoice.InvoiceId), Track.Composer),Track.Composer))", "score": -0.6204826832858615, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6276540443344647, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds),Track.Composer))", "score": -0.6369323792813671, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6375012083825716, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}, {"orig_question": "Which composer has a track with 7859167 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,7859167),getData(Genre),Track.AlbumId,InvoiceLine.TrackId), InvoiceLine.Quantity),Track.Composer))", "score": -0.6399082682296243, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,7859167), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1752338668723396, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.17813034083390578, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2001158706591278, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.20022116775084123, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2187713815275048, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23981582377364152, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2552884373488167, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.28519048595984636, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2905625504025671, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.29286927105405824, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3151612820134211, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3164924497672371, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33434641632542605, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3388510856737497, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.35520397293486367, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.29352733582709334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29562231988165877, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4075537556454947, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.4096487397000601, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.41530404329751036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4173990273520758, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.4226553151056578, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.43499346912358305, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4370884531781485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5293304631159117, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.5314254471704771, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,33000), Invoice.BillingAddress),Invoice.BillingCity))", "score": -0.5366817349240591, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.5444320225760748, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Invoice.BillingAddress))", "score": -0.5567701765940001, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me all invoices for postal code 33000 ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5588651606485655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,33000), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3728755232214205, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.3754887314883928, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38605725267992685, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.3923675865101066, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Genre.Name,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.41148518652376875, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Gordon), Track.TrackId),Track.UnitPrice)", "score": -0.4140810941244075, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42934512027796995, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4296674496845405, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4305970522001306, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43277324120976024, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,Gordon),filter(getData(Customer),Customer.LastName,=,Gordon),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43402515082621773, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43821562738122377, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.LastName,=,Gordon),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.UnitPrice), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4387555123952994, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Gordon),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4428491791430469, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "What is the average price of a track bought by the customer with the last name Gordon?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,Gordon),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.44993312332391766, "correct_code": "avg(distinct(merge(filter(getData(Customer),Customer.LastName,=,Gordon),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.26410161784823527, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.3788399482687793, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4248466391071831, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.42613585826080924, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4368114291404221, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4435158795013324, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4524410677744529, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<,3211245), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4682256176798627, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.46905904549369887, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.4780321738730083, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.479730067139921, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4871317956074462, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.49366184710622635, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,3211245),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,3211245), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5027614688406643, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.5046334143700606, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2121951413074922, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21277760064648307, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2147902855718854, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2579845528751385, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.26916072168853206, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2717070629943332, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2821959908040094, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2844829261685025, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29206788241203424, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3221373029591878, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.3223177526082449, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.32625083543496997, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3321743932338546, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.3370287773411273, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.33812862207145833, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.3172905260851037, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.3658629012787141, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.43819950483480524, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.44493636589546354, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.46658468552428434, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.46756480026287256, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.49350874108907394, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.4970960032981777, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5058422481737773, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5161532498708278, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5294493105145611, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5449625353588691, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5456683784917881, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5657861031830492, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the average total of all invoices?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5681330017811848, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.20971949282102287, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.32594210538081825, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.35460176202468574, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.3752823534887284, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.38164932164363563, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.City))", "score": -0.4586803305428475, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.4708243745844811, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.City),Customer.Address))", "score": -0.480892128078267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.4915049660485238, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5045722189825028, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Country))", "score": -0.5079504835885018, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.5265315908472985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.State))", "score": -0.5384564090054482, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5449322580825537, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.5472121823113412, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.38199945006348385, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.4295335063253652, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.4369496024484106, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.44517946444834056, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.445888109536334, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.4513163280745107, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.45249462041076716, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.45680682290605573, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4624426631469501, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4634133337804888, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.46904917402138324, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.47336135879610486, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Invoice.BillingState))", "score": -0.4792095478610146, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.47996780771777475, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}, {"orig_question": "To which different states were invoices containing a track with another unit price than 1.99 sent?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Invoice.BillingState))", "score": -0.4893627759339538, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.1658645886024335, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24363274951430075, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2623886620785511, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2637701226559029, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.2849566239133354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28545582021557936, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29037718048894556, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29122253695912514, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3113599101007273, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.3241007120420399, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32689099782311587, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.32705596253692465, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33144838250728, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Eggtown),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3318123299927705, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.35493030743203724, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.24694246175931767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.LastName))", "score": -0.32487934950040653, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.FirstName))", "score": -0.3257009399239905, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.LastName))", "score": -0.4036378276650794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.Email))", "score": -0.4039325130288489, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Email),Employee.FirstName))", "score": -0.4394544822280295, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.Email))", "score": -0.48269099119352177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.484061386975857, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.LastName))", "score": -0.5119140823048054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Email),Employee.LastName))", "score": -0.5173913699691184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.LastName),Employee.FirstName))", "score": -0.5298148895345507, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5320103747421603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Employee),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5490149540555512, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5616348220169569, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "Name the employee whose email is jane@chinookcorp.com.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),filter(merge(getData(Employee),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com),Customer.SupportRepId,Customer.SupportRepId),Employee.Email,=,jane@chinookcorp.com), Employee.FirstName),Employee.FirstName))", "score": -0.5652394432053258, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.21225484932892869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2976952689432437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39410506661170075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4206827192029518, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4239143038072866, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4396725604974563, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44707083625734767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.450131612317203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4503024208616825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4521062272333438, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4533631836311126, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.47747552826977413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4775042149508785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5023862860940541, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5024150702086932, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.11122948418051237, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.3039498973885202, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.32582313309103483, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.33233684788137907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.402145688633027, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.4980956364670419, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5084026504555368, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.LastName),Customer.FirstName))", "score": -0.5209030417972826, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5246133880937123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5272137571373605, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.LastName))", "score": -0.5925452012816095, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.6288232255974435, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.Email),Customer.FirstName))", "score": -0.6306680051857256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.Phone),Customer.FirstName))", "score": -0.6374277758659446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.Email))", "score": -0.6374651689329767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.08280679498302022, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.4193578087228547, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.4569448708666729, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.4991949036262183, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.5955746460810746, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.6708941623179226, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -0.757697910029875, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.7934958846065074, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Invoice.BillingCountry))", "score": -0.8059666462509586, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.8249327502360982, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Fax))", "score": -0.873332979509871, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.8817425276477673, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.9097872032093024, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Country))", "score": -0.932125659820909, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.9504523375144841, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.5746999634957776, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.5810560827597225, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.5873115470020476, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.592965969458902, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.5989759949891912, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.599322088722847, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),Track.Milliseconds),Track.Name))", "score": -0.6053673216342557, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.6067973724403377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),Track.Milliseconds),Track.Name))", "score": -0.6104272035791848, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.6106983737111262, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Playlist.PlaylistId,Track.GenreId),Genre.Name,=,Trampled Under Foot),Track.Milliseconds),Track.Name))", "score": -0.611217757386705, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.6170544929750713, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot), Track.Name),Track.Name))", "score": -0.6199401542921005, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Trampled Under Foot),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.6202975272942228, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),Artist.Name,=,Trampled Under Foot),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.6289643796742507, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.237142684892485, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.29738785590261074, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.31638007510473093, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3437043504711481, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3596313538315837, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.36992292083273964, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.370569066602825, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Canada),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.38146878061212697, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3991414311127189, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4031506763087515, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4055808846240811, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.Quantity),Track.UnitPrice))", "score": -0.41094687279050995, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,>=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.42581706230812616, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4321664187617125, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4497634633766519, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.09612461415235884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.32766817187075503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.4428214584768284, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.4499776746270072, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4822861466079286, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.49342455899949755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.49726165594201416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.5032240865111817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.5279652863100637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5284811210833923, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.5318448365229264, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5332172371954571, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.Total),Invoice.BillingState))", "score": -0.5439961790398229, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.5486683383163271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,Austria),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5564780413505903, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.14671918925395158, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.1780355996794305, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.18146974656399656, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20268222495574956, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.20720583313941204, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.30762331325605025, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.33521294133425295, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3506839552746314, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3782354607499836, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.3807944835653746, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.38688592091033375, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.39120404074625337, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.3912872046954966, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),Track.Name),Track.Name))", "score": -0.3929192194412006, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Track.Name))", "score": -0.3962206909707849, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.06723784213687652, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3841354740652605, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Fax,=,None), Artist.Name),Artist.Name))", "score": -0.5135465232524439, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5710121189225548, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.LastName,=,None), Artist.Name),Artist.Name))", "score": -0.5755184857043787, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5802891148123308, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.601114832842486, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6193000795369729, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Invoice.BillingCountry,=,None), Artist.Name),Artist.Name))", "score": -0.6346440875062574, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Invoice.BillingCountry,=,None), Artist.Name),Artist.Name))", "score": -0.6475723950061365, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6501179073176245, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Employee.City),Artist.Name))", "score": -0.672998898277001, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.6867013382807978, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,None), Artist.Name),Artist.Name))", "score": -0.7097001639995142, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.7130785552653833, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blues), Invoice.InvoiceId),Invoice.Total)", "score": -0.2766031981495989, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30029435926255044, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blues), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30737410162428697, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Blues),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32630718086278676, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Blues),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33550828787750614, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3462728437718219, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3499738819627157, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35932453145637233, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36195414449935315, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36252750297676156, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3656551749323318, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3708050461499788, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Blues),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3752015570753606, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3791474715612927, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blues), Invoice.InvoiceId),Invoice.Total)", "score": -0.38351780205911823, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.25055717703171076, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.2755751442824945, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.2761197510635603, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.3287510083246203, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.32976991169089187, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble), Track.Bytes),Track.Bytes))", "score": -0.3383624261856413, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.34607979322895926, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Album.Title))", "score": -0.34750585652136257, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Bytes))", "score": -0.3485676229414057, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.36309573080545704, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Bytes))", "score": -0.3684927753329189, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble), Track.TrackId),Track.Bytes)", "score": -0.3765448452190474, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.3849172055298261, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Bytes))", "score": -0.3870406665726301, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Album.Title))", "score": -0.3893605149302872, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2682687243640549, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2705130624747633, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,Rock),Track.Bytes),Album.Title))", "score": -0.2877488029144313, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3017981593741327, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.32098042628069506, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32321566183942624, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3370647115344142, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.339651342815506, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,Rock),Track.Bytes),Album.Title))", "score": -0.3401147577606332, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.34150823979263745, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,Track.Bytes),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3418644644173363, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,<=,Rock),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3475849203652428, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3603929904297607, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<=,Rock),Track.UnitPrice),Album.Title))", "score": -0.38841358633171674, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which is the album with rock tracks with the most expensive track", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Bytes,<=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.39419308579777507, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Album.Title))", "score": -0.3359908687167456, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Album.Title))", "score": -0.3748815567663815, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Album.Title))", "score": -0.38047488342365543, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.UnitPrice),Album.Title))", "score": -0.3875088805526928, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3879930844744289, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Bytes),Album.Title))", "score": -0.4016693235513073, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes),Album.Title))", "score": -0.4115521504425827, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.4208417702442998, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Track.Bytes))", "score": -0.42160303864751403, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Rio de Janeiro),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.4247785005075411, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.UnitPrice),Album.Title))", "score": -0.42639956860232875, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Milliseconds),Album.Title))", "score": -0.42820870114980614, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.UnitPrice),Album.Title))", "score": -0.43233177867963923, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),Track.Bytes),Album.Title))", "score": -0.4405600116009432, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}, {"orig_question": "How large is the longest track that we sold to Rio de Janeiro?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),InvoiceLine.Quantity),Album.Title))", "score": -0.446409067918012, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Rio de Janeiro),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3010455498974895, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Invoice.Total)", "score": -0.30234043190579035, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3272584655967426, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Invoice.Total)", "score": -0.3436639608946314, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3455516611456738, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3594316904046838, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Invoice.Total)", "score": -0.3603128131628711, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Invoice.Total)", "score": -0.3674432691494585, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3790679214231235, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.382355922395482, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Invoice.Total)", "score": -0.4013764079838349, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Invoice.Total)", "score": -0.4025404725208082, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40326517967307385, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40539806989781196, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all records sold by the employee with the phone number +1 (780) 428-9482?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,+1 (780) 428-9482),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Invoice.Total)", "score": -0.4094909879041348, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (780) 428-9482), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2516540839278605, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.335187728604069, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33859579553245567, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.390465434353417, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.42212944020866416, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.43355758031248115, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.44059543405430324, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(filter(getData(Customer),Customer.Address,=,AB),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4907850827873811, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(getData(Customer),Customer.Email,=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.49389021846363346, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(filter(getData(Customer),Customer.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.49467408251495243, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(getData(Customer),Customer.Email,=,683 10 Street SW),Employee.EmployeeId,Customer.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4958182416593905, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5204992919170763, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5330714388692286, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5359884785140567, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.545025597413769, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))", "score": -0.24377066830493277, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Track.Bytes))", "score": -0.30346893707610434, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Album.Title))", "score": -0.326555324740184, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Track.Bytes))", "score": -0.36918879488803213, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Album.Title))", "score": -0.3862535935113556, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Album.Title))", "score": -0.45197345132328337, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.49954384008742636, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.5308341978083133, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5388598517676744, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1.99), Album.Title),Album.Title))", "score": -0.5513283701345776, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.5515796936647477, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99), Album.Title),Album.Title))", "score": -0.561847945455139, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.5650736407398137, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Track.Bytes),Album.Title))", "score": -0.5686352548436492, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the distinct sizes of tracks that have a unit price greater or equal than 1.99", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Album.Title))", "score": -0.5823284965226776, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,1.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.216727517585241, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.2464090083758937, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.2632510885996453, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2829164009300106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),Track.UnitPrice),Track.UnitPrice))", "score": -0.2981844651784928, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,!=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.3131972738010518, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.319403034306689, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),getData(Track),Album.AlbumId,Track.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.325335488877854, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gustav Mahler),Track.UnitPrice),Track.UnitPrice))", "score": -0.33561051807449327, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.35733474470116294, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gustav Mahler),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3595069625989153, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.3597208448154561, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.36343573221220976, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,=,Gustav Mahler),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3679974394535813, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the prices of tracks composed by Gustav Mahler?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))", "score": -0.38924335285989037, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Gustav Mahler), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14621293152751602, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.18171908544799595, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.19622187639106262, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.20350134957035665, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.27641741917161305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.28100874717664004, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.31561197943790853, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Genre.Name),Album.Title))", "score": -0.32743615100202816, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.33404888190252413, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Track.Composer),Album.Title))", "score": -0.3437091602455221, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Rock), Genre.Name),Album.Title))", "score": -0.3474418287310109, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Artist.Name),Album.Title))", "score": -0.3477395701159441, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Track.Composer),Album.Title))", "score": -0.3569087230540099, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4097964645365783, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.42049004980446025, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Customer.FirstName),Employee.FirstName))", "score": -0.44278077026925045, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Customer.FirstName),Customer.FirstName))", "score": -0.4469574435573983, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Employee.FirstName),Employee.FirstName))", "score": -0.5314447446289353, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Playlist), Employee.FirstName),Customer.FirstName))", "score": -0.5356214179170832, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.FirstName))", "score": -0.5548488106863956, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.5590254839745434, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Customer.FirstName),Employee.FirstName))", "score": -0.5848576864341487, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Customer.FirstName),Customer.FirstName))", "score": -0.5890343597222966, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Customer.FirstName),Employee.FirstName))", "score": -0.6311739309164732, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Employee), Customer.FirstName),Customer.FirstName))", "score": -0.6353506042046211, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.FirstName),Employee.FirstName))", "score": -0.6435127850460804, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.FirstName),Customer.FirstName))", "score": -0.6476894583342283, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Employee.FirstName),Employee.FirstName))", "score": -0.6735216607938336, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.FirstName),Customer.FirstName))", "score": -0.6759056367390807, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Ho many costumors first names are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Employee.FirstName),Customer.FirstName))", "score": -0.6776983340819814, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4356639300040277, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4487849783335217, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4628420427714979, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4759630911009919, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4943870813648723, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5017220809155133, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5022858923362806, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5075081296943663, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5106253099679403, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),Invoice.Total,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5116944646273138, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.5148431292450073, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5154069406657746, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.528900216367464, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5294640277882313, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5704930767904284, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19043171435505823, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21967532483201058, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27540714955307566, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2902128416069385, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Track.TrackId),Invoice.Total)", "score": -0.2995022943924991, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31064905639961393, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31111542548498367, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32742829717871025, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3297689917653896, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33014267348551996, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34241679771415223, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.3498484119061219, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3522761006470466, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35286270313774104, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37908575118981425, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.11856851540505886, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.3100330587476492, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.3324449975043535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.36555573903024197, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.4191993186250329, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.4210158307105303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.4662818666547537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.48480132687836885, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.5054985005408525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))", "score": -0.5239095408469439, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Invoice.InvoiceDate))", "score": -0.5794322211295366, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Customer.City))", "score": -0.5817310865968466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.6106638619676232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.6124803740531206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.6330758007243276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.5028076564522053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.5172288288922573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Customer.Country),Employee.Country))", "score": -0.5250927527995373, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Customer.Country),Employee.Country))", "score": -0.5395139252395893, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Employee.Country),Customer.Country))", "score": -0.5576032718272472, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.5664431845398212, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Employee.Country),Customer.Country))", "score": -0.5720244442672993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Porto), Employee.Country),Employee.Country))", "score": -0.5785540138931538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Porto), Customer.Country),Customer.Country))", "score": -0.5798883681745792, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,=,Porto), Employee.Country),Employee.Country))", "score": -0.5808643569798733, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Porto), Employee.Country),Employee.Country))", "score": -0.58581552855685, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Porto), Customer.Country),Employee.Country))", "score": -0.5887282808871532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Company,=,Porto), Employee.Country),Employee.Country))", "score": -0.5929751863332058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Porto), Customer.Country),Customer.Country))", "score": -0.5943095406146313, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country is Porto to be found?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Porto), Employee.Country),Employee.Country))", "score": -0.6002367009969021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Porto), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3359236758269945, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3379643438632659, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.34931302574488954, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,1), Album.Title),Album.Title))", "score": -0.364404219647353, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity,=,1), Album.Title),Album.Title))", "score": -0.3812771055220036, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,=,1), Album.Title),Album.Title))", "score": -0.38272374172255624, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.3976828528151093, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4062608230696606, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,1), Album.Title),Album.Title))", "score": -0.4407368729493181, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,1),InvoiceLine.Quantity),Album.Title))", "score": -0.44143227515286854, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,1),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4443658129796498, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.4452377661842479, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,1),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.4522632096732933, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.45402713166831804, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which albums are the largest tracks, which has been sold once in the same order?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer),Album.Title))", "score": -0.45657801840927964, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.06317709878203459, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.4502365531225223, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.Fax),Employee.PostalCode))", "score": -0.48236334629473276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.4900846558448393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.Phone,=,+1 (403) 262-3443),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.49589985361997485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Customer.Phone,=,+1 (403) 262-3443),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5173028924144875, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.Fax))", "score": -0.5313214047637302, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.535320952636539, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5387670475255661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.Name))", "score": -0.5421929343428928, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5537239242373099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.City),Employee.PostalCode))", "score": -0.5620261163276155, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.6079036968585569, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.ArtistId))", "score": -0.610685227700742, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.City))", "score": -0.6290619357314426, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.09876061916605587, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.22364937739257584, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3926417842194496, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.48264711761249535, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.4851854894477583, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.LastName,=,None),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5184992209555214, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Customer),Customer.LastName,=,None),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5254680226252252, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5277365101493556, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.5410223678583782, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Invoice.BillingCountry,=,None), Album.Title),Album.Title))", "score": -0.552282109108209, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,None), Album.Title),Album.Title))", "score": -0.5655679668172316, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Invoice.BillingAddress,=,None), Album.Title),Album.Title))", "score": -0.5861803573716863, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Customer.LastName,=,None), Album.Title),Album.Title))", "score": -0.6629810784179426, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.664352959876851, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.6792503748256422, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21085077744556463, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.2638588388722472, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3002949612289935, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.31825097603674957, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3192295340714758, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.32637794920856794, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3308261255582974, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.34489592986073375, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3492074240141449, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3511720902981101, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Playlist.Name,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3564961202418924, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.36523454307911624, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.38531595062522683, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.3884314640149574, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.411799494892508, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.22483053420000942, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.24231567595415981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))", "score": -0.2473259231846896, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,IT Manager), Employee.City),Employee.City))", "score": -0.30133077118807705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.46254187296516125, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,IT Manager), Employee.City),Employee.City))", "score": -0.4667681119244662, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,IT Manager), Employee.City),Employee.City))", "score": -0.4918601176541415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,IT Manager), Employee.City),Employee.City))", "score": -0.5346102909024921, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,IT Manager), Employee.City),Employee.City))", "score": -0.5520954326566425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,IT Manager), Employee.City),Employee.City))", "score": -0.5571056798871723, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,IT Manager), Employee.City),Employee.City))", "score": -0.6035371086400119, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,IT Manager), Employee.City),Employee.City))", "score": -0.6111105278905598, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.HireDate))", "score": -0.6183635162960854, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,IT Manager), Employee.City),Employee.City))", "score": -0.6183919058021274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.HireDate))", "score": -0.6358486580502358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.038724501595424954, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.47597328173252934, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5295117720743292, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5397348541124959, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Phone))", "score": -0.5494605796193355, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Phone))", "score": -0.5509908096646541, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,>=,AB), Employee.Phone),Employee.Phone))", "score": -0.5583439036054187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5666476084860045, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5733418145697187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.State),Employee.Phone))", "score": -0.5752899544095271, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Country))", "score": -0.5764792891932302, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.FirstName))", "score": -0.5805777045679861, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Phone),Employee.Phone))", "score": -0.5873494907064014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.State))", "score": -0.6510303946924978, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Customer.Phone))", "score": -0.6889037820292288, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19452157956739935, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19834099142409098, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20698946989120912, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.2154876170550744, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22758898553284448, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2346572630303546, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.24219520468177994, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24701167618011569, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25082458931653234, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.2619594857570701, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.28038235480848583, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.3019218762986753, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.3052089447090584, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30609191383725914, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.331249267891022, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29176348373575306, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30861858586560204, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3450609782118989, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3565755242504558, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.35714853803537056, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3619160803417479, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.40843021975565186, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4289927239105885, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4344816085500368, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.43518259036854223, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.43729699550672574, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4378249708474156, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.44293309629047806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.45239799971550543, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.4596512761981388, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.221739026707744, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.30771994719692236, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.31171039703944337, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3328795750834282, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.341328866647459, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.35243098487975566, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.36386648223096413, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.3744414012236119, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.3848976925247085, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Name))", "score": -0.38578877668174877, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.4061618307381553, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Track.Name))", "score": -0.4184358147952657, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.42029593165822626, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Track.Name))", "score": -0.42060638942938694, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.42432348190550256, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.25417127162358166, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2735405689430257, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.29881618437644863, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3066535724739079, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3070833573805695, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.31799279540241776, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3216905423993529, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.32602286979335193, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.32799337341187135, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.34284296937389197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.34533102084633527, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.35129848522677487, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3537348128743771, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36784880073138254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-03-05 00:00:00),getData(Genre),Track.GenreId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.3694189847244563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.20001294575628695, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2002725588840977, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20224727106251386, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.25059637278408337, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2559632615433426, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.25638914334326357, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.257126118684951, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2600664750053602, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2623792968238226, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.26393099539726617, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.27034257446233834, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27496964392984696, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.28037051901652, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.282004120619148, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices of tracks in Heavy Metal Classic playlists?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28594064131978003, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.19031719679463713, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19158186955717477, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22324129819857227, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.23360400400568468, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.2517387502816113, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.2650232922385406, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2773981383324406, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28185132900124943, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2827611970265516, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,<,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3045726731032855, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.3184140844681769, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Track.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3256328899195284, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.3316986358391573, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3364039402765644, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists have tracks that cost less than 1.99 on them?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3457634998960144, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3086393466728623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.32424025894579245, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.39104275317367865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4066436654466088, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>=,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.43362885625538183, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4367192378776963, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.44582135142263724, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>=,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.449229768528312, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4516785806554253, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.45232015015062643, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4614222636955674, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,<,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.5160322627561982, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5282247579234536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.5316331750291283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5340819871562417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.145064816231891, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17157586601430547, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,5194092), Playlist.Name),Playlist.Name))", "score": -0.1904911831605722, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,5194092), Playlist.Name),Playlist.Name))", "score": -0.20628859153040777, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092), Playlist.Name),Playlist.Name))", "score": -0.2122882823198621, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24465731067395222, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,5194092), Playlist.Name),Playlist.Name))", "score": -0.24543865773302784, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.26149965508068407, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.278707402874199, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5194092),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3044409946837554, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30974929742649593, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,5194092),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3258395758180782, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,5194092), Playlist.Name),Playlist.Name))", "score": -0.34106847093494, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,5194092), Playlist.Name),Playlist.Name))", "score": -0.36877480438631605, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists contain tracks smaller than 5194092 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,5194092), Playlist.Name),Playlist.Name))", "score": -0.384540193555297, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,5194092),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39416438118132646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42187198773535783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.43877380863341386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.45945338681849535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.46648141518744524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.48146743849429186, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4871609933725267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4910503454557329, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5091750450483232, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5187579520097643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5244937069765001, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5356597729078203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5522012716210156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5563393091833859, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCountry,!=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5633673375523358, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.10439976457746525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2964666203060915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3689667739299843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.37855636503864043, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40040269636295783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4099922874716139, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4300171441753588, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4337330717989971, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.44708878392851154, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4716204902397886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Country))", "score": -0.4773754965861508, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.47819003764806695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48309994489752983, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Customer.Company))", "score": -0.48735306813026413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.48777962875672304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29697390141154756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32695895627680194, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35488948490143757, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3580234026012285, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3908955047385695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39837756803519747, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4015114857349884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4201913998397955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4233253175395864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4277932259720316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4313368176828352, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4342879466500908, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,1.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4344707553182639, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,1.99),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.45192840553662916, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,1.99),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.45594069186704805, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.18228846193414938, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.19184928537470114, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33187784659519776, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33738725114493184, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3429415407863672, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.36132742352172575, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3692759035144691, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3738680965133211, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.37771516070797995, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3793105943792792, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.3913943959510347, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.4104738846526743, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.41552267356734945, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.4193697377620083, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of songs composed by D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore), Invoice.BillingState),Invoice.BillingState))", "score": -0.43903197777581227, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.20542137071061006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.2459854383723723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2711617176191794, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.31172578528094164, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4918193121211516, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Customer.City),Invoice.BillingCity))", "score": -0.4926963311390864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5323833797829138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Customer.City),Customer.City))", "score": -0.5332603988008486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5570487056629645, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5575596590297209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Customer.City),Invoice.BillingCity))", "score": -0.5584366780476557, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5653692980067717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5735570651249873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5976127733247267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,!=,Finland), Customer.City),Customer.City))", "score": -0.6178337725661738, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Track.Milliseconds,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.42327205216747255, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.42757924484421683, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1.99),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4330720793907791, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.433615868260173, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4413859044897411, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.44754553473520686, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1.99),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4584994315393199, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.UnitPrice),Album.Title))", "score": -0.46135219438073105, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.476336916048993, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,1.99),Track.AlbumId,InvoiceLine.TrackId),Track.Milliseconds,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.47726670739055016, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.48060135277221655, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4862949907730335, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.4901435756945172, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,1.99),Track.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.4910733670360744, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.5007833753314267, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Country))", "score": -0.43128871703811456, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Country))", "score": -0.4530936458177166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Email))", "score": -0.4937036016053753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Country))", "score": -0.49423609460063744, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Title))", "score": -0.5020827629632549, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.Country))", "score": -0.5133577712840633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Address))", "score": -0.5152667143411236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Email))", "score": -0.5155085303849773, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.FirstName),Employee.Country))", "score": -0.515711290485342, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Title))", "score": -0.523887691742857, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Email),Employee.Address))", "score": -0.5370716431207256, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.HireDate))", "score": -0.5427359917230206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.BirthDate),Employee.Country))", "score": -0.543480975276907, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Fax),Employee.Country))", "score": -0.5465487071342068, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.HireDate),Employee.Country))", "score": -0.5549984999961453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1446821195662476, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2067677257000508, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23177522722707108, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2532575671714831, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2625265299689818, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.2626664240018114, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.267400910987016, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27228524615634997, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27557229493326657, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.2885968415678841, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31318844545868973, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.31745907342791096, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.31981435384766327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32324899192094875, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3239292915582763, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.48889598780301, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.4996125272248153, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5050852540774124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Genre.Name))", "score": -0.5121559950734209, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.5158017934992176, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.51985835466607, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Genre.Name),Customer.Company))", "score": -0.5247957299017842, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5255285063546506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.Company))", "score": -0.5259184385692993, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Genre.Name))", "score": -0.5283452613478232, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.LastName))", "score": -0.5305748940878752, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Genre.Name),Customer.LastName))", "score": -0.5355122693235895, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.5360476209404723, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.5362450457764559, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.LastName),Customer.LastName))", "score": -0.5366349779911046, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.27308685556096535, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.31037387439127356, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3351708044405243, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3381499144187202, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.348551072050882, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3710122066653437, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.37174058509500923, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.38535530596002393, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.391396294014217, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),Track.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.4027584766753751, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.41376248272886534, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,PlaylistTrack.PlaylistId),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.44372857449559994, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4568819026989657, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4645255466226701, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain music composed by Adrian Smith; Bruce Dickinson; Steve Harris? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4785742687926423, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Adrian Smith; Bruce Dickinson; Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14002818489461788, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24836497529567622, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2594949798449913, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3322818540309614, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,13.86),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3327554212775865, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3434118585802765, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3505555500149377, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36519812533785195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37335079597323784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,13.86),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3772511977393092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39018118709961097, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,<,13.86),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39468685005539333, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40131111585196994, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<,13.86),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40866339115642913, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40976993490270014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.08535817111624056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.3980854430576193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.4383759846423345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.45065960972351604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.Country),Employee.State))", "score": -0.473716519165464, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Customer.State))", "score": -0.4741441284750181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.Country))", "score": -0.4996700560186582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.501442050059314, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.5038588925137493, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.5165862839260954, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5204215674502313, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Customer.State),Employee.State))", "score": -0.5269280889515358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Invoice.BillingState))", "score": -0.5334551308028934, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1958-12-08 00:00:00), Employee.State),Employee.State))", "score": -0.5416585871462303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are employees from who are born before 1958-12-08 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.BirthDate),Employee.State))", "score": -0.5613424995426612, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1958-12-08 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.29988630127727917, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Country))", "score": -0.3485448809624271, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.37072930458524483, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Country))", "score": -0.3790409504300816, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3842630154335452, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Company))", "score": -0.38526409899004926, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Country))", "score": -0.3879513106065851, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Company))", "score": -0.3893359248229404, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Customer.Country),Customer.Country))", "score": -0.3901923598218711, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,0.99), Customer.Country),Customer.Country))", "score": -0.4072364440934733, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4104063095656055, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Invoice.BillingCountry),Customer.Country))", "score": -0.41622106833812683, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Company),Customer.Country))", "score": -0.41970854678897646, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Country),Customer.Company))", "score": -0.42874235446709846, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,0.99), Customer.Country),Customer.Country))", "score": -0.42959878946602914, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))", "score": -0.18724737093725707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.Country),Customer.State))", "score": -0.23660133556404617, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.State),Customer.State))", "score": -0.26023266241827514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.Country),Customer.State))", "score": -0.30958662704506423, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.Country))", "score": -0.38900134489813354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.Country),Customer.Country))", "score": -0.43835530952492263, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.State),Customer.Country))", "score": -0.4619866363791516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,84102), Customer.Country),Customer.Country))", "score": -0.5113406010059407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,84102), Customer.State),Customer.State))", "score": -0.5301060989586404, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,84102), Customer.Country),Customer.State))", "score": -0.5794600635854295, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,84102), Customer.State),Customer.State))", "score": -0.6030913904396584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,84102), Customer.State),Customer.State))", "score": -0.6507672403095057, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,!=,84102), Customer.Country),Customer.State))", "score": -0.6524453550664475, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,84102), Customer.State),Customer.State))", "score": -0.686730805420666, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}, {"orig_question": "From which state do customers with postal code 84102 come?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,84102), Customer.State),Customer.State))", "score": -0.6875841651199153, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,84102), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.11464249697382911, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3458410264356644, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.348206693752791, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3741642054613299, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.38458526908955454, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.40685976092572673, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4119106590995316, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4148147864737936, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.41497115718638033, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.41931527667236146, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4283219817881932, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.430675277097382, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.43749707028106555, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4775071902585313, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4867079965333687, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20158457615716743, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.26030872635622954, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2658862848071294, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.26998271589323886, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2849789621491412, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28552786659328433, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2860032771795929, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30528310487252147, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3111000965435501, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3223575796354406, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.34593396331125437, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Invoice.InvoiceDate))", "score": -0.3601917217514549, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3943569309011403, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Invoice.Total),Invoice.InvoiceDate))", "score": -0.3947598637820168, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate),Customer.City))", "score": -0.40368791979732577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3198553464210705, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Customer.State),Customer.State))", "score": -0.3388418705726508, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3917913809891511, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4063605882458417, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40949334451059305, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Customer),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.41764915476701203, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Invoice.BillingCity,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4393067284799165, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.44052759591230833, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Customer.Address),Customer.State))", "score": -0.4422349558735732, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4455028632264582, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4824087229653178, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),Customer.CustomerId,Customer.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4921375843535915, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.49256628761856613, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5007220978749851, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all the orders made by customers in a city with a postal code other than T3B 0C5?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,T3B 0C5), Invoice.Total),Customer.State))", "score": -0.5013724790478591, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T3B 0C5), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23943772516563405, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27768432561363215, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2925423136696742, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31760609422590946, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3363949512479902, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34612534660078037, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35540203861459857, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3597609763871392, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.37096777247698404, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.37886087022214265, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.382661017018181, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.3835950602635523, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4007540474403776, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4123495739548857, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42401562155706063, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11967769074353762, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14036390275148775, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.16979316297402458, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17149845438804961, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19430147167440082, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.201912371419054, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20290567973639495, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20568047470373468, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21148280595773855, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.23382654191912294, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2394258576771161, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24481818777941552, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.33895929845658995, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3467071910459233, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks in the playlist Grunge have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3509627517516136, "correct_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.2037283591177705, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.22138243846423702, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),MediaType.Name),MediaType.Name))", "score": -0.25447298026776083, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.25745143424888073, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),MediaType.Name))", "score": -0.25762961573433485, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.2761092729574553, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.29048122852161296, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Metal),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.2938194096030523, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.UnitPrice),MediaType.Name))", "score": -0.309360770549118, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal), MediaType.Name),MediaType.Name))", "score": -0.32527700031943063, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3272790718820907, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Bytes),MediaType.Name))", "score": -0.33461813379862, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.336995750328067, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.3394283853649308, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track in the \"Metal\" genre ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3428482471834056, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.16512671081324587, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))", "score": -0.2033920467314594, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.2125723237256618, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.23389429864468256, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.25561458840686946, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.2599861928490541, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.UnitPrice),MediaType.Name))", "score": -0.26513433393077934, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.2866152490148458, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))", "score": -0.29648210565294514, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.3242100966730777, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice),MediaType.Name))", "score": -0.33189937805741754, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),MediaType.Name))", "score": -0.35550729364796874, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),MediaType.Name),MediaType.Name))", "score": -0.36321859326662564, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Comedy),Track.UnitPrice),MediaType.Name))", "score": -0.3685015510943333, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}, {"orig_question": "What is the media type of the longest track that belongs to the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.3696621524231912, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Milliseconds),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3367041724740181, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3493373162375432, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3506626374099895, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3599352724726292, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3605489520365207, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3632957811735146, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3665426915298525, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3720709135065853, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3735953308961872, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37370218927972043, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3742523847805677, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.378560968216437, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37867833744082924, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.City,!=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38264830421701934, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Lethbridge),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3882763733262949, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
